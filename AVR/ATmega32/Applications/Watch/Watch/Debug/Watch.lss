
Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000474  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080006e  0080006e  00000516  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b53  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000445  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000312  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000403  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006e4  00000000  00000000  0000256f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00002c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 01 	call	0x392	; 0x392 <main>
  8a:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seven_seg_init>:
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
	bool_t b_ret_val = E_TRUE;

	u8 idx = 0;
	for (; idx < MAX_NUMBER_OF_HANDLERS; idx++) {
		if (ga_seven_handlers[idx].enum_base_port == 0)
  92:	90 91 6e 00 	lds	r25, 0x006E
  96:	99 23       	and	r25, r25
  98:	91 f0       	breq	.+36     	; 0xbe <seven_seg_init+0x2c>
  9a:	90 91 70 00 	lds	r25, 0x0070
  9e:	99 23       	and	r25, r25
  a0:	51 f0       	breq	.+20     	; 0xb6 <seven_seg_init+0x24>
  a2:	90 91 72 00 	lds	r25, 0x0072
  a6:	99 23       	and	r25, r25
  a8:	41 f0       	breq	.+16     	; 0xba <seven_seg_init+0x28>
  aa:	90 91 74 00 	lds	r25, 0x0074
  ae:	91 11       	cpse	r25, r1
  b0:	08 c0       	rjmp	.+16     	; 0xc2 <seven_seg_init+0x30>
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <seven_seg_init+0x32>
bool_t seven_seg_init(enum_port_base_t port_base,
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
	bool_t b_ret_val = E_TRUE;

	u8 idx = 0;
	for (; idx < MAX_NUMBER_OF_HANDLERS; idx++) {
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <seven_seg_init+0x32>
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <seven_seg_init+0x32>

bool_t seven_seg_init(enum_port_base_t port_base,
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
	bool_t b_ret_val = E_TRUE;

	u8 idx = 0;
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <seven_seg_init+0x32>
	for (; idx < MAX_NUMBER_OF_HANDLERS; idx++) {
  c2:	24 e0       	ldi	r18, 0x04	; 4
		if (ga_seven_handlers[idx].enum_base_port == 0)
			break;
	}

	if ((port_base < INVALID_MAX_INDEX) && (port_base > INVALID_MIN_INDEX)
  c4:	98 2f       	mov	r25, r24
  c6:	90 53       	subi	r25, 0x30	; 48
  c8:	9a 30       	cpi	r25, 0x0A	; 10
  ca:	d8 f4       	brcc	.+54     	; 0x102 <seven_seg_init+0x70>
			&& (handler != NULL)) {
  cc:	41 15       	cp	r20, r1
  ce:	51 05       	cpc	r21, r1
  d0:	d1 f0       	breq	.+52     	; 0x106 <seven_seg_init+0x74>
		if (handler_counter < MAX_NUMBER_OF_HANDLERS) {
  d2:	90 91 76 00 	lds	r25, 0x0076
  d6:	94 30       	cpi	r25, 0x04	; 4
  d8:	c0 f4       	brcc	.+48     	; 0x10a <seven_seg_init+0x78>
			*(volatile u8*) (port_base + 1) |= 0x7f;
  da:	e8 2f       	mov	r30, r24
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	31 81       	ldd	r19, Z+1	; 0x01
  e0:	3f 67       	ori	r19, 0x7F	; 127
  e2:	31 83       	std	Z+1, r19	; 0x01
			ga_seven_handlers[idx].enum_base_port = port_base;
  e4:	e2 2f       	mov	r30, r18
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e2 59       	subi	r30, 0x92	; 146
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 83       	st	Z, r24
			ga_seven_handlers[idx].enum_type = seven_seg_type;
  f2:	61 83       	std	Z+1, r22	; 0x01
			*handler = idx;
  f4:	fa 01       	movw	r30, r20
  f6:	20 83       	st	Z, r18
			handler_counter++;
  f8:	9f 5f       	subi	r25, 0xFF	; 255
  fa:	90 93 76 00 	sts	0x0076, r25

static u8 handler_counter = 0;

bool_t seven_seg_init(enum_port_base_t port_base,
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
	bool_t b_ret_val = E_TRUE;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
			handler_counter++;
		} else {
			b_ret_val = E_FALSE;
		}
	} else {
		b_ret_val = E_FALSE;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
			ga_seven_handlers[idx].enum_base_port = port_base;
			ga_seven_handlers[idx].enum_type = seven_seg_type;
			*handler = idx;
			handler_counter++;
		} else {
			b_ret_val = E_FALSE;
 10a:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		b_ret_val = E_FALSE;
	}

	return b_ret_val;
}
 10c:	08 95       	ret

0000010e <seven_seg_display>:

bool_t seven_seg_display(u8 handler, u8 dis_no) {
	bool_t b_ret_val = E_TRUE;
	if ((handler < MAX_NUMBER_OF_HANDLERS) && (dis_no < 10)) {
 10e:	84 30       	cpi	r24, 0x04	; 4
 110:	98 f5       	brcc	.+102    	; 0x178 <seven_seg_display+0x6a>
 112:	6a 30       	cpi	r22, 0x0A	; 10
 114:	98 f5       	brcc	.+102    	; 0x17c <seven_seg_display+0x6e>
		if (ga_seven_handlers[handler].enum_base_port != 0) {
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	e2 59       	subi	r30, 0x92	; 146
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	e0 81       	ld	r30, Z
 124:	ee 23       	and	r30, r30
 126:	61 f1       	breq	.+88     	; 0x180 <seven_seg_display+0x72>
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
 128:	dc 01       	movw	r26, r24
 12a:	aa 0f       	add	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	a2 59       	subi	r26, 0x92	; 146
 130:	bf 4f       	sbci	r27, 0xFF	; 255
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	8c 91       	ld	r24, X
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	71 f4       	brne	.+28     	; 0x156 <seven_seg_display+0x48>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) &= ~(0x7f);
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	82 81       	ldd	r24, Z+2	; 0x02
 13e:	80 78       	andi	r24, 0x80	; 128
 140:	82 83       	std	Z+2, r24	; 0x02
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) |= pattern[dis_no];
 142:	92 81       	ldd	r25, Z+2	; 0x02
 144:	a6 2f       	mov	r26, r22
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	ac 59       	subi	r26, 0x9C	; 156
 14a:	bf 4f       	sbci	r27, 0xFF	; 255
 14c:	8c 91       	ld	r24, X
 14e:	89 2b       	or	r24, r25
 150:	82 83       	std	Z+2, r24	; 0x02

	return b_ret_val;
}

bool_t seven_seg_display(u8 handler, u8 dis_no) {
	bool_t b_ret_val = E_TRUE;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) &= ~(0x7f);
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) |= pattern[dis_no];
			} else if (ga_seven_handlers[handler].enum_type == COMMON_ANOD) {
 156:	81 11       	cpse	r24, r1
 158:	15 c0       	rjmp	.+42     	; 0x184 <seven_seg_display+0x76>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) |= 0x7f;
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	82 81       	ldd	r24, Z+2	; 0x02
 15e:	8f 67       	ori	r24, 0x7F	; 127
 160:	82 83       	std	Z+2, r24	; 0x02
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) &= ~pattern[dis_no];
 162:	92 81       	ldd	r25, Z+2	; 0x02
 164:	a6 2f       	mov	r26, r22
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	ac 59       	subi	r26, 0x9C	; 156
 16a:	bf 4f       	sbci	r27, 0xFF	; 255
 16c:	8c 91       	ld	r24, X
 16e:	80 95       	com	r24
 170:	89 23       	and	r24, r25
 172:	82 83       	std	Z+2, r24	; 0x02

	return b_ret_val;
}

bool_t seven_seg_display(u8 handler, u8 dis_no) {
	bool_t b_ret_val = E_TRUE;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
		}
	} else {
		b_ret_val = E_FALSE;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
				/*invalid parameter*/
				b_ret_val = E_FALSE;
			}
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret
				+ 2) |= 0x7f;
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) &= ~pattern[dis_no];
			} else {
				/*invalid parameter*/
				b_ret_val = E_FALSE;
 184:	80 e0       	ldi	r24, 0x00	; 0
		}
	} else {
		b_ret_val = E_FALSE;
	}
	return b_ret_val;
}
 186:	08 95       	ret

00000188 <__vector_10>:
static Timer_OBJ * Timer_Objects[Max_TIMERS_NO];
static u32 timerResolution;
static u8 timerCount;


void TIMER0_COMP_vect() {
 188:	a7 e7       	ldi	r26, 0x77	; 119
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	2d e7       	ldi	r18, 0x7D	; 125
 18e:	30 e0       	ldi	r19, 0x00	; 0
for (int i = 0; i < Max_TIMERS_NO; i++) {
	if (Timer_Objects[i]) {
 190:	ed 91       	ld	r30, X+
 192:	fd 91       	ld	r31, X+
 194:	30 97       	sbiw	r30, 0x00	; 0
 196:	29 f0       	breq	.+10     	; 0x1a2 <__vector_10+0x1a>
		Timer_Objects[i]->remTime--;
 198:	82 81       	ldd	r24, Z+2	; 0x02
 19a:	93 81       	ldd	r25, Z+3	; 0x03
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	93 83       	std	Z+3, r25	; 0x03
 1a0:	82 83       	std	Z+2, r24	; 0x02
static u32 timerResolution;
static u8 timerCount;


void TIMER0_COMP_vect() {
for (int i = 0; i < Max_TIMERS_NO; i++) {
 1a2:	a2 17       	cp	r26, r18
 1a4:	b3 07       	cpc	r27, r19
 1a6:	a1 f7       	brne	.-24     	; 0x190 <__vector_10+0x8>
	}
	
}
	
	
	TIFR |=1;
 1a8:	88 b7       	in	r24, 0x38	; 56
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	88 bf       	out	0x38, r24	; 56
	TCNT0=0;
 1ae:	12 be       	out	0x32, r1	; 50
	OCR0=78;
 1b0:	8e e4       	ldi	r24, 0x4E	; 78
 1b2:	8c bf       	out	0x3c, r24	; 60
	sei();
 1b4:	78 94       	sei
 1b6:	08 95       	ret

000001b8 <TMU_init>:
}

TMU_Erors TMU_init(u8 hardwareTimerNo, u16 resolution, u8*ID) {
	TMU_Erors ret_error = ALL_IS_WELL;
	timerResolution = resolution;
 1b8:	70 93 7e 00 	sts	0x007E, r23
 1bc:	60 93 7d 00 	sts	0x007D, r22

	TCCR0=0b00000011;
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
 1c4:	12 be       	out	0x32, r1	; 50
	OCR0=78;
 1c6:	8e e4       	ldi	r24, 0x4E	; 78
 1c8:	8c bf       	out	0x3c, r24	; 60
	TIMSK=1<<1;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	89 bf       	out	0x39, r24	; 57
	TIFR |=1;
 1ce:	88 b7       	in	r24, 0x38	; 56
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	88 bf       	out	0x38, r24	; 56
	sei();	
 1d4:	78 94       	sei
	return ret_error;
}
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret

000001da <TMU_addTimer>:

TMU_Erors TMU_addTimer(Timer_OBJ *timerObj, u16 timePeriod, TIMER_TYPE TimerType,
void (*cb)(void * pv)) {
 1da:	cf 93       	push	r28
 1dc:	fc 01       	movw	r30, r24
cli();
 1de:	f8 94       	cli
	TMU_Erors ret_error = ALL_IS_WELL;

	if (timerCount < Max_TIMERS_NO) {
 1e0:	c0 91 7f 00 	lds	r28, 0x007F
 1e4:	c3 30       	cpi	r28, 0x03	; 3
 1e6:	a8 f5       	brcc	.+106    	; 0x252 <TMU_addTimer+0x78>
		timerObj->TimerType = TimerType;
 1e8:	44 83       	std	Z+4, r20	; 0x04
		timerObj->cb = cb;
 1ea:	36 83       	std	Z+6, r19	; 0x06
 1ec:	25 83       	std	Z+5, r18	; 0x05
		timerObj->Period = timePeriod / timerResolution;
 1ee:	20 91 7d 00 	lds	r18, 0x007D
 1f2:	30 91 7e 00 	lds	r19, 0x007E
 1f6:	cb 01       	movw	r24, r22
 1f8:	b9 01       	movw	r22, r18
 1fa:	0e 94 10 02 	call	0x420	; 0x420 <__udivmodhi4>
 1fe:	60 83       	st	Z, r22
 200:	71 83       	std	Z+1, r23	; 0x01
		timerObj->remTime=timerObj->Period;
 202:	62 83       	std	Z+2, r22	; 0x02
 204:	73 83       	std	Z+3, r23	; 0x03
		timerCount++;
 206:	cf 5f       	subi	r28, 0xFF	; 255
 208:	c0 93 7f 00 	sts	0x007F, r28

		for (int i = 0; i < Max_TIMERS_NO; i++) {
			if (!Timer_Objects[i]) {
 20c:	80 91 77 00 	lds	r24, 0x0077
 210:	90 91 78 00 	lds	r25, 0x0078
 214:	89 2b       	or	r24, r25
 216:	91 f0       	breq	.+36     	; 0x23c <TMU_addTimer+0x62>
 218:	80 91 79 00 	lds	r24, 0x0079
 21c:	90 91 7a 00 	lds	r25, 0x007A
 220:	89 2b       	or	r24, r25
 222:	49 f0       	breq	.+18     	; 0x236 <TMU_addTimer+0x5c>
 224:	80 91 7b 00 	lds	r24, 0x007B
 228:	90 91 7c 00 	lds	r25, 0x007C
 22c:	89 2b       	or	r24, r25
 22e:	99 f4       	brne	.+38     	; 0x256 <TMU_addTimer+0x7c>
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	05 c0       	rjmp	.+10     	; 0x240 <TMU_addTimer+0x66>
		timerObj->cb = cb;
		timerObj->Period = timePeriod / timerResolution;
		timerObj->remTime=timerObj->Period;
		timerCount++;

		for (int i = 0; i < Max_TIMERS_NO; i++) {
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <TMU_addTimer+0x66>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
			if (!Timer_Objects[i]) {
				Timer_Objects[i] = timerObj;
 240:	dc 01       	movw	r26, r24
 242:	aa 0f       	add	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a9 58       	subi	r26, 0x89	; 137
 248:	bf 4f       	sbci	r27, 0xFF	; 255
 24a:	ed 93       	st	X+, r30
 24c:	fc 93       	st	X, r31
}

TMU_Erors TMU_addTimer(Timer_OBJ *timerObj, u16 timePeriod, TIMER_TYPE TimerType,
void (*cb)(void * pv)) {
cli();
	TMU_Erors ret_error = ALL_IS_WELL;
 24e:	80 e0       	ldi	r24, 0x00	; 0
		timerCount++;

		for (int i = 0; i < Max_TIMERS_NO; i++) {
			if (!Timer_Objects[i]) {
				Timer_Objects[i] = timerObj;
				break;
 250:	03 c0       	rjmp	.+6      	; 0x258 <TMU_addTimer+0x7e>
			}
		}
		} else {
		//error
		ret_error = MAX_TIMERS_REACHED;
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	01 c0       	rjmp	.+2      	; 0x258 <TMU_addTimer+0x7e>
}

TMU_Erors TMU_addTimer(Timer_OBJ *timerObj, u16 timePeriod, TIMER_TYPE TimerType,
void (*cb)(void * pv)) {
cli();
	TMU_Erors ret_error = ALL_IS_WELL;
 256:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		//error
		ret_error = MAX_TIMERS_REACHED;
	}
sei();
 258:	78 94       	sei
	return ret_error;

}
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <TMU_Dispatch>:
	ret_error = Object_NOT_FOUND;
	
	return ret_error;

}
TMU_Erors TMU_Dispatch() {
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
	TMU_Erors ret_error = ALL_IS_WELL;
cli();
 26a:	f8 94       	cli
 26c:	c7 e7       	ldi	r28, 0x77	; 119
 26e:	d0 e0       	ldi	r29, 0x00	; 0
	ret_error = Object_NOT_FOUND;
	
	return ret_error;

}
TMU_Erors TMU_Dispatch() {
 270:	0d e7       	ldi	r16, 0x7D	; 125
 272:	10 e0       	ldi	r17, 0x00	; 0
	TMU_Erors ret_error = ALL_IS_WELL;
cli();
	for (int i = 0; i < Max_TIMERS_NO; i++) {
		if(Timer_Objects[i])
 274:	e8 81       	ld	r30, Y
 276:	f9 81       	ldd	r31, Y+1	; 0x01
 278:	30 97       	sbiw	r30, 0x00	; 0
 27a:	11 f1       	breq	.+68     	; 0x2c0 <TMU_Dispatch+0x62>
			if ((Timer_Objects[i]->remTime)<=0) {
 27c:	82 81       	ldd	r24, Z+2	; 0x02
 27e:	93 81       	ldd	r25, Z+3	; 0x03
 280:	18 16       	cp	r1, r24
 282:	19 06       	cpc	r1, r25
 284:	ec f0       	brlt	.+58     	; 0x2c0 <TMU_Dispatch+0x62>
				Timer_Objects[i]->cb(0);
 286:	05 80       	ldd	r0, Z+5	; 0x05
 288:	f6 81       	ldd	r31, Z+6	; 0x06
 28a:	e0 2d       	mov	r30, r0
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	09 95       	icall
				if (Timer_Objects[i]->TimerType == ONE_SHOT){
 292:	e8 81       	ld	r30, Y
 294:	f9 81       	ldd	r31, Y+1	; 0x01
 296:	84 81       	ldd	r24, Z+4	; 0x04
 298:	81 11       	cpse	r24, r1
 29a:	0a c0       	rjmp	.+20     	; 0x2b0 <TMU_Dispatch+0x52>
					timerCount--;
 29c:	80 91 7f 00 	lds	r24, 0x007F
 2a0:	81 50       	subi	r24, 0x01	; 1
 2a2:	80 93 7f 00 	sts	0x007F, r24
					Timer_Objects[i]->cb=0;
 2a6:	16 82       	std	Z+6, r1	; 0x06
 2a8:	15 82       	std	Z+5, r1	; 0x05
					Timer_Objects[i] = 0;
 2aa:	19 82       	std	Y+1, r1	; 0x01
 2ac:	18 82       	st	Y, r1
 2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <TMU_Dispatch+0x62>
				}else{
					Timer_Objects[i]->remTime+=Timer_Objects[i]->Period;
 2b0:	22 81       	ldd	r18, Z+2	; 0x02
 2b2:	33 81       	ldd	r19, Z+3	; 0x03
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	82 0f       	add	r24, r18
 2ba:	93 1f       	adc	r25, r19
 2bc:	93 83       	std	Z+3, r25	; 0x03
 2be:	82 83       	std	Z+2, r24	; 0x02
 2c0:	22 96       	adiw	r28, 0x02	; 2

}
TMU_Erors TMU_Dispatch() {
	TMU_Erors ret_error = ALL_IS_WELL;
cli();
	for (int i = 0; i < Max_TIMERS_NO; i++) {
 2c2:	c0 17       	cp	r28, r16
 2c4:	d1 07       	cpc	r29, r17
 2c6:	b1 f6       	brne	.-84     	; 0x274 <TMU_Dispatch+0x16>
				}else{
					Timer_Objects[i]->remTime+=Timer_Objects[i]->Period;
				}
			}
	}
	sei();
 2c8:	78 94       	sei
	return ret_error;

}
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	08 95       	ret

000002da <function3>:
void function2(void * pv){
	
	seven_seg_display(secID10,currSec/10);
	
}
void function3(void * pv){
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
	seven_seg_display(minID1,currMin%10);
 2de:	80 91 60 00 	lds	r24, 0x0060
 2e2:	90 91 61 00 	lds	r25, 0x0061
 2e6:	ca e0       	ldi	r28, 0x0A	; 10
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	be 01       	movw	r22, r28
 2ec:	0e 94 24 02 	call	0x448	; 0x448 <__divmodhi4>
 2f0:	68 2f       	mov	r22, r24
 2f2:	80 91 83 00 	lds	r24, 0x0083
 2f6:	0e 94 87 00 	call	0x10e	; 0x10e <seven_seg_display>
	seven_seg_display(minID10,currMin++/10);
 2fa:	80 91 60 00 	lds	r24, 0x0060
 2fe:	90 91 61 00 	lds	r25, 0x0061
 302:	9c 01       	movw	r18, r24
 304:	2f 5f       	subi	r18, 0xFF	; 255
 306:	3f 4f       	sbci	r19, 0xFF	; 255
 308:	30 93 61 00 	sts	0x0061, r19
 30c:	20 93 60 00 	sts	0x0060, r18
 310:	be 01       	movw	r22, r28
 312:	0e 94 24 02 	call	0x448	; 0x448 <__divmodhi4>
 316:	80 91 80 00 	lds	r24, 0x0080
 31a:	0e 94 87 00 	call	0x10e	; 0x10e <seven_seg_display>
	
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <function2>:
	
	currSec++;
}
void function2(void * pv){
	
	seven_seg_display(secID10,currSec/10);
 324:	80 91 62 00 	lds	r24, 0x0062
 328:	90 91 63 00 	lds	r25, 0x0063
 32c:	6a e0       	ldi	r22, 0x0A	; 10
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 24 02 	call	0x448	; 0x448 <__divmodhi4>
 334:	80 91 82 00 	lds	r24, 0x0082
 338:	0e 94 87 00 	call	0x10e	; 0x10e <seven_seg_display>
 33c:	08 95       	ret

0000033e <function1>:

int currSec=1,currMin=10;
u8 secID1,secID10,minID1,minID10;

void function1(void * pv){
	seven_seg_display(secID1,currSec%10);
 33e:	80 91 62 00 	lds	r24, 0x0062
 342:	90 91 63 00 	lds	r25, 0x0063
 346:	6a e0       	ldi	r22, 0x0A	; 10
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	0e 94 24 02 	call	0x448	; 0x448 <__divmodhi4>
 34e:	68 2f       	mov	r22, r24
 350:	80 91 81 00 	lds	r24, 0x0081
 354:	0e 94 87 00 	call	0x10e	; 0x10e <seven_seg_display>
	if(currSec>=19)currMin++,currSec=0;
 358:	80 91 62 00 	lds	r24, 0x0062
 35c:	90 91 63 00 	lds	r25, 0x0063
 360:	43 97       	sbiw	r24, 0x13	; 19
 362:	6c f0       	brlt	.+26     	; 0x37e <function1+0x40>
 364:	80 91 60 00 	lds	r24, 0x0060
 368:	90 91 61 00 	lds	r25, 0x0061
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	90 93 61 00 	sts	0x0061, r25
 372:	80 93 60 00 	sts	0x0060, r24
 376:	10 92 63 00 	sts	0x0063, r1
 37a:	10 92 62 00 	sts	0x0062, r1
	
	currSec++;
 37e:	80 91 62 00 	lds	r24, 0x0062
 382:	90 91 63 00 	lds	r25, 0x0063
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	90 93 63 00 	sts	0x0063, r25
 38c:	80 93 62 00 	sts	0x0062, r24
 390:	08 95       	ret

00000392 <main>:
	seven_seg_display(minID10,currMin++/10);
	
}

int main(void)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	65 97       	sbiw	r28, 0x15	; 21
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
	
	Timer_OBJ obj1,obj2,obj3;
	TMU_init(0,5,0);
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	65 e0       	ldi	r22, 0x05	; 5
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TMU_init>
	seven_seg_init(BASE_C,COMMON_CATHOD,&secID1);
 3b4:	41 e8       	ldi	r20, 0x81	; 129
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	83 e3       	ldi	r24, 0x33	; 51
 3bc:	0e 94 49 00 	call	0x92	; 0x92 <seven_seg_init>
	seven_seg_init(BASE_D,COMMON_CATHOD,&secID10);
 3c0:	42 e8       	ldi	r20, 0x82	; 130
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	80 e3       	ldi	r24, 0x30	; 48
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <seven_seg_init>
	
	seven_seg_init(BASE_A,COMMON_CATHOD,&minID1);
 3cc:	43 e8       	ldi	r20, 0x83	; 131
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	89 e3       	ldi	r24, 0x39	; 57
 3d4:	0e 94 49 00 	call	0x92	; 0x92 <seven_seg_init>
	seven_seg_init(BASE_B,COMMON_CATHOD,&minID10);
 3d8:	40 e8       	ldi	r20, 0x80	; 128
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	86 e3       	ldi	r24, 0x36	; 54
 3e0:	0e 94 49 00 	call	0x92	; 0x92 <seven_seg_init>
	
	TMU_addTimer(&obj1,500,PERIODIC,function1);
 3e4:	2f e9       	ldi	r18, 0x9F	; 159
 3e6:	31 e0       	ldi	r19, 0x01	; 1
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	64 ef       	ldi	r22, 0xF4	; 244
 3ec:	71 e0       	ldi	r23, 0x01	; 1
 3ee:	ce 01       	movw	r24, r28
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	0e 94 ed 00 	call	0x1da	; 0x1da <TMU_addTimer>
	TMU_addTimer(&obj2,5000,PERIODIC,function2);
 3f6:	22 e9       	ldi	r18, 0x92	; 146
 3f8:	31 e0       	ldi	r19, 0x01	; 1
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	68 e8       	ldi	r22, 0x88	; 136
 3fe:	73 e1       	ldi	r23, 0x13	; 19
 400:	ce 01       	movw	r24, r28
 402:	08 96       	adiw	r24, 0x08	; 8
 404:	0e 94 ed 00 	call	0x1da	; 0x1da <TMU_addTimer>
	TMU_addTimer(&obj3,10000,PERIODIC,function3);
 408:	2d e6       	ldi	r18, 0x6D	; 109
 40a:	31 e0       	ldi	r19, 0x01	; 1
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	60 e1       	ldi	r22, 0x10	; 16
 410:	77 e2       	ldi	r23, 0x27	; 39
 412:	ce 01       	movw	r24, r28
 414:	0f 96       	adiw	r24, 0x0f	; 15
 416:	0e 94 ed 00 	call	0x1da	; 0x1da <TMU_addTimer>
	
    while(1)
    {
		TMU_Dispatch();
 41a:	0e 94 2f 01 	call	0x25e	; 0x25e <TMU_Dispatch>
 41e:	fd cf       	rjmp	.-6      	; 0x41a <main+0x88>

00000420 <__udivmodhi4>:
 420:	aa 1b       	sub	r26, r26
 422:	bb 1b       	sub	r27, r27
 424:	51 e1       	ldi	r21, 0x11	; 17
 426:	07 c0       	rjmp	.+14     	; 0x436 <__udivmodhi4_ep>

00000428 <__udivmodhi4_loop>:
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	a6 17       	cp	r26, r22
 42e:	b7 07       	cpc	r27, r23
 430:	10 f0       	brcs	.+4      	; 0x436 <__udivmodhi4_ep>
 432:	a6 1b       	sub	r26, r22
 434:	b7 0b       	sbc	r27, r23

00000436 <__udivmodhi4_ep>:
 436:	88 1f       	adc	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	5a 95       	dec	r21
 43c:	a9 f7       	brne	.-22     	; 0x428 <__udivmodhi4_loop>
 43e:	80 95       	com	r24
 440:	90 95       	com	r25
 442:	bc 01       	movw	r22, r24
 444:	cd 01       	movw	r24, r26
 446:	08 95       	ret

00000448 <__divmodhi4>:
 448:	97 fb       	bst	r25, 7
 44a:	07 2e       	mov	r0, r23
 44c:	16 f4       	brtc	.+4      	; 0x452 <__divmodhi4+0xa>
 44e:	00 94       	com	r0
 450:	07 d0       	rcall	.+14     	; 0x460 <__divmodhi4_neg1>
 452:	77 fd       	sbrc	r23, 7
 454:	09 d0       	rcall	.+18     	; 0x468 <__divmodhi4_neg2>
 456:	0e 94 10 02 	call	0x420	; 0x420 <__udivmodhi4>
 45a:	07 fc       	sbrc	r0, 7
 45c:	05 d0       	rcall	.+10     	; 0x468 <__divmodhi4_neg2>
 45e:	3e f4       	brtc	.+14     	; 0x46e <__divmodhi4_exit>

00000460 <__divmodhi4_neg1>:
 460:	90 95       	com	r25
 462:	81 95       	neg	r24
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	08 95       	ret

00000468 <__divmodhi4_neg2>:
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255

0000046e <__divmodhi4_exit>:
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
