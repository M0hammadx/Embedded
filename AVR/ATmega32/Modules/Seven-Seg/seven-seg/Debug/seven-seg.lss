
seven-seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006a  0080006a  0000035e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000048b  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001e4  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000149  00000000  00000000  000011b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000088  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000024c  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002da  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>

#include "seven_seg.h"
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	u8 id;
	
	seven_seg_init(BASE_C,COMMON_CATHOD,&id);
  9c:	ae 01       	movw	r20, r28
  9e:	4f 5f       	subi	r20, 0xFF	; 255
  a0:	5f 4f       	sbci	r21, 0xFF	; 255
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	83 e3       	ldi	r24, 0x33	; 51
  a6:	0e 94 68 00 	call	0xd0	; 0xd0 <seven_seg_init>
	seven_seg_display(id,9);
  aa:	69 e0       	ldi	r22, 0x09	; 9
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	0e 94 9e 00 	call	0x13c	; 0x13c <seven_seg_display>
	//for(int i=0;i<80000;i++);
	seven_seg_display(id,5);
  b2:	65 e0       	ldi	r22, 0x05	; 5
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	0e 94 9e 00 	call	0x13c	; 0x13c <seven_seg_display>
	//for(int i=0;i<20000;i++);
	seven_seg_reset(id);
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <seven_seg_reset>
	seven_seg_deinit(id);
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	0e 94 29 01 	call	0x252	; 0x252 <seven_seg_deinit>
	seven_seg_display(id,5);
  c6:	65 e0       	ldi	r22, 0x05	; 5
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	0e 94 9e 00 	call	0x13c	; 0x13c <seven_seg_display>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x3c>

000000d0 <seven_seg_init>:
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
	bool_t b_ret_val = E_TRUE;

	u8 idx = 0;
	for (; idx < MAX_NUMBER_OF_HANDLERS; idx++) {
		if (ga_seven_handlers[idx].enum_base_port == 0)
  d0:	90 91 6a 00 	lds	r25, 0x006A
  d4:	99 23       	and	r25, r25
  d6:	31 f0       	breq	.+12     	; 0xe4 <seven_seg_init+0x14>
  d8:	90 91 6c 00 	lds	r25, 0x006C
  dc:	91 11       	cpse	r25, r1
  de:	04 c0       	rjmp	.+8      	; 0xe8 <seven_seg_init+0x18>
  e0:	71 e0       	ldi	r23, 0x01	; 1
  e2:	03 c0       	rjmp	.+6      	; 0xea <seven_seg_init+0x1a>

bool_t seven_seg_init(enum_port_base_t port_base,
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
	bool_t b_ret_val = E_TRUE;

	u8 idx = 0;
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	01 c0       	rjmp	.+2      	; 0xea <seven_seg_init+0x1a>
	for (; idx < MAX_NUMBER_OF_HANDLERS; idx++) {
  e8:	72 e0       	ldi	r23, 0x02	; 2
		if (ga_seven_handlers[idx].enum_base_port == 0)
			break;
	}

	if ((port_base < INVALID_MAX_INDEX) && (port_base > INVALID_MIN_INDEX)
  ea:	98 2f       	mov	r25, r24
  ec:	90 53       	subi	r25, 0x30	; 48
  ee:	9a 30       	cpi	r25, 0x0A	; 10
  f0:	f8 f4       	brcc	.+62     	; 0x130 <seven_seg_init+0x60>
			&& (handler != NULL)) {
  f2:	41 15       	cp	r20, r1
  f4:	51 05       	cpc	r21, r1
  f6:	f1 f0       	breq	.+60     	; 0x134 <seven_seg_init+0x64>
		if (handler_counter < MAX_NUMBER_OF_HANDLERS) {
  f8:	90 91 6e 00 	lds	r25, 0x006E
  fc:	92 30       	cpi	r25, 0x02	; 2
  fe:	e0 f4       	brcc	.+56     	; 0x138 <seven_seg_init+0x68>
			*(volatile u8*) (port_base + 1) |= 0x7f;
 100:	e8 2f       	mov	r30, r24
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	21 81       	ldd	r18, Z+1	; 0x01
 106:	2f 67       	ori	r18, 0x7F	; 127
 108:	21 83       	std	Z+1, r18	; 0x01
			ga_seven_handlers[idx].enum_base_port = port_base;
 10a:	27 2f       	mov	r18, r23
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	f9 01       	movw	r30, r18
 114:	e6 59       	subi	r30, 0x96	; 150
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	80 83       	st	Z, r24
			ga_seven_handlers[idx].enum_type = seven_seg_type;
 11a:	f9 01       	movw	r30, r18
 11c:	e5 59       	subi	r30, 0x95	; 149
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	60 83       	st	Z, r22
			*handler = idx;
 122:	fa 01       	movw	r30, r20
 124:	70 83       	st	Z, r23
			handler_counter++;
 126:	9f 5f       	subi	r25, 0xFF	; 255
 128:	90 93 6e 00 	sts	0x006E, r25

static u8 handler_counter = 0;

bool_t seven_seg_init(enum_port_base_t port_base,
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
	bool_t b_ret_val = E_TRUE;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret
			handler_counter++;
		} else {
			b_ret_val = E_FALSE;
		}
	} else {
		b_ret_val = E_FALSE;
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 95       	ret
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
			ga_seven_handlers[idx].enum_base_port = port_base;
			ga_seven_handlers[idx].enum_type = seven_seg_type;
			*handler = idx;
			handler_counter++;
		} else {
			b_ret_val = E_FALSE;
 138:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		b_ret_val = E_FALSE;
	}

	return b_ret_val;
}
 13a:	08 95       	ret

0000013c <seven_seg_display>:

bool_t seven_seg_display(u8 handler, u8 dis_no) {
	bool_t b_ret_val = E_TRUE;
	if ((handler < MAX_NUMBER_OF_HANDLERS) && (dis_no < 10)) {
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	08 f0       	brcs	.+2      	; 0x142 <seven_seg_display+0x6>
 140:	43 c0       	rjmp	.+134    	; 0x1c8 <seven_seg_display+0x8c>
 142:	6a 30       	cpi	r22, 0x0A	; 10
 144:	08 f0       	brcs	.+2      	; 0x148 <seven_seg_display+0xc>
 146:	42 c0       	rjmp	.+132    	; 0x1cc <seven_seg_display+0x90>
		if (ga_seven_handlers[handler].enum_base_port != 0) {
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e6 59       	subi	r30, 0x96	; 150
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	20 81       	ld	r18, Z
 156:	22 23       	and	r18, r18
 158:	d9 f1       	breq	.+118    	; 0x1d0 <seven_seg_display+0x94>
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
 15a:	fc 01       	movw	r30, r24
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	e5 59       	subi	r30, 0x95	; 149
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	30 81       	ld	r19, Z
 166:	31 30       	cpi	r19, 0x01	; 1
 168:	b1 f4       	brne	.+44     	; 0x196 <seven_seg_display+0x5a>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) &= ~(0x7f);
 16a:	e2 2f       	mov	r30, r18
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	22 81       	ldd	r18, Z+2	; 0x02
 170:	20 78       	andi	r18, 0x80	; 128
 172:	22 83       	std	Z+2, r18	; 0x02
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
 174:	fc 01       	movw	r30, r24
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e6 59       	subi	r30, 0x96	; 150
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
						+ 2) |= pattern[dis_no];
 17e:	e0 81       	ld	r30, Z
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	92 81       	ldd	r25, Z+2	; 0x02
 184:	a6 2f       	mov	r26, r22
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	a0 5a       	subi	r26, 0xA0	; 160
 18a:	bf 4f       	sbci	r27, 0xFF	; 255
 18c:	8c 91       	ld	r24, X
 18e:	89 2b       	or	r24, r25
 190:	82 83       	std	Z+2, r24	; 0x02

	return b_ret_val;
}

bool_t seven_seg_display(u8 handler, u8 dis_no) {
	bool_t b_ret_val = E_TRUE;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) &= ~(0x7f);
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) |= pattern[dis_no];
			} else if (ga_seven_handlers[handler].enum_type == COMMON_ANOD) {
 196:	31 11       	cpse	r19, r1
 198:	1d c0       	rjmp	.+58     	; 0x1d4 <seven_seg_display+0x98>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) |= 0x7f;
 19a:	e2 2f       	mov	r30, r18
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	22 81       	ldd	r18, Z+2	; 0x02
 1a0:	2f 67       	ori	r18, 0x7F	; 127
 1a2:	22 83       	std	Z+2, r18	; 0x02
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
 1a4:	fc 01       	movw	r30, r24
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e6 59       	subi	r30, 0x96	; 150
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
						+ 2) &= ~pattern[dis_no];
 1ae:	e0 81       	ld	r30, Z
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	92 81       	ldd	r25, Z+2	; 0x02
 1b4:	a6 2f       	mov	r26, r22
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	a0 5a       	subi	r26, 0xA0	; 160
 1ba:	bf 4f       	sbci	r27, 0xFF	; 255
 1bc:	8c 91       	ld	r24, X
 1be:	80 95       	com	r24
 1c0:	89 23       	and	r24, r25
 1c2:	82 83       	std	Z+2, r24	; 0x02

	return b_ret_val;
}

bool_t seven_seg_display(u8 handler, u8 dis_no) {
	bool_t b_ret_val = E_TRUE;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	08 95       	ret
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
		}
	} else {
		b_ret_val = E_FALSE;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
				/*invalid parameter*/
				b_ret_val = E_FALSE;
			}
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
				+ 2) |= 0x7f;
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) &= ~pattern[dis_no];
			} else {
				/*invalid parameter*/
				b_ret_val = E_FALSE;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
		}
	} else {
		b_ret_val = E_FALSE;
	}
	return b_ret_val;
}
 1d6:	08 95       	ret

000001d8 <seven_seg_reset>:

bool_t seven_seg_reset(u8 handler) {
	bool_t b_ret_val = E_TRUE;
	if ((handler < MAX_NUMBER_OF_HANDLERS)) {
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	a8 f5       	brcc	.+106    	; 0x246 <seven_seg_reset+0x6e>
		if (ga_seven_handlers[handler].enum_base_port != 0) {
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	e6 59       	subi	r30, 0x96	; 150
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	20 81       	ld	r18, Z
 1ea:	22 23       	and	r18, r18
 1ec:	71 f1       	breq	.+92     	; 0x24a <seven_seg_reset+0x72>
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
 1ee:	fc 01       	movw	r30, r24
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	e5 59       	subi	r30, 0x95	; 149
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	30 81       	ld	r19, Z
 1fa:	31 30       	cpi	r19, 0x01	; 1
 1fc:	89 f4       	brne	.+34     	; 0x220 <seven_seg_reset+0x48>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) &= ~(0x7f);
 1fe:	e2 2f       	mov	r30, r18
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	22 81       	ldd	r18, Z+2	; 0x02
 204:	20 78       	andi	r18, 0x80	; 128
 206:	22 83       	std	Z+2, r18	; 0x02
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
 208:	fc 01       	movw	r30, r24
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	e6 59       	subi	r30, 0x96	; 150
 210:	ff 4f       	sbci	r31, 0xFF	; 255
						+ 2) |= pattern[0];
 212:	e0 81       	ld	r30, Z
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	82 81       	ldd	r24, Z+2	; 0x02
 218:	8f 63       	ori	r24, 0x3F	; 63
 21a:	82 83       	std	Z+2, r24	; 0x02
	}
	return b_ret_val;
}

bool_t seven_seg_reset(u8 handler) {
	bool_t b_ret_val = E_TRUE;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) &= ~(0x7f);
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) |= pattern[0];
			} else if (ga_seven_handlers[handler].enum_type == COMMON_ANOD) {
 220:	31 11       	cpse	r19, r1
 222:	15 c0       	rjmp	.+42     	; 0x24e <seven_seg_reset+0x76>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
				+ 2) |= 0x7f;
 224:	e2 2f       	mov	r30, r18
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	22 81       	ldd	r18, Z+2	; 0x02
 22a:	2f 67       	ori	r18, 0x7F	; 127
 22c:	22 83       	std	Z+2, r18	; 0x02
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
 22e:	fc 01       	movw	r30, r24
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	e6 59       	subi	r30, 0x96	; 150
 236:	ff 4f       	sbci	r31, 0xFF	; 255
						+ 2) &= ~pattern[0];
 238:	e0 81       	ld	r30, Z
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	82 81       	ldd	r24, Z+2	; 0x02
 23e:	80 7c       	andi	r24, 0xC0	; 192
 240:	82 83       	std	Z+2, r24	; 0x02
	}
	return b_ret_val;
}

bool_t seven_seg_reset(u8 handler) {
	bool_t b_ret_val = E_TRUE;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	08 95       	ret
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
		}
	} else {
		b_ret_val = E_FALSE;
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
				/*invalid parameter*/
				b_ret_val = E_FALSE;
			}
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
				+ 2) |= 0x7f;
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) &= ~pattern[0];
			} else {
				/*invalid parameter*/
				b_ret_val = E_FALSE;
 24e:	80 e0       	ldi	r24, 0x00	; 0
		}
	} else {
		b_ret_val = E_FALSE;
	}
	return b_ret_val;
}
 250:	08 95       	ret

00000252 <seven_seg_deinit>:

bool_t seven_seg_deinit(u8 handler) {
	bool_t b_ret_val = E_TRUE;
	if ((handler < MAX_NUMBER_OF_HANDLERS)) {
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	68 f5       	brcc	.+90     	; 0x2b0 <seven_seg_deinit+0x5e>
		if (ga_seven_handlers[handler].enum_base_port != 0) {
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	e6 59       	subi	r30, 0x96	; 150
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	20 81       	ld	r18, Z
 264:	22 23       	and	r18, r18
 266:	31 f1       	breq	.+76     	; 0x2b4 <seven_seg_deinit+0x62>
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
 268:	fc 01       	movw	r30, r24
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	e5 59       	subi	r30, 0x95	; 149
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	30 81       	ld	r19, Z
 274:	31 30       	cpi	r19, 0x01	; 1
 276:	69 f4       	brne	.+26     	; 0x292 <seven_seg_deinit+0x40>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) &= ~(0x7f);
 278:	e2 2f       	mov	r30, r18
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	22 81       	ldd	r18, Z+2	; 0x02
 27e:	20 78       	andi	r18, 0x80	; 128
 280:	22 83       	std	Z+2, r18	; 0x02
				ga_seven_handlers[handler].enum_base_port = 0;
 282:	fc 01       	movw	r30, r24
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	e6 59       	subi	r30, 0x96	; 150
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	10 82       	st	Z, r1
	}
	return b_ret_val;
}

bool_t seven_seg_deinit(u8 handler) {
	bool_t b_ret_val = E_TRUE;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret
		if (ga_seven_handlers[handler].enum_base_port != 0) {
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) &= ~(0x7f);
				ga_seven_handlers[handler].enum_base_port = 0;
			} else if (ga_seven_handlers[handler].enum_type == COMMON_ANOD) {
 292:	31 11       	cpse	r19, r1
 294:	11 c0       	rjmp	.+34     	; 0x2b8 <seven_seg_deinit+0x66>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) |= 0x7f;
 296:	e2 2f       	mov	r30, r18
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	22 81       	ldd	r18, Z+2	; 0x02
 29c:	2f 67       	ori	r18, 0x7F	; 127
 29e:	22 83       	std	Z+2, r18	; 0x02
				ga_seven_handlers[handler].enum_base_port = 0;
 2a0:	fc 01       	movw	r30, r24
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	e6 59       	subi	r30, 0x96	; 150
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	10 82       	st	Z, r1
	}
	return b_ret_val;
}

bool_t seven_seg_deinit(u8 handler) {
	bool_t b_ret_val = E_TRUE;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
		}
	} else {
		b_ret_val = E_FALSE;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
				/*invalid parameter*/
				b_ret_val = E_FALSE;
			}
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
						+ 2) |= 0x7f;
				ga_seven_handlers[handler].enum_base_port = 0;
			} else {
				/*invalid parameter*/
				b_ret_val = E_FALSE;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
		}
	} else {
		b_ret_val = E_FALSE;
	}
	return b_ret_val;
}
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
