
TimerMangUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000310  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006dd  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000324  00000000  00000000  000011ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002b1  00000000  00000000  00001523  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000254  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000042f  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  00001f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  74:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <function1>:
#include <avr/io.h>

#include "TMU.h"

void function1(void * pv){
	DDRA=1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	8a bb       	out	0x1a, r24	; 26
	PORTA^=1;
  80:	9b b3       	in	r25, 0x1b	; 27
  82:	89 27       	eor	r24, r25
  84:	8b bb       	out	0x1b, r24	; 27
  86:	08 95       	ret

00000088 <function2>:
}
void function2(void * pv){
	DDRB=1;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	87 bb       	out	0x17, r24	; 23
	PORTB^=1;
  8c:	98 b3       	in	r25, 0x18	; 24
  8e:	89 27       	eor	r24, r25
  90:	88 bb       	out	0x18, r24	; 24
  92:	08 95       	ret

00000094 <function3>:
}
void function3(void * pv){
	DDRC=1;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	84 bb       	out	0x14, r24	; 20
	PORTC^=1;
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	89 27       	eor	r24, r25
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	08 95       	ret

000000a0 <main>:
}
int main(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	65 97       	sbiw	r28, 0x15	; 21
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
	Timer_OBJ obj1,obj2,obj3;
	TMU_init(0,5,0);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	65 e0       	ldi	r22, 0x05	; 5
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 97 00 	call	0x12e	; 0x12e <TMU_init>
	
	TMU_addTimer(&obj1,100,PERIODIC,function1);
  c2:	2e e3       	ldi	r18, 0x3E	; 62
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	64 e6       	ldi	r22, 0x64	; 100
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 a8 00 	call	0x150	; 0x150 <TMU_addTimer>
	TMU_addTimer(&obj2,50,PERIODIC,function2);
  d4:	24 e4       	ldi	r18, 0x44	; 68
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	62 e3       	ldi	r22, 0x32	; 50
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	ce 01       	movw	r24, r28
  e0:	08 96       	adiw	r24, 0x08	; 8
  e2:	0e 94 a8 00 	call	0x150	; 0x150 <TMU_addTimer>
	TMU_addTimer(&obj3,50,PERIODIC,function3);
  e6:	2a e4       	ldi	r18, 0x4A	; 74
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	62 e3       	ldi	r22, 0x32	; 50
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	ce 01       	movw	r24, r28
  f2:	0f 96       	adiw	r24, 0x0f	; 15
  f4:	0e 94 a8 00 	call	0x150	; 0x150 <TMU_addTimer>
	
	//TMU_removeTimer(&obj1);
	
	while(1)
	{
		TMU_Dispatch();
  f8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TMU_Dispatch>
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <main+0x58>

000000fe <__vector_10>:
static Timer_OBJ * Timer_Objects[Max_TIMERS_NO];
static u32 timerResolution;
static u8 timerCount;


void TIMER0_COMP_vect() {
  fe:	a0 e6       	ldi	r26, 0x60	; 96
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	26 e6       	ldi	r18, 0x66	; 102
 104:	30 e0       	ldi	r19, 0x00	; 0
for (int i = 0; i < Max_TIMERS_NO; i++) {
	if (Timer_Objects[i]) {
 106:	ed 91       	ld	r30, X+
 108:	fd 91       	ld	r31, X+
 10a:	30 97       	sbiw	r30, 0x00	; 0
 10c:	29 f0       	breq	.+10     	; 0x118 <__vector_10+0x1a>
		Timer_Objects[i]->remTime--;
 10e:	82 81       	ldd	r24, Z+2	; 0x02
 110:	93 81       	ldd	r25, Z+3	; 0x03
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	93 83       	std	Z+3, r25	; 0x03
 116:	82 83       	std	Z+2, r24	; 0x02
static u32 timerResolution;
static u8 timerCount;


void TIMER0_COMP_vect() {
for (int i = 0; i < Max_TIMERS_NO; i++) {
 118:	a2 17       	cp	r26, r18
 11a:	b3 07       	cpc	r27, r19
 11c:	a1 f7       	brne	.-24     	; 0x106 <__vector_10+0x8>
	}
	
}
	
	
	TIFR |=1;
 11e:	88 b7       	in	r24, 0x38	; 56
 120:	81 60       	ori	r24, 0x01	; 1
 122:	88 bf       	out	0x38, r24	; 56
	TCNT0=0;
 124:	12 be       	out	0x32, r1	; 50
	OCR0=78;
 126:	8e e4       	ldi	r24, 0x4E	; 78
 128:	8c bf       	out	0x3c, r24	; 60
	sei();
 12a:	78 94       	sei
 12c:	08 95       	ret

0000012e <TMU_init>:
}

TMU_Erors TMU_init(u8 hardwareTimerNo, u16 resolution, u8*ID) {
	TMU_Erors ret_error = ALL_IS_WELL;
	timerResolution = resolution;
 12e:	70 93 67 00 	sts	0x0067, r23
 132:	60 93 66 00 	sts	0x0066, r22

	TCCR0=0b00000011;
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
 13a:	12 be       	out	0x32, r1	; 50
	OCR0=78;
 13c:	8e e4       	ldi	r24, 0x4E	; 78
 13e:	8c bf       	out	0x3c, r24	; 60
	TIMSK=1<<1;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	89 bf       	out	0x39, r24	; 57
	TIFR |=1;
 144:	88 b7       	in	r24, 0x38	; 56
 146:	81 60       	ori	r24, 0x01	; 1
 148:	88 bf       	out	0x38, r24	; 56
	sei();	
 14a:	78 94       	sei
	return ret_error;
}
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret

00000150 <TMU_addTimer>:

TMU_Erors TMU_addTimer(Timer_OBJ *timerObj, u16 timePeriod, TIMER_TYPE TimerType,
void (*cb)(void * pv)) {
 150:	cf 93       	push	r28
 152:	fc 01       	movw	r30, r24
cli();
 154:	f8 94       	cli
	TMU_Erors ret_error = ALL_IS_WELL;

	if (timerCount < Max_TIMERS_NO) {
 156:	c0 91 68 00 	lds	r28, 0x0068
 15a:	c3 30       	cpi	r28, 0x03	; 3
 15c:	a8 f5       	brcc	.+106    	; 0x1c8 <TMU_addTimer+0x78>
		timerObj->TimerType = TimerType;
 15e:	44 83       	std	Z+4, r20	; 0x04
		timerObj->cb = cb;
 160:	36 83       	std	Z+6, r19	; 0x06
 162:	25 83       	std	Z+5, r18	; 0x05
		timerObj->Period = timePeriod / timerResolution;
 164:	20 91 66 00 	lds	r18, 0x0066
 168:	30 91 67 00 	lds	r19, 0x0067
 16c:	cb 01       	movw	r24, r22
 16e:	b9 01       	movw	r22, r18
 170:	0e 94 28 01 	call	0x250	; 0x250 <__udivmodhi4>
 174:	60 83       	st	Z, r22
 176:	71 83       	std	Z+1, r23	; 0x01
		timerObj->remTime=timerObj->Period;
 178:	62 83       	std	Z+2, r22	; 0x02
 17a:	73 83       	std	Z+3, r23	; 0x03
		timerCount++;
 17c:	cf 5f       	subi	r28, 0xFF	; 255
 17e:	c0 93 68 00 	sts	0x0068, r28

		for (int i = 0; i < Max_TIMERS_NO; i++) {
			if (!Timer_Objects[i]) {
 182:	80 91 60 00 	lds	r24, 0x0060
 186:	90 91 61 00 	lds	r25, 0x0061
 18a:	89 2b       	or	r24, r25
 18c:	91 f0       	breq	.+36     	; 0x1b2 <TMU_addTimer+0x62>
 18e:	80 91 62 00 	lds	r24, 0x0062
 192:	90 91 63 00 	lds	r25, 0x0063
 196:	89 2b       	or	r24, r25
 198:	49 f0       	breq	.+18     	; 0x1ac <TMU_addTimer+0x5c>
 19a:	80 91 64 00 	lds	r24, 0x0064
 19e:	90 91 65 00 	lds	r25, 0x0065
 1a2:	89 2b       	or	r24, r25
 1a4:	99 f4       	brne	.+38     	; 0x1cc <TMU_addTimer+0x7c>
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <TMU_addTimer+0x66>
		timerObj->cb = cb;
		timerObj->Period = timePeriod / timerResolution;
		timerObj->remTime=timerObj->Period;
		timerCount++;

		for (int i = 0; i < Max_TIMERS_NO; i++) {
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <TMU_addTimer+0x66>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
			if (!Timer_Objects[i]) {
				Timer_Objects[i] = timerObj;
 1b6:	dc 01       	movw	r26, r24
 1b8:	aa 0f       	add	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	a0 5a       	subi	r26, 0xA0	; 160
 1be:	bf 4f       	sbci	r27, 0xFF	; 255
 1c0:	ed 93       	st	X+, r30
 1c2:	fc 93       	st	X, r31
}

TMU_Erors TMU_addTimer(Timer_OBJ *timerObj, u16 timePeriod, TIMER_TYPE TimerType,
void (*cb)(void * pv)) {
cli();
	TMU_Erors ret_error = ALL_IS_WELL;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
		timerCount++;

		for (int i = 0; i < Max_TIMERS_NO; i++) {
			if (!Timer_Objects[i]) {
				Timer_Objects[i] = timerObj;
				break;
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <TMU_addTimer+0x7e>
			}
		}
		} else {
		//error
		ret_error = MAX_TIMERS_REACHED;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <TMU_addTimer+0x7e>
}

TMU_Erors TMU_addTimer(Timer_OBJ *timerObj, u16 timePeriod, TIMER_TYPE TimerType,
void (*cb)(void * pv)) {
cli();
	TMU_Erors ret_error = ALL_IS_WELL;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		//error
		ret_error = MAX_TIMERS_REACHED;
	}
sei();
 1ce:	78 94       	sei
	return ret_error;

}
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <TMU_Dispatch>:
	ret_error = Object_NOT_FOUND;
	
	return ret_error;

}
TMU_Erors TMU_Dispatch() {
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
	TMU_Erors ret_error = ALL_IS_WELL;
cli();
 1e0:	f8 94       	cli
 1e2:	c0 e6       	ldi	r28, 0x60	; 96
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
	ret_error = Object_NOT_FOUND;
	
	return ret_error;

}
TMU_Erors TMU_Dispatch() {
 1e6:	06 e6       	ldi	r16, 0x66	; 102
 1e8:	10 e0       	ldi	r17, 0x00	; 0
	TMU_Erors ret_error = ALL_IS_WELL;
cli();
	for (int i = 0; i < Max_TIMERS_NO; i++) {
		if(Timer_Objects[i])
 1ea:	e8 81       	ld	r30, Y
 1ec:	f9 81       	ldd	r31, Y+1	; 0x01
 1ee:	30 97       	sbiw	r30, 0x00	; 0
 1f0:	11 f1       	breq	.+68     	; 0x236 <TMU_Dispatch+0x62>
			if ((Timer_Objects[i]->remTime)<=0) {
 1f2:	82 81       	ldd	r24, Z+2	; 0x02
 1f4:	93 81       	ldd	r25, Z+3	; 0x03
 1f6:	18 16       	cp	r1, r24
 1f8:	19 06       	cpc	r1, r25
 1fa:	ec f0       	brlt	.+58     	; 0x236 <TMU_Dispatch+0x62>
				Timer_Objects[i]->cb(0);
 1fc:	05 80       	ldd	r0, Z+5	; 0x05
 1fe:	f6 81       	ldd	r31, Z+6	; 0x06
 200:	e0 2d       	mov	r30, r0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	09 95       	icall
				if (Timer_Objects[i]->TimerType == ONE_SHOT){
 208:	e8 81       	ld	r30, Y
 20a:	f9 81       	ldd	r31, Y+1	; 0x01
 20c:	84 81       	ldd	r24, Z+4	; 0x04
 20e:	81 11       	cpse	r24, r1
 210:	0a c0       	rjmp	.+20     	; 0x226 <TMU_Dispatch+0x52>
					timerCount--;
 212:	80 91 68 00 	lds	r24, 0x0068
 216:	81 50       	subi	r24, 0x01	; 1
 218:	80 93 68 00 	sts	0x0068, r24
					Timer_Objects[i]->cb=0;
 21c:	16 82       	std	Z+6, r1	; 0x06
 21e:	15 82       	std	Z+5, r1	; 0x05
					Timer_Objects[i] = 0;
 220:	19 82       	std	Y+1, r1	; 0x01
 222:	18 82       	st	Y, r1
 224:	08 c0       	rjmp	.+16     	; 0x236 <TMU_Dispatch+0x62>
				}else{
					Timer_Objects[i]->remTime+=Timer_Objects[i]->Period;
 226:	22 81       	ldd	r18, Z+2	; 0x02
 228:	33 81       	ldd	r19, Z+3	; 0x03
 22a:	80 81       	ld	r24, Z
 22c:	91 81       	ldd	r25, Z+1	; 0x01
 22e:	82 0f       	add	r24, r18
 230:	93 1f       	adc	r25, r19
 232:	93 83       	std	Z+3, r25	; 0x03
 234:	82 83       	std	Z+2, r24	; 0x02
 236:	22 96       	adiw	r28, 0x02	; 2

}
TMU_Erors TMU_Dispatch() {
	TMU_Erors ret_error = ALL_IS_WELL;
cli();
	for (int i = 0; i < Max_TIMERS_NO; i++) {
 238:	c0 17       	cp	r28, r16
 23a:	d1 07       	cpc	r29, r17
 23c:	b1 f6       	brne	.-84     	; 0x1ea <TMU_Dispatch+0x16>
				}else{
					Timer_Objects[i]->remTime+=Timer_Objects[i]->Period;
				}
			}
	}
	sei();
 23e:	78 94       	sei
	return ret_error;

}
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	08 95       	ret

00000250 <__udivmodhi4>:
 250:	aa 1b       	sub	r26, r26
 252:	bb 1b       	sub	r27, r27
 254:	51 e1       	ldi	r21, 0x11	; 17
 256:	07 c0       	rjmp	.+14     	; 0x266 <__udivmodhi4_ep>

00000258 <__udivmodhi4_loop>:
 258:	aa 1f       	adc	r26, r26
 25a:	bb 1f       	adc	r27, r27
 25c:	a6 17       	cp	r26, r22
 25e:	b7 07       	cpc	r27, r23
 260:	10 f0       	brcs	.+4      	; 0x266 <__udivmodhi4_ep>
 262:	a6 1b       	sub	r26, r22
 264:	b7 0b       	sbc	r27, r23

00000266 <__udivmodhi4_ep>:
 266:	88 1f       	adc	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	5a 95       	dec	r21
 26c:	a9 f7       	brne	.-22     	; 0x258 <__udivmodhi4_loop>
 26e:	80 95       	com	r24
 270:	90 95       	com	r25
 272:	bc 01       	movw	r22, r24
 274:	cd 01       	movw	r24, r26
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
