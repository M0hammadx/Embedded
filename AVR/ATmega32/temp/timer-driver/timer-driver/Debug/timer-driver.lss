
timer-driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000011a  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000467  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c5  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001cf  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026f  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012e  00000000  00000000  0000149f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "hal/hal_timer.h"
#include "hal/hal_system_errors.h"
#include <avr/io.h>

int main(void) {
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	1f 92       	push	r1
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	gcfg_hal_timer_t my_timer =
  78:	19 82       	std	Y+1, r1	; 0x01
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	8a 83       	std	Y+2, r24	; 0x02
  7e:	1b 82       	std	Y+3, r1	; 0x03
			.ins_timer =  TIMER_0,
			.freq = WITHOUT_PRESACLER,
			.timer_fun = NORMAL_MODE,
	};

	hal_init_timer(&my_timer);
  80:	ce 01       	movw	r24, r28
  82:	01 96       	adiw	r24, 0x01	; 1
  84:	0e 94 45 00 	call	0x8a	; 0x8a <hal_init_timer>
  88:	ff cf       	rjmp	.-2      	; 0x88 <main+0x1c>

0000008a <hal_init_timer>:
#include "hal_system_errors.h"
#include "hal_timer.h"
#include "../common.h"

ecore_s8 hal_init_timer(gcfg_hal_timer_t * obj)
{
  8a:	fc 01       	movw	r30, r24

	ecore_s8 ret_val = E_OK;
	if(obj != NULL)
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	09 f4       	brne	.+2      	; 0x92 <hal_init_timer+0x8>
  90:	41 c0       	rjmp	.+130    	; 0x114 <hal_init_timer+0x8a>
	{
		if(obj->freq && obj->ins_timer && obj->timer_fun)
  92:	81 81       	ldd	r24, Z+1	; 0x01
  94:	88 23       	and	r24, r24
  96:	f1 f1       	breq	.+124    	; 0x114 <hal_init_timer+0x8a>
  98:	90 81       	ld	r25, Z
  9a:	99 23       	and	r25, r25
  9c:	d9 f1       	breq	.+118    	; 0x114 <hal_init_timer+0x8a>
  9e:	62 81       	ldd	r22, Z+2	; 0x02
  a0:	66 23       	and	r22, r22
  a2:	c1 f1       	breq	.+112    	; 0x114 <hal_init_timer+0x8a>
		{
			switch (obj->ins_timer){
  a4:	99 23       	and	r25, r25
  a6:	19 f0       	breq	.+6      	; 0xae <hal_init_timer+0x24>
  a8:	92 30       	cpi	r25, 0x02	; 2
  aa:	a1 f5       	brne	.+104    	; 0x114 <hal_init_timer+0x8a>
  ac:	1a c0       	rjmp	.+52     	; 0xe2 <hal_init_timer+0x58>
				case TIMER_0:
					TCCR0|=((obj->timer_fun)/2)<<6;
  ae:	23 b7       	in	r18, 0x33	; 51
  b0:	66 95       	lsr	r22
  b2:	30 e4       	ldi	r19, 0x40	; 64
  b4:	63 9f       	mul	r22, r19
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	82 2b       	or	r24, r18
  bc:	83 bf       	out	0x33, r24	; 51
					TCCR0|=((obj->timer_fun)%2)<<3;
  be:	83 b7       	in	r24, 0x33	; 51
  c0:	92 81       	ldd	r25, Z+2	; 0x02
  c2:	49 2f       	mov	r20, r25
  c4:	41 70       	andi	r20, 0x01	; 1
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	44 0f       	add	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	48 2b       	or	r20, r24
  d6:	43 bf       	out	0x33, r20	; 51
					TCCR0|=(obj->freq);					
  d8:	93 b7       	in	r25, 0x33	; 51
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	89 2b       	or	r24, r25
  de:	83 bf       	out	0x33, r24	; 51
				break;
  e0:	08 95       	ret
				case TIMER_1:
					
				break;
				case TIMER_2:
					TCCR2|=((obj->timer_fun)/2)<<6;
  e2:	45 b5       	in	r20, 0x25	; 37
  e4:	66 95       	lsr	r22
  e6:	20 e4       	ldi	r18, 0x40	; 64
  e8:	62 9f       	mul	r22, r18
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	84 2b       	or	r24, r20
  f0:	85 bd       	out	0x25, r24	; 37
					TCCR2|=((obj->timer_fun)%2)<<3;
  f2:	85 b5       	in	r24, 0x25	; 37
  f4:	92 81       	ldd	r25, Z+2	; 0x02
  f6:	29 2f       	mov	r18, r25
  f8:	21 70       	andi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	28 2b       	or	r18, r24
 10a:	25 bd       	out	0x25, r18	; 37
					TCCR2|=(obj->freq);
 10c:	95 b5       	in	r25, 0x25	; 37
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	89 2b       	or	r24, r25
 112:	85 bd       	out	0x25, r24	; 37
	}
	else
	{
		ret_val = INVALID_ARG;
	}
}
 114:	08 95       	ret

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
