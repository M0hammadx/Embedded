
AVR_SDK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002d64  00002df8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800072  00800072  00002e0a  2**0
                  ALLOC
  3 .stab         000023e8  00000000  00000000  00002e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001be2  00000000  00000000  000051f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000070c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000910a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b190  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c7       	rjmp	.+3746   	; 0xeb4 <__vector_4>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c7       	rjmp	.+3686   	; 0xe90 <__vector_10>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	28 d7       	rcall	.+3664   	; 0xed8 <main>
      88:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <__fixunssfsi>:
      8e:	ef 92       	push	r14
      90:	ff 92       	push	r15
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	7b 01       	movw	r14, r22
      98:	8c 01       	movw	r16, r24
      9a:	20 e0       	ldi	r18, 0x00	; 0
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	40 e0       	ldi	r20, 0x00	; 0
      a0:	5f e4       	ldi	r21, 0x4F	; 79
      a2:	8c d3       	rcall	.+1816   	; 0x7bc <__gesf2>
      a4:	88 23       	and	r24, r24
      a6:	7c f0       	brlt	.+30     	; 0xc6 <__fixunssfsi+0x38>
      a8:	c8 01       	movw	r24, r16
      aa:	b7 01       	movw	r22, r14
      ac:	20 e0       	ldi	r18, 0x00	; 0
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	40 e0       	ldi	r20, 0x00	; 0
      b2:	5f e4       	ldi	r21, 0x4F	; 79
      b4:	60 d1       	rcall	.+704    	; 0x376 <__subsf3>
      b6:	dc d3       	rcall	.+1976   	; 0x870 <__fixsfsi>
      b8:	9b 01       	movw	r18, r22
      ba:	ac 01       	movw	r20, r24
      bc:	20 50       	subi	r18, 0x00	; 0
      be:	30 40       	sbci	r19, 0x00	; 0
      c0:	40 40       	sbci	r20, 0x00	; 0
      c2:	50 48       	sbci	r21, 0x80	; 128
      c4:	05 c0       	rjmp	.+10     	; 0xd0 <__fixunssfsi+0x42>
      c6:	c8 01       	movw	r24, r16
      c8:	b7 01       	movw	r22, r14
      ca:	d2 d3       	rcall	.+1956   	; 0x870 <__fixsfsi>
      cc:	9b 01       	movw	r18, r22
      ce:	ac 01       	movw	r20, r24
      d0:	b9 01       	movw	r22, r18
      d2:	ca 01       	movw	r24, r20
      d4:	1f 91       	pop	r17
      d6:	0f 91       	pop	r16
      d8:	ff 90       	pop	r15
      da:	ef 90       	pop	r14
      dc:	08 95       	ret

000000de <_fpadd_parts>:
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e5 e7       	ldi	r30, 0x75	; 117
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__prologue_saves__>
      ea:	dc 01       	movw	r26, r24
      ec:	2b 01       	movw	r4, r22
      ee:	fa 01       	movw	r30, r20
      f0:	9c 91       	ld	r25, X
      f2:	92 30       	cpi	r25, 0x02	; 2
      f4:	08 f4       	brcc	.+2      	; 0xf8 <_fpadd_parts+0x1a>
      f6:	39 c1       	rjmp	.+626    	; 0x36a <_fpadd_parts+0x28c>
      f8:	eb 01       	movw	r28, r22
      fa:	88 81       	ld	r24, Y
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	08 f4       	brcc	.+2      	; 0x102 <_fpadd_parts+0x24>
     100:	33 c1       	rjmp	.+614    	; 0x368 <_fpadd_parts+0x28a>
     102:	94 30       	cpi	r25, 0x04	; 4
     104:	69 f4       	brne	.+26     	; 0x120 <_fpadd_parts+0x42>
     106:	84 30       	cpi	r24, 0x04	; 4
     108:	09 f0       	breq	.+2      	; 0x10c <_fpadd_parts+0x2e>
     10a:	2f c1       	rjmp	.+606    	; 0x36a <_fpadd_parts+0x28c>
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	9c 91       	ld	r25, X
     110:	11 97       	sbiw	r26, 0x01	; 1
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	98 17       	cp	r25, r24
     116:	09 f4       	brne	.+2      	; 0x11a <_fpadd_parts+0x3c>
     118:	28 c1       	rjmp	.+592    	; 0x36a <_fpadd_parts+0x28c>
     11a:	a3 e6       	ldi	r26, 0x63	; 99
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	25 c1       	rjmp	.+586    	; 0x36a <_fpadd_parts+0x28c>
     120:	84 30       	cpi	r24, 0x04	; 4
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x48>
     124:	21 c1       	rjmp	.+578    	; 0x368 <_fpadd_parts+0x28a>
     126:	82 30       	cpi	r24, 0x02	; 2
     128:	a9 f4       	brne	.+42     	; 0x154 <_fpadd_parts+0x76>
     12a:	92 30       	cpi	r25, 0x02	; 2
     12c:	09 f0       	breq	.+2      	; 0x130 <_fpadd_parts+0x52>
     12e:	1d c1       	rjmp	.+570    	; 0x36a <_fpadd_parts+0x28c>
     130:	9a 01       	movw	r18, r20
     132:	ad 01       	movw	r20, r26
     134:	88 e0       	ldi	r24, 0x08	; 8
     136:	ea 01       	movw	r28, r20
     138:	09 90       	ld	r0, Y+
     13a:	ae 01       	movw	r20, r28
     13c:	e9 01       	movw	r28, r18
     13e:	09 92       	st	Y+, r0
     140:	9e 01       	movw	r18, r28
     142:	81 50       	subi	r24, 0x01	; 1
     144:	c1 f7       	brne	.-16     	; 0x136 <_fpadd_parts+0x58>
     146:	e2 01       	movw	r28, r4
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	11 96       	adiw	r26, 0x01	; 1
     14c:	9c 91       	ld	r25, X
     14e:	89 23       	and	r24, r25
     150:	81 83       	std	Z+1, r24	; 0x01
     152:	08 c1       	rjmp	.+528    	; 0x364 <_fpadd_parts+0x286>
     154:	92 30       	cpi	r25, 0x02	; 2
     156:	09 f4       	brne	.+2      	; 0x15a <_fpadd_parts+0x7c>
     158:	07 c1       	rjmp	.+526    	; 0x368 <_fpadd_parts+0x28a>
     15a:	12 96       	adiw	r26, 0x02	; 2
     15c:	2d 90       	ld	r2, X+
     15e:	3c 90       	ld	r3, X
     160:	13 97       	sbiw	r26, 0x03	; 3
     162:	eb 01       	movw	r28, r22
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	14 96       	adiw	r26, 0x04	; 4
     16a:	ad 90       	ld	r10, X+
     16c:	bd 90       	ld	r11, X+
     16e:	cd 90       	ld	r12, X+
     170:	dc 90       	ld	r13, X
     172:	17 97       	sbiw	r26, 0x07	; 7
     174:	ec 80       	ldd	r14, Y+4	; 0x04
     176:	fd 80       	ldd	r15, Y+5	; 0x05
     178:	0e 81       	ldd	r16, Y+6	; 0x06
     17a:	1f 81       	ldd	r17, Y+7	; 0x07
     17c:	91 01       	movw	r18, r2
     17e:	28 1b       	sub	r18, r24
     180:	39 0b       	sbc	r19, r25
     182:	b9 01       	movw	r22, r18
     184:	37 ff       	sbrs	r19, 7
     186:	04 c0       	rjmp	.+8      	; 0x190 <_fpadd_parts+0xb2>
     188:	66 27       	eor	r22, r22
     18a:	77 27       	eor	r23, r23
     18c:	62 1b       	sub	r22, r18
     18e:	73 0b       	sbc	r23, r19
     190:	60 32       	cpi	r22, 0x20	; 32
     192:	71 05       	cpc	r23, r1
     194:	0c f0       	brlt	.+2      	; 0x198 <_fpadd_parts+0xba>
     196:	61 c0       	rjmp	.+194    	; 0x25a <_fpadd_parts+0x17c>
     198:	12 16       	cp	r1, r18
     19a:	13 06       	cpc	r1, r19
     19c:	6c f5       	brge	.+90     	; 0x1f8 <_fpadd_parts+0x11a>
     19e:	37 01       	movw	r6, r14
     1a0:	48 01       	movw	r8, r16
     1a2:	06 2e       	mov	r0, r22
     1a4:	04 c0       	rjmp	.+8      	; 0x1ae <_fpadd_parts+0xd0>
     1a6:	96 94       	lsr	r9
     1a8:	87 94       	ror	r8
     1aa:	77 94       	ror	r7
     1ac:	67 94       	ror	r6
     1ae:	0a 94       	dec	r0
     1b0:	d2 f7       	brpl	.-12     	; 0x1a6 <_fpadd_parts+0xc8>
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0xe6>
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	6a 95       	dec	r22
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0xde>
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	30 40       	sbci	r19, 0x00	; 0
     1cc:	40 40       	sbci	r20, 0x00	; 0
     1ce:	50 40       	sbci	r21, 0x00	; 0
     1d0:	2e 21       	and	r18, r14
     1d2:	3f 21       	and	r19, r15
     1d4:	40 23       	and	r20, r16
     1d6:	51 23       	and	r21, r17
     1d8:	21 15       	cp	r18, r1
     1da:	31 05       	cpc	r19, r1
     1dc:	41 05       	cpc	r20, r1
     1de:	51 05       	cpc	r21, r1
     1e0:	21 f0       	breq	.+8      	; 0x1ea <_fpadd_parts+0x10c>
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	79 01       	movw	r14, r18
     1ec:	8a 01       	movw	r16, r20
     1ee:	e6 28       	or	r14, r6
     1f0:	f7 28       	or	r15, r7
     1f2:	08 29       	or	r16, r8
     1f4:	19 29       	or	r17, r9
     1f6:	3c c0       	rjmp	.+120    	; 0x270 <_fpadd_parts+0x192>
     1f8:	23 2b       	or	r18, r19
     1fa:	d1 f1       	breq	.+116    	; 0x270 <_fpadd_parts+0x192>
     1fc:	26 0e       	add	r2, r22
     1fe:	37 1e       	adc	r3, r23
     200:	35 01       	movw	r6, r10
     202:	46 01       	movw	r8, r12
     204:	06 2e       	mov	r0, r22
     206:	04 c0       	rjmp	.+8      	; 0x210 <_fpadd_parts+0x132>
     208:	96 94       	lsr	r9
     20a:	87 94       	ror	r8
     20c:	77 94       	ror	r7
     20e:	67 94       	ror	r6
     210:	0a 94       	dec	r0
     212:	d2 f7       	brpl	.-12     	; 0x208 <_fpadd_parts+0x12a>
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	04 c0       	rjmp	.+8      	; 0x226 <_fpadd_parts+0x148>
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	44 1f       	adc	r20, r20
     224:	55 1f       	adc	r21, r21
     226:	6a 95       	dec	r22
     228:	d2 f7       	brpl	.-12     	; 0x21e <_fpadd_parts+0x140>
     22a:	21 50       	subi	r18, 0x01	; 1
     22c:	30 40       	sbci	r19, 0x00	; 0
     22e:	40 40       	sbci	r20, 0x00	; 0
     230:	50 40       	sbci	r21, 0x00	; 0
     232:	2a 21       	and	r18, r10
     234:	3b 21       	and	r19, r11
     236:	4c 21       	and	r20, r12
     238:	5d 21       	and	r21, r13
     23a:	21 15       	cp	r18, r1
     23c:	31 05       	cpc	r19, r1
     23e:	41 05       	cpc	r20, r1
     240:	51 05       	cpc	r21, r1
     242:	21 f0       	breq	.+8      	; 0x24c <_fpadd_parts+0x16e>
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	59 01       	movw	r10, r18
     24e:	6a 01       	movw	r12, r20
     250:	a6 28       	or	r10, r6
     252:	b7 28       	or	r11, r7
     254:	c8 28       	or	r12, r8
     256:	d9 28       	or	r13, r9
     258:	0b c0       	rjmp	.+22     	; 0x270 <_fpadd_parts+0x192>
     25a:	82 15       	cp	r24, r2
     25c:	93 05       	cpc	r25, r3
     25e:	2c f0       	brlt	.+10     	; 0x26a <_fpadd_parts+0x18c>
     260:	1c 01       	movw	r2, r24
     262:	aa 24       	eor	r10, r10
     264:	bb 24       	eor	r11, r11
     266:	65 01       	movw	r12, r10
     268:	03 c0       	rjmp	.+6      	; 0x270 <_fpadd_parts+0x192>
     26a:	ee 24       	eor	r14, r14
     26c:	ff 24       	eor	r15, r15
     26e:	87 01       	movw	r16, r14
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 91       	ld	r25, X
     274:	d2 01       	movw	r26, r4
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	8c 91       	ld	r24, X
     27a:	98 17       	cp	r25, r24
     27c:	09 f4       	brne	.+2      	; 0x280 <_fpadd_parts+0x1a2>
     27e:	45 c0       	rjmp	.+138    	; 0x30a <_fpadd_parts+0x22c>
     280:	99 23       	and	r25, r25
     282:	39 f0       	breq	.+14     	; 0x292 <_fpadd_parts+0x1b4>
     284:	a8 01       	movw	r20, r16
     286:	97 01       	movw	r18, r14
     288:	2a 19       	sub	r18, r10
     28a:	3b 09       	sbc	r19, r11
     28c:	4c 09       	sbc	r20, r12
     28e:	5d 09       	sbc	r21, r13
     290:	06 c0       	rjmp	.+12     	; 0x29e <_fpadd_parts+0x1c0>
     292:	a6 01       	movw	r20, r12
     294:	95 01       	movw	r18, r10
     296:	2e 19       	sub	r18, r14
     298:	3f 09       	sbc	r19, r15
     29a:	40 0b       	sbc	r20, r16
     29c:	51 0b       	sbc	r21, r17
     29e:	57 fd       	sbrc	r21, 7
     2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <_fpadd_parts+0x1d4>
     2a2:	11 82       	std	Z+1, r1	; 0x01
     2a4:	33 82       	std	Z+3, r3	; 0x03
     2a6:	22 82       	std	Z+2, r2	; 0x02
     2a8:	24 83       	std	Z+4, r18	; 0x04
     2aa:	35 83       	std	Z+5, r19	; 0x05
     2ac:	46 83       	std	Z+6, r20	; 0x06
     2ae:	57 83       	std	Z+7, r21	; 0x07
     2b0:	1d c0       	rjmp	.+58     	; 0x2ec <_fpadd_parts+0x20e>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	81 83       	std	Z+1, r24	; 0x01
     2b6:	33 82       	std	Z+3, r3	; 0x03
     2b8:	22 82       	std	Z+2, r2	; 0x02
     2ba:	88 27       	eor	r24, r24
     2bc:	99 27       	eor	r25, r25
     2be:	dc 01       	movw	r26, r24
     2c0:	82 1b       	sub	r24, r18
     2c2:	93 0b       	sbc	r25, r19
     2c4:	a4 0b       	sbc	r26, r20
     2c6:	b5 0b       	sbc	r27, r21
     2c8:	84 83       	std	Z+4, r24	; 0x04
     2ca:	95 83       	std	Z+5, r25	; 0x05
     2cc:	a6 83       	std	Z+6, r26	; 0x06
     2ce:	b7 83       	std	Z+7, r27	; 0x07
     2d0:	0d c0       	rjmp	.+26     	; 0x2ec <_fpadd_parts+0x20e>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	24 83       	std	Z+4, r18	; 0x04
     2dc:	35 83       	std	Z+5, r19	; 0x05
     2de:	46 83       	std	Z+6, r20	; 0x06
     2e0:	57 83       	std	Z+7, r21	; 0x07
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	93 83       	std	Z+3, r25	; 0x03
     2ea:	82 83       	std	Z+2, r24	; 0x02
     2ec:	24 81       	ldd	r18, Z+4	; 0x04
     2ee:	35 81       	ldd	r19, Z+5	; 0x05
     2f0:	46 81       	ldd	r20, Z+6	; 0x06
     2f2:	57 81       	ldd	r21, Z+7	; 0x07
     2f4:	da 01       	movw	r26, r20
     2f6:	c9 01       	movw	r24, r18
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	a1 09       	sbc	r26, r1
     2fc:	b1 09       	sbc	r27, r1
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	9f 4f       	sbci	r25, 0xFF	; 255
     302:	af 4f       	sbci	r26, 0xFF	; 255
     304:	bf 43       	sbci	r27, 0x3F	; 63
     306:	28 f3       	brcs	.-54     	; 0x2d2 <_fpadd_parts+0x1f4>
     308:	0b c0       	rjmp	.+22     	; 0x320 <_fpadd_parts+0x242>
     30a:	91 83       	std	Z+1, r25	; 0x01
     30c:	33 82       	std	Z+3, r3	; 0x03
     30e:	22 82       	std	Z+2, r2	; 0x02
     310:	ea 0c       	add	r14, r10
     312:	fb 1c       	adc	r15, r11
     314:	0c 1d       	adc	r16, r12
     316:	1d 1d       	adc	r17, r13
     318:	e4 82       	std	Z+4, r14	; 0x04
     31a:	f5 82       	std	Z+5, r15	; 0x05
     31c:	06 83       	std	Z+6, r16	; 0x06
     31e:	17 83       	std	Z+7, r17	; 0x07
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	80 83       	st	Z, r24
     324:	24 81       	ldd	r18, Z+4	; 0x04
     326:	35 81       	ldd	r19, Z+5	; 0x05
     328:	46 81       	ldd	r20, Z+6	; 0x06
     32a:	57 81       	ldd	r21, Z+7	; 0x07
     32c:	57 ff       	sbrs	r21, 7
     32e:	1a c0       	rjmp	.+52     	; 0x364 <_fpadd_parts+0x286>
     330:	c9 01       	movw	r24, r18
     332:	aa 27       	eor	r26, r26
     334:	97 fd       	sbrc	r25, 7
     336:	a0 95       	com	r26
     338:	ba 2f       	mov	r27, r26
     33a:	81 70       	andi	r24, 0x01	; 1
     33c:	90 70       	andi	r25, 0x00	; 0
     33e:	a0 70       	andi	r26, 0x00	; 0
     340:	b0 70       	andi	r27, 0x00	; 0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	37 95       	ror	r19
     348:	27 95       	ror	r18
     34a:	82 2b       	or	r24, r18
     34c:	93 2b       	or	r25, r19
     34e:	a4 2b       	or	r26, r20
     350:	b5 2b       	or	r27, r21
     352:	84 83       	std	Z+4, r24	; 0x04
     354:	95 83       	std	Z+5, r25	; 0x05
     356:	a6 83       	std	Z+6, r26	; 0x06
     358:	b7 83       	std	Z+7, r27	; 0x07
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	93 83       	std	Z+3, r25	; 0x03
     362:	82 83       	std	Z+2, r24	; 0x02
     364:	df 01       	movw	r26, r30
     366:	01 c0       	rjmp	.+2      	; 0x36a <_fpadd_parts+0x28c>
     368:	d2 01       	movw	r26, r4
     36a:	cd 01       	movw	r24, r26
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	e2 e1       	ldi	r30, 0x12	; 18
     372:	0c 94 06 14 	jmp	0x280c	; 0x280c <__epilogue_restores__>

00000376 <__subsf3>:
     376:	a0 e2       	ldi	r26, 0x20	; 32
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e1 ec       	ldi	r30, 0xC1	; 193
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__+0x18>
     382:	69 83       	std	Y+1, r22	; 0x01
     384:	7a 83       	std	Y+2, r23	; 0x02
     386:	8b 83       	std	Y+3, r24	; 0x03
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	2d 83       	std	Y+5, r18	; 0x05
     38c:	3e 83       	std	Y+6, r19	; 0x06
     38e:	4f 83       	std	Y+7, r20	; 0x07
     390:	58 87       	std	Y+8, r21	; 0x08
     392:	e9 e0       	ldi	r30, 0x09	; 9
     394:	ee 2e       	mov	r14, r30
     396:	f1 2c       	mov	r15, r1
     398:	ec 0e       	add	r14, r28
     39a:	fd 1e       	adc	r15, r29
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	b7 01       	movw	r22, r14
     3a2:	8e d3       	rcall	.+1820   	; 0xac0 <__unpack_f>
     3a4:	8e 01       	movw	r16, r28
     3a6:	0f 5e       	subi	r16, 0xEF	; 239
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	ce 01       	movw	r24, r28
     3ac:	05 96       	adiw	r24, 0x05	; 5
     3ae:	b8 01       	movw	r22, r16
     3b0:	87 d3       	rcall	.+1806   	; 0xac0 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	8c de       	rcall	.-744    	; 0xde <_fpadd_parts>
     3c6:	a7 d2       	rcall	.+1358   	; 0x916 <__pack_f>
     3c8:	a0 96       	adiw	r28, 0x20	; 32
     3ca:	e6 e0       	ldi	r30, 0x06	; 6
     3cc:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__+0x18>

000003d0 <__addsf3>:
     3d0:	a0 e2       	ldi	r26, 0x20	; 32
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	ee ee       	ldi	r30, 0xEE	; 238
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__+0x18>
     3dc:	69 83       	std	Y+1, r22	; 0x01
     3de:	7a 83       	std	Y+2, r23	; 0x02
     3e0:	8b 83       	std	Y+3, r24	; 0x03
     3e2:	9c 83       	std	Y+4, r25	; 0x04
     3e4:	2d 83       	std	Y+5, r18	; 0x05
     3e6:	3e 83       	std	Y+6, r19	; 0x06
     3e8:	4f 83       	std	Y+7, r20	; 0x07
     3ea:	58 87       	std	Y+8, r21	; 0x08
     3ec:	f9 e0       	ldi	r31, 0x09	; 9
     3ee:	ef 2e       	mov	r14, r31
     3f0:	f1 2c       	mov	r15, r1
     3f2:	ec 0e       	add	r14, r28
     3f4:	fd 1e       	adc	r15, r29
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	b7 01       	movw	r22, r14
     3fc:	61 d3       	rcall	.+1730   	; 0xac0 <__unpack_f>
     3fe:	8e 01       	movw	r16, r28
     400:	0f 5e       	subi	r16, 0xEF	; 239
     402:	1f 4f       	sbci	r17, 0xFF	; 255
     404:	ce 01       	movw	r24, r28
     406:	05 96       	adiw	r24, 0x05	; 5
     408:	b8 01       	movw	r22, r16
     40a:	5a d3       	rcall	.+1716   	; 0xac0 <__unpack_f>
     40c:	c7 01       	movw	r24, r14
     40e:	b8 01       	movw	r22, r16
     410:	ae 01       	movw	r20, r28
     412:	47 5e       	subi	r20, 0xE7	; 231
     414:	5f 4f       	sbci	r21, 0xFF	; 255
     416:	63 de       	rcall	.-826    	; 0xde <_fpadd_parts>
     418:	7e d2       	rcall	.+1276   	; 0x916 <__pack_f>
     41a:	a0 96       	adiw	r28, 0x20	; 32
     41c:	e6 e0       	ldi	r30, 0x06	; 6
     41e:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__+0x18>

00000422 <__mulsf3>:
     422:	a0 e2       	ldi	r26, 0x20	; 32
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e7 e1       	ldi	r30, 0x17	; 23
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__prologue_saves__>
     42e:	69 83       	std	Y+1, r22	; 0x01
     430:	7a 83       	std	Y+2, r23	; 0x02
     432:	8b 83       	std	Y+3, r24	; 0x03
     434:	9c 83       	std	Y+4, r25	; 0x04
     436:	2d 83       	std	Y+5, r18	; 0x05
     438:	3e 83       	std	Y+6, r19	; 0x06
     43a:	4f 83       	std	Y+7, r20	; 0x07
     43c:	58 87       	std	Y+8, r21	; 0x08
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	be 01       	movw	r22, r28
     444:	67 5f       	subi	r22, 0xF7	; 247
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	3b d3       	rcall	.+1654   	; 0xac0 <__unpack_f>
     44a:	ce 01       	movw	r24, r28
     44c:	05 96       	adiw	r24, 0x05	; 5
     44e:	be 01       	movw	r22, r28
     450:	6f 5e       	subi	r22, 0xEF	; 239
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	35 d3       	rcall	.+1642   	; 0xac0 <__unpack_f>
     456:	99 85       	ldd	r25, Y+9	; 0x09
     458:	92 30       	cpi	r25, 0x02	; 2
     45a:	88 f0       	brcs	.+34     	; 0x47e <__mulsf3+0x5c>
     45c:	89 89       	ldd	r24, Y+17	; 0x11
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	c8 f0       	brcs	.+50     	; 0x494 <__mulsf3+0x72>
     462:	94 30       	cpi	r25, 0x04	; 4
     464:	19 f4       	brne	.+6      	; 0x46c <__mulsf3+0x4a>
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	51 f4       	brne	.+20     	; 0x47e <__mulsf3+0x5c>
     46a:	04 c0       	rjmp	.+8      	; 0x474 <__mulsf3+0x52>
     46c:	84 30       	cpi	r24, 0x04	; 4
     46e:	29 f4       	brne	.+10     	; 0x47a <__mulsf3+0x58>
     470:	92 30       	cpi	r25, 0x02	; 2
     472:	81 f4       	brne	.+32     	; 0x494 <__mulsf3+0x72>
     474:	83 e6       	ldi	r24, 0x63	; 99
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	c6 c0       	rjmp	.+396    	; 0x606 <__mulsf3+0x1e4>
     47a:	92 30       	cpi	r25, 0x02	; 2
     47c:	49 f4       	brne	.+18     	; 0x490 <__mulsf3+0x6e>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	9a 85       	ldd	r25, Y+10	; 0x0a
     482:	8a 89       	ldd	r24, Y+18	; 0x12
     484:	98 13       	cpse	r25, r24
     486:	21 e0       	ldi	r18, 0x01	; 1
     488:	2a 87       	std	Y+10, r18	; 0x0a
     48a:	ce 01       	movw	r24, r28
     48c:	09 96       	adiw	r24, 0x09	; 9
     48e:	bb c0       	rjmp	.+374    	; 0x606 <__mulsf3+0x1e4>
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	49 f4       	brne	.+18     	; 0x4a6 <__mulsf3+0x84>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	9a 85       	ldd	r25, Y+10	; 0x0a
     498:	8a 89       	ldd	r24, Y+18	; 0x12
     49a:	98 13       	cpse	r25, r24
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	2a 8b       	std	Y+18, r18	; 0x12
     4a0:	ce 01       	movw	r24, r28
     4a2:	41 96       	adiw	r24, 0x11	; 17
     4a4:	b0 c0       	rjmp	.+352    	; 0x606 <__mulsf3+0x1e4>
     4a6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4a8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4aa:	4f 84       	ldd	r4, Y+15	; 0x0f
     4ac:	58 88       	ldd	r5, Y+16	; 0x10
     4ae:	6d 88       	ldd	r6, Y+21	; 0x15
     4b0:	7e 88       	ldd	r7, Y+22	; 0x16
     4b2:	8f 88       	ldd	r8, Y+23	; 0x17
     4b4:	98 8c       	ldd	r9, Y+24	; 0x18
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	87 01       	movw	r16, r14
     4bc:	aa 24       	eor	r10, r10
     4be:	bb 24       	eor	r11, r11
     4c0:	65 01       	movw	r12, r10
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	e0 e0       	ldi	r30, 0x00	; 0
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	c1 01       	movw	r24, r2
     4d0:	81 70       	andi	r24, 0x01	; 1
     4d2:	90 70       	andi	r25, 0x00	; 0
     4d4:	89 2b       	or	r24, r25
     4d6:	e9 f0       	breq	.+58     	; 0x512 <__mulsf3+0xf0>
     4d8:	e6 0c       	add	r14, r6
     4da:	f7 1c       	adc	r15, r7
     4dc:	08 1d       	adc	r16, r8
     4de:	19 1d       	adc	r17, r9
     4e0:	9a 01       	movw	r18, r20
     4e2:	ab 01       	movw	r20, r22
     4e4:	2a 0d       	add	r18, r10
     4e6:	3b 1d       	adc	r19, r11
     4e8:	4c 1d       	adc	r20, r12
     4ea:	5d 1d       	adc	r21, r13
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	e6 14       	cp	r14, r6
     4f6:	f7 04       	cpc	r15, r7
     4f8:	08 05       	cpc	r16, r8
     4fa:	19 05       	cpc	r17, r9
     4fc:	20 f4       	brcc	.+8      	; 0x506 <__mulsf3+0xe4>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	a0 e0       	ldi	r26, 0x00	; 0
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	ba 01       	movw	r22, r20
     508:	a9 01       	movw	r20, r18
     50a:	48 0f       	add	r20, r24
     50c:	59 1f       	adc	r21, r25
     50e:	6a 1f       	adc	r22, r26
     510:	7b 1f       	adc	r23, r27
     512:	aa 0c       	add	r10, r10
     514:	bb 1c       	adc	r11, r11
     516:	cc 1c       	adc	r12, r12
     518:	dd 1c       	adc	r13, r13
     51a:	97 fe       	sbrs	r9, 7
     51c:	08 c0       	rjmp	.+16     	; 0x52e <__mulsf3+0x10c>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	a8 2a       	or	r10, r24
     528:	b9 2a       	or	r11, r25
     52a:	ca 2a       	or	r12, r26
     52c:	db 2a       	or	r13, r27
     52e:	31 96       	adiw	r30, 0x01	; 1
     530:	e0 32       	cpi	r30, 0x20	; 32
     532:	f1 05       	cpc	r31, r1
     534:	49 f0       	breq	.+18     	; 0x548 <__mulsf3+0x126>
     536:	66 0c       	add	r6, r6
     538:	77 1c       	adc	r7, r7
     53a:	88 1c       	adc	r8, r8
     53c:	99 1c       	adc	r9, r9
     53e:	56 94       	lsr	r5
     540:	47 94       	ror	r4
     542:	37 94       	ror	r3
     544:	27 94       	ror	r2
     546:	c3 cf       	rjmp	.-122    	; 0x4ce <__mulsf3+0xac>
     548:	fa 85       	ldd	r31, Y+10	; 0x0a
     54a:	ea 89       	ldd	r30, Y+18	; 0x12
     54c:	2b 89       	ldd	r18, Y+19	; 0x13
     54e:	3c 89       	ldd	r19, Y+20	; 0x14
     550:	8b 85       	ldd	r24, Y+11	; 0x0b
     552:	9c 85       	ldd	r25, Y+12	; 0x0c
     554:	28 0f       	add	r18, r24
     556:	39 1f       	adc	r19, r25
     558:	2e 5f       	subi	r18, 0xFE	; 254
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	17 c0       	rjmp	.+46     	; 0x58c <__mulsf3+0x16a>
     55e:	ca 01       	movw	r24, r20
     560:	81 70       	andi	r24, 0x01	; 1
     562:	90 70       	andi	r25, 0x00	; 0
     564:	89 2b       	or	r24, r25
     566:	61 f0       	breq	.+24     	; 0x580 <__mulsf3+0x15e>
     568:	16 95       	lsr	r17
     56a:	07 95       	ror	r16
     56c:	f7 94       	ror	r15
     56e:	e7 94       	ror	r14
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	b0 e8       	ldi	r27, 0x80	; 128
     578:	e8 2a       	or	r14, r24
     57a:	f9 2a       	or	r15, r25
     57c:	0a 2b       	or	r16, r26
     57e:	1b 2b       	or	r17, r27
     580:	76 95       	lsr	r23
     582:	67 95       	ror	r22
     584:	57 95       	ror	r21
     586:	47 95       	ror	r20
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	77 fd       	sbrc	r23, 7
     58e:	e7 cf       	rjmp	.-50     	; 0x55e <__mulsf3+0x13c>
     590:	0c c0       	rjmp	.+24     	; 0x5aa <__mulsf3+0x188>
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	66 1f       	adc	r22, r22
     598:	77 1f       	adc	r23, r23
     59a:	17 fd       	sbrc	r17, 7
     59c:	41 60       	ori	r20, 0x01	; 1
     59e:	ee 0c       	add	r14, r14
     5a0:	ff 1c       	adc	r15, r15
     5a2:	00 1f       	adc	r16, r16
     5a4:	11 1f       	adc	r17, r17
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	30 40       	sbci	r19, 0x00	; 0
     5aa:	40 30       	cpi	r20, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	59 07       	cpc	r21, r25
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	69 07       	cpc	r22, r25
     5b4:	90 e4       	ldi	r25, 0x40	; 64
     5b6:	79 07       	cpc	r23, r25
     5b8:	60 f3       	brcs	.-40     	; 0x592 <__mulsf3+0x170>
     5ba:	2b 8f       	std	Y+27, r18	; 0x1b
     5bc:	3c 8f       	std	Y+28, r19	; 0x1c
     5be:	db 01       	movw	r26, r22
     5c0:	ca 01       	movw	r24, r20
     5c2:	8f 77       	andi	r24, 0x7F	; 127
     5c4:	90 70       	andi	r25, 0x00	; 0
     5c6:	a0 70       	andi	r26, 0x00	; 0
     5c8:	b0 70       	andi	r27, 0x00	; 0
     5ca:	80 34       	cpi	r24, 0x40	; 64
     5cc:	91 05       	cpc	r25, r1
     5ce:	a1 05       	cpc	r26, r1
     5d0:	b1 05       	cpc	r27, r1
     5d2:	61 f4       	brne	.+24     	; 0x5ec <__mulsf3+0x1ca>
     5d4:	47 fd       	sbrc	r20, 7
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <__mulsf3+0x1ca>
     5d8:	e1 14       	cp	r14, r1
     5da:	f1 04       	cpc	r15, r1
     5dc:	01 05       	cpc	r16, r1
     5de:	11 05       	cpc	r17, r1
     5e0:	29 f0       	breq	.+10     	; 0x5ec <__mulsf3+0x1ca>
     5e2:	40 5c       	subi	r20, 0xC0	; 192
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	6f 4f       	sbci	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	40 78       	andi	r20, 0x80	; 128
     5ec:	1a 8e       	std	Y+26, r1	; 0x1a
     5ee:	fe 17       	cp	r31, r30
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <__mulsf3+0x1d4>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8a 8f       	std	Y+26, r24	; 0x1a
     5f6:	4d 8f       	std	Y+29, r20	; 0x1d
     5f8:	5e 8f       	std	Y+30, r21	; 0x1e
     5fa:	6f 8f       	std	Y+31, r22	; 0x1f
     5fc:	78 a3       	std	Y+32, r23	; 0x20
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	89 8f       	std	Y+25, r24	; 0x19
     602:	ce 01       	movw	r24, r28
     604:	49 96       	adiw	r24, 0x19	; 25
     606:	87 d1       	rcall	.+782    	; 0x916 <__pack_f>
     608:	a0 96       	adiw	r28, 0x20	; 32
     60a:	e2 e1       	ldi	r30, 0x12	; 18
     60c:	0c 94 06 14 	jmp	0x280c	; 0x280c <__epilogue_restores__>

00000610 <__divsf3>:
     610:	a8 e1       	ldi	r26, 0x18	; 24
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	ee e0       	ldi	r30, 0x0E	; 14
     616:	f3 e0       	ldi	r31, 0x03	; 3
     618:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x10>
     61c:	69 83       	std	Y+1, r22	; 0x01
     61e:	7a 83       	std	Y+2, r23	; 0x02
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	9c 83       	std	Y+4, r25	; 0x04
     624:	2d 83       	std	Y+5, r18	; 0x05
     626:	3e 83       	std	Y+6, r19	; 0x06
     628:	4f 83       	std	Y+7, r20	; 0x07
     62a:	58 87       	std	Y+8, r21	; 0x08
     62c:	b9 e0       	ldi	r27, 0x09	; 9
     62e:	eb 2e       	mov	r14, r27
     630:	f1 2c       	mov	r15, r1
     632:	ec 0e       	add	r14, r28
     634:	fd 1e       	adc	r15, r29
     636:	ce 01       	movw	r24, r28
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	b7 01       	movw	r22, r14
     63c:	41 d2       	rcall	.+1154   	; 0xac0 <__unpack_f>
     63e:	8e 01       	movw	r16, r28
     640:	0f 5e       	subi	r16, 0xEF	; 239
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	ce 01       	movw	r24, r28
     646:	05 96       	adiw	r24, 0x05	; 5
     648:	b8 01       	movw	r22, r16
     64a:	3a d2       	rcall	.+1140   	; 0xac0 <__unpack_f>
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	22 30       	cpi	r18, 0x02	; 2
     650:	08 f4       	brcc	.+2      	; 0x654 <__divsf3+0x44>
     652:	7e c0       	rjmp	.+252    	; 0x750 <__divsf3+0x140>
     654:	39 89       	ldd	r19, Y+17	; 0x11
     656:	32 30       	cpi	r19, 0x02	; 2
     658:	10 f4       	brcc	.+4      	; 0x65e <__divsf3+0x4e>
     65a:	b8 01       	movw	r22, r16
     65c:	7c c0       	rjmp	.+248    	; 0x756 <__divsf3+0x146>
     65e:	8a 85       	ldd	r24, Y+10	; 0x0a
     660:	9a 89       	ldd	r25, Y+18	; 0x12
     662:	89 27       	eor	r24, r25
     664:	8a 87       	std	Y+10, r24	; 0x0a
     666:	24 30       	cpi	r18, 0x04	; 4
     668:	11 f0       	breq	.+4      	; 0x66e <__divsf3+0x5e>
     66a:	22 30       	cpi	r18, 0x02	; 2
     66c:	31 f4       	brne	.+12     	; 0x67a <__divsf3+0x6a>
     66e:	23 17       	cp	r18, r19
     670:	09 f0       	breq	.+2      	; 0x674 <__divsf3+0x64>
     672:	6e c0       	rjmp	.+220    	; 0x750 <__divsf3+0x140>
     674:	63 e6       	ldi	r22, 0x63	; 99
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	6e c0       	rjmp	.+220    	; 0x756 <__divsf3+0x146>
     67a:	34 30       	cpi	r19, 0x04	; 4
     67c:	39 f4       	brne	.+14     	; 0x68c <__divsf3+0x7c>
     67e:	1d 86       	std	Y+13, r1	; 0x0d
     680:	1e 86       	std	Y+14, r1	; 0x0e
     682:	1f 86       	std	Y+15, r1	; 0x0f
     684:	18 8a       	std	Y+16, r1	; 0x10
     686:	1c 86       	std	Y+12, r1	; 0x0c
     688:	1b 86       	std	Y+11, r1	; 0x0b
     68a:	04 c0       	rjmp	.+8      	; 0x694 <__divsf3+0x84>
     68c:	32 30       	cpi	r19, 0x02	; 2
     68e:	21 f4       	brne	.+8      	; 0x698 <__divsf3+0x88>
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	89 87       	std	Y+9, r24	; 0x09
     694:	b7 01       	movw	r22, r14
     696:	5f c0       	rjmp	.+190    	; 0x756 <__divsf3+0x146>
     698:	2b 85       	ldd	r18, Y+11	; 0x0b
     69a:	3c 85       	ldd	r19, Y+12	; 0x0c
     69c:	8b 89       	ldd	r24, Y+19	; 0x13
     69e:	9c 89       	ldd	r25, Y+20	; 0x14
     6a0:	28 1b       	sub	r18, r24
     6a2:	39 0b       	sbc	r19, r25
     6a4:	3c 87       	std	Y+12, r19	; 0x0c
     6a6:	2b 87       	std	Y+11, r18	; 0x0b
     6a8:	ed 84       	ldd	r14, Y+13	; 0x0d
     6aa:	fe 84       	ldd	r15, Y+14	; 0x0e
     6ac:	0f 85       	ldd	r16, Y+15	; 0x0f
     6ae:	18 89       	ldd	r17, Y+16	; 0x10
     6b0:	ad 88       	ldd	r10, Y+21	; 0x15
     6b2:	be 88       	ldd	r11, Y+22	; 0x16
     6b4:	cf 88       	ldd	r12, Y+23	; 0x17
     6b6:	d8 8c       	ldd	r13, Y+24	; 0x18
     6b8:	ea 14       	cp	r14, r10
     6ba:	fb 04       	cpc	r15, r11
     6bc:	0c 05       	cpc	r16, r12
     6be:	1d 05       	cpc	r17, r13
     6c0:	40 f4       	brcc	.+16     	; 0x6d2 <__divsf3+0xc2>
     6c2:	ee 0c       	add	r14, r14
     6c4:	ff 1c       	adc	r15, r15
     6c6:	00 1f       	adc	r16, r16
     6c8:	11 1f       	adc	r17, r17
     6ca:	21 50       	subi	r18, 0x01	; 1
     6cc:	30 40       	sbci	r19, 0x00	; 0
     6ce:	3c 87       	std	Y+12, r19	; 0x0c
     6d0:	2b 87       	std	Y+11, r18	; 0x0b
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	a0 e0       	ldi	r26, 0x00	; 0
     6e0:	b0 e4       	ldi	r27, 0x40	; 64
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	ea 14       	cp	r14, r10
     6e8:	fb 04       	cpc	r15, r11
     6ea:	0c 05       	cpc	r16, r12
     6ec:	1d 05       	cpc	r17, r13
     6ee:	40 f0       	brcs	.+16     	; 0x700 <__divsf3+0xf0>
     6f0:	28 2b       	or	r18, r24
     6f2:	39 2b       	or	r19, r25
     6f4:	4a 2b       	or	r20, r26
     6f6:	5b 2b       	or	r21, r27
     6f8:	ea 18       	sub	r14, r10
     6fa:	fb 08       	sbc	r15, r11
     6fc:	0c 09       	sbc	r16, r12
     6fe:	1d 09       	sbc	r17, r13
     700:	b6 95       	lsr	r27
     702:	a7 95       	ror	r26
     704:	97 95       	ror	r25
     706:	87 95       	ror	r24
     708:	ee 0c       	add	r14, r14
     70a:	ff 1c       	adc	r15, r15
     70c:	00 1f       	adc	r16, r16
     70e:	11 1f       	adc	r17, r17
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	6f 31       	cpi	r22, 0x1F	; 31
     716:	71 05       	cpc	r23, r1
     718:	31 f7       	brne	.-52     	; 0x6e6 <__divsf3+0xd6>
     71a:	da 01       	movw	r26, r20
     71c:	c9 01       	movw	r24, r18
     71e:	8f 77       	andi	r24, 0x7F	; 127
     720:	90 70       	andi	r25, 0x00	; 0
     722:	a0 70       	andi	r26, 0x00	; 0
     724:	b0 70       	andi	r27, 0x00	; 0
     726:	80 34       	cpi	r24, 0x40	; 64
     728:	91 05       	cpc	r25, r1
     72a:	a1 05       	cpc	r26, r1
     72c:	b1 05       	cpc	r27, r1
     72e:	61 f4       	brne	.+24     	; 0x748 <__divsf3+0x138>
     730:	27 fd       	sbrc	r18, 7
     732:	0a c0       	rjmp	.+20     	; 0x748 <__divsf3+0x138>
     734:	e1 14       	cp	r14, r1
     736:	f1 04       	cpc	r15, r1
     738:	01 05       	cpc	r16, r1
     73a:	11 05       	cpc	r17, r1
     73c:	29 f0       	breq	.+10     	; 0x748 <__divsf3+0x138>
     73e:	20 5c       	subi	r18, 0xC0	; 192
     740:	3f 4f       	sbci	r19, 0xFF	; 255
     742:	4f 4f       	sbci	r20, 0xFF	; 255
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	20 78       	andi	r18, 0x80	; 128
     748:	2d 87       	std	Y+13, r18	; 0x0d
     74a:	3e 87       	std	Y+14, r19	; 0x0e
     74c:	4f 87       	std	Y+15, r20	; 0x0f
     74e:	58 8b       	std	Y+16, r21	; 0x10
     750:	be 01       	movw	r22, r28
     752:	67 5f       	subi	r22, 0xF7	; 247
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	cb 01       	movw	r24, r22
     758:	de d0       	rcall	.+444    	; 0x916 <__pack_f>
     75a:	68 96       	adiw	r28, 0x18	; 24
     75c:	ea e0       	ldi	r30, 0x0A	; 10
     75e:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x10>

00000762 <__gtsf2>:
     762:	a8 e1       	ldi	r26, 0x18	; 24
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	e7 eb       	ldi	r30, 0xB7	; 183
     768:	f3 e0       	ldi	r31, 0x03	; 3
     76a:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__+0x18>
     76e:	69 83       	std	Y+1, r22	; 0x01
     770:	7a 83       	std	Y+2, r23	; 0x02
     772:	8b 83       	std	Y+3, r24	; 0x03
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	2d 83       	std	Y+5, r18	; 0x05
     778:	3e 83       	std	Y+6, r19	; 0x06
     77a:	4f 83       	std	Y+7, r20	; 0x07
     77c:	58 87       	std	Y+8, r21	; 0x08
     77e:	89 e0       	ldi	r24, 0x09	; 9
     780:	e8 2e       	mov	r14, r24
     782:	f1 2c       	mov	r15, r1
     784:	ec 0e       	add	r14, r28
     786:	fd 1e       	adc	r15, r29
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	b7 01       	movw	r22, r14
     78e:	98 d1       	rcall	.+816    	; 0xac0 <__unpack_f>
     790:	8e 01       	movw	r16, r28
     792:	0f 5e       	subi	r16, 0xEF	; 239
     794:	1f 4f       	sbci	r17, 0xFF	; 255
     796:	ce 01       	movw	r24, r28
     798:	05 96       	adiw	r24, 0x05	; 5
     79a:	b8 01       	movw	r22, r16
     79c:	91 d1       	rcall	.+802    	; 0xac0 <__unpack_f>
     79e:	89 85       	ldd	r24, Y+9	; 0x09
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	38 f0       	brcs	.+14     	; 0x7b2 <__gtsf2+0x50>
     7a4:	89 89       	ldd	r24, Y+17	; 0x11
     7a6:	82 30       	cpi	r24, 0x02	; 2
     7a8:	20 f0       	brcs	.+8      	; 0x7b2 <__gtsf2+0x50>
     7aa:	c7 01       	movw	r24, r14
     7ac:	b8 01       	movw	r22, r16
     7ae:	00 d2       	rcall	.+1024   	; 0xbb0 <__fpcmp_parts_f>
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <__gtsf2+0x52>
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	68 96       	adiw	r28, 0x18	; 24
     7b6:	e6 e0       	ldi	r30, 0x06	; 6
     7b8:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__+0x18>

000007bc <__gesf2>:
     7bc:	a8 e1       	ldi	r26, 0x18	; 24
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	e4 ee       	ldi	r30, 0xE4	; 228
     7c2:	f3 e0       	ldi	r31, 0x03	; 3
     7c4:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__+0x18>
     7c8:	69 83       	std	Y+1, r22	; 0x01
     7ca:	7a 83       	std	Y+2, r23	; 0x02
     7cc:	8b 83       	std	Y+3, r24	; 0x03
     7ce:	9c 83       	std	Y+4, r25	; 0x04
     7d0:	2d 83       	std	Y+5, r18	; 0x05
     7d2:	3e 83       	std	Y+6, r19	; 0x06
     7d4:	4f 83       	std	Y+7, r20	; 0x07
     7d6:	58 87       	std	Y+8, r21	; 0x08
     7d8:	89 e0       	ldi	r24, 0x09	; 9
     7da:	e8 2e       	mov	r14, r24
     7dc:	f1 2c       	mov	r15, r1
     7de:	ec 0e       	add	r14, r28
     7e0:	fd 1e       	adc	r15, r29
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	b7 01       	movw	r22, r14
     7e8:	6b d1       	rcall	.+726    	; 0xac0 <__unpack_f>
     7ea:	8e 01       	movw	r16, r28
     7ec:	0f 5e       	subi	r16, 0xEF	; 239
     7ee:	1f 4f       	sbci	r17, 0xFF	; 255
     7f0:	ce 01       	movw	r24, r28
     7f2:	05 96       	adiw	r24, 0x05	; 5
     7f4:	b8 01       	movw	r22, r16
     7f6:	64 d1       	rcall	.+712    	; 0xac0 <__unpack_f>
     7f8:	89 85       	ldd	r24, Y+9	; 0x09
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	38 f0       	brcs	.+14     	; 0x80c <__gesf2+0x50>
     7fe:	89 89       	ldd	r24, Y+17	; 0x11
     800:	82 30       	cpi	r24, 0x02	; 2
     802:	20 f0       	brcs	.+8      	; 0x80c <__gesf2+0x50>
     804:	c7 01       	movw	r24, r14
     806:	b8 01       	movw	r22, r16
     808:	d3 d1       	rcall	.+934    	; 0xbb0 <__fpcmp_parts_f>
     80a:	01 c0       	rjmp	.+2      	; 0x80e <__gesf2+0x52>
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	68 96       	adiw	r28, 0x18	; 24
     810:	e6 e0       	ldi	r30, 0x06	; 6
     812:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__+0x18>

00000816 <__ltsf2>:
     816:	a8 e1       	ldi	r26, 0x18	; 24
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e1 e1       	ldi	r30, 0x11	; 17
     81c:	f4 e0       	ldi	r31, 0x04	; 4
     81e:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__+0x18>
     822:	69 83       	std	Y+1, r22	; 0x01
     824:	7a 83       	std	Y+2, r23	; 0x02
     826:	8b 83       	std	Y+3, r24	; 0x03
     828:	9c 83       	std	Y+4, r25	; 0x04
     82a:	2d 83       	std	Y+5, r18	; 0x05
     82c:	3e 83       	std	Y+6, r19	; 0x06
     82e:	4f 83       	std	Y+7, r20	; 0x07
     830:	58 87       	std	Y+8, r21	; 0x08
     832:	89 e0       	ldi	r24, 0x09	; 9
     834:	e8 2e       	mov	r14, r24
     836:	f1 2c       	mov	r15, r1
     838:	ec 0e       	add	r14, r28
     83a:	fd 1e       	adc	r15, r29
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	b7 01       	movw	r22, r14
     842:	3e d1       	rcall	.+636    	; 0xac0 <__unpack_f>
     844:	8e 01       	movw	r16, r28
     846:	0f 5e       	subi	r16, 0xEF	; 239
     848:	1f 4f       	sbci	r17, 0xFF	; 255
     84a:	ce 01       	movw	r24, r28
     84c:	05 96       	adiw	r24, 0x05	; 5
     84e:	b8 01       	movw	r22, r16
     850:	37 d1       	rcall	.+622    	; 0xac0 <__unpack_f>
     852:	89 85       	ldd	r24, Y+9	; 0x09
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	38 f0       	brcs	.+14     	; 0x866 <__stack+0x7>
     858:	89 89       	ldd	r24, Y+17	; 0x11
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	20 f0       	brcs	.+8      	; 0x866 <__stack+0x7>
     85e:	c7 01       	movw	r24, r14
     860:	b8 01       	movw	r22, r16
     862:	a6 d1       	rcall	.+844    	; 0xbb0 <__fpcmp_parts_f>
     864:	01 c0       	rjmp	.+2      	; 0x868 <__stack+0x9>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	68 96       	adiw	r28, 0x18	; 24
     86a:	e6 e0       	ldi	r30, 0x06	; 6
     86c:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__+0x18>

00000870 <__fixsfsi>:
     870:	ac e0       	ldi	r26, 0x0C	; 12
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	ee e3       	ldi	r30, 0x3E	; 62
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__prologue_saves__+0x20>
     87c:	69 83       	std	Y+1, r22	; 0x01
     87e:	7a 83       	std	Y+2, r23	; 0x02
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	9c 83       	std	Y+4, r25	; 0x04
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	be 01       	movw	r22, r28
     88a:	6b 5f       	subi	r22, 0xFB	; 251
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	18 d1       	rcall	.+560    	; 0xac0 <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x7e>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x7e>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x36>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x88>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x92>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x7e>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4c>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x88>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x92>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x66>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x5e>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9a>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9a>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9a>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9a>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 16 14 	jmp	0x282c	; 0x282c <__epilogue_restores__+0x20>

00000916 <__pack_f>:
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	fc 01       	movw	r30, r24
     922:	e4 80       	ldd	r14, Z+4	; 0x04
     924:	f5 80       	ldd	r15, Z+5	; 0x05
     926:	06 81       	ldd	r16, Z+6	; 0x06
     928:	17 81       	ldd	r17, Z+7	; 0x07
     92a:	d1 80       	ldd	r13, Z+1	; 0x01
     92c:	80 81       	ld	r24, Z
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	48 f4       	brcc	.+18     	; 0x944 <__pack_f+0x2e>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e1       	ldi	r26, 0x10	; 16
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e8 2a       	or	r14, r24
     93c:	f9 2a       	or	r15, r25
     93e:	0a 2b       	or	r16, r26
     940:	1b 2b       	or	r17, r27
     942:	a5 c0       	rjmp	.+330    	; 0xa8e <__pack_f+0x178>
     944:	84 30       	cpi	r24, 0x04	; 4
     946:	09 f4       	brne	.+2      	; 0x94a <__pack_f+0x34>
     948:	9f c0       	rjmp	.+318    	; 0xa88 <__pack_f+0x172>
     94a:	82 30       	cpi	r24, 0x02	; 2
     94c:	21 f4       	brne	.+8      	; 0x956 <__pack_f+0x40>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	05 c0       	rjmp	.+10     	; 0x960 <__pack_f+0x4a>
     956:	e1 14       	cp	r14, r1
     958:	f1 04       	cpc	r15, r1
     95a:	01 05       	cpc	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	19 f4       	brne	.+6      	; 0x966 <__pack_f+0x50>
     960:	e0 e0       	ldi	r30, 0x00	; 0
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	96 c0       	rjmp	.+300    	; 0xa92 <__pack_f+0x17c>
     966:	62 81       	ldd	r22, Z+2	; 0x02
     968:	73 81       	ldd	r23, Z+3	; 0x03
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	62 38       	cpi	r22, 0x82	; 130
     96e:	79 07       	cpc	r23, r25
     970:	0c f0       	brlt	.+2      	; 0x974 <__pack_f+0x5e>
     972:	5b c0       	rjmp	.+182    	; 0xa2a <__pack_f+0x114>
     974:	22 e8       	ldi	r18, 0x82	; 130
     976:	3f ef       	ldi	r19, 0xFF	; 255
     978:	26 1b       	sub	r18, r22
     97a:	37 0b       	sbc	r19, r23
     97c:	2a 31       	cpi	r18, 0x1A	; 26
     97e:	31 05       	cpc	r19, r1
     980:	2c f0       	brlt	.+10     	; 0x98c <__pack_f+0x76>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	2a c0       	rjmp	.+84     	; 0x9e0 <__pack_f+0xca>
     98c:	b8 01       	movw	r22, r16
     98e:	a7 01       	movw	r20, r14
     990:	02 2e       	mov	r0, r18
     992:	04 c0       	rjmp	.+8      	; 0x99c <__pack_f+0x86>
     994:	76 95       	lsr	r23
     996:	67 95       	ror	r22
     998:	57 95       	ror	r21
     99a:	47 95       	ror	r20
     99c:	0a 94       	dec	r0
     99e:	d2 f7       	brpl	.-12     	; 0x994 <__pack_f+0x7e>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__pack_f+0x9c>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	aa 1f       	adc	r26, r26
     9b0:	bb 1f       	adc	r27, r27
     9b2:	2a 95       	dec	r18
     9b4:	d2 f7       	brpl	.-12     	; 0x9aa <__pack_f+0x94>
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	a1 09       	sbc	r26, r1
     9ba:	b1 09       	sbc	r27, r1
     9bc:	8e 21       	and	r24, r14
     9be:	9f 21       	and	r25, r15
     9c0:	a0 23       	and	r26, r16
     9c2:	b1 23       	and	r27, r17
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	a1 05       	cpc	r26, r1
     9c8:	b1 05       	cpc	r27, r1
     9ca:	21 f0       	breq	.+8      	; 0x9d4 <__pack_f+0xbe>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	9a 01       	movw	r18, r20
     9d6:	ab 01       	movw	r20, r22
     9d8:	28 2b       	or	r18, r24
     9da:	39 2b       	or	r19, r25
     9dc:	4a 2b       	or	r20, r26
     9de:	5b 2b       	or	r21, r27
     9e0:	da 01       	movw	r26, r20
     9e2:	c9 01       	movw	r24, r18
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	90 70       	andi	r25, 0x00	; 0
     9e8:	a0 70       	andi	r26, 0x00	; 0
     9ea:	b0 70       	andi	r27, 0x00	; 0
     9ec:	80 34       	cpi	r24, 0x40	; 64
     9ee:	91 05       	cpc	r25, r1
     9f0:	a1 05       	cpc	r26, r1
     9f2:	b1 05       	cpc	r27, r1
     9f4:	39 f4       	brne	.+14     	; 0xa04 <__pack_f+0xee>
     9f6:	27 ff       	sbrs	r18, 7
     9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__pack_f+0xf6>
     9fa:	20 5c       	subi	r18, 0xC0	; 192
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	4f 4f       	sbci	r20, 0xFF	; 255
     a00:	5f 4f       	sbci	r21, 0xFF	; 255
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__pack_f+0xf6>
     a04:	21 5c       	subi	r18, 0xC1	; 193
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	4f 4f       	sbci	r20, 0xFF	; 255
     a0a:	5f 4f       	sbci	r21, 0xFF	; 255
     a0c:	e0 e0       	ldi	r30, 0x00	; 0
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	20 30       	cpi	r18, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	3a 07       	cpc	r19, r26
     a16:	a0 e0       	ldi	r26, 0x00	; 0
     a18:	4a 07       	cpc	r20, r26
     a1a:	a0 e4       	ldi	r26, 0x40	; 64
     a1c:	5a 07       	cpc	r21, r26
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <__pack_f+0x10e>
     a20:	e1 e0       	ldi	r30, 0x01	; 1
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	79 01       	movw	r14, r18
     a26:	8a 01       	movw	r16, r20
     a28:	27 c0       	rjmp	.+78     	; 0xa78 <__pack_f+0x162>
     a2a:	60 38       	cpi	r22, 0x80	; 128
     a2c:	71 05       	cpc	r23, r1
     a2e:	64 f5       	brge	.+88     	; 0xa88 <__pack_f+0x172>
     a30:	fb 01       	movw	r30, r22
     a32:	e1 58       	subi	r30, 0x81	; 129
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	d8 01       	movw	r26, r16
     a38:	c7 01       	movw	r24, r14
     a3a:	8f 77       	andi	r24, 0x7F	; 127
     a3c:	90 70       	andi	r25, 0x00	; 0
     a3e:	a0 70       	andi	r26, 0x00	; 0
     a40:	b0 70       	andi	r27, 0x00	; 0
     a42:	80 34       	cpi	r24, 0x40	; 64
     a44:	91 05       	cpc	r25, r1
     a46:	a1 05       	cpc	r26, r1
     a48:	b1 05       	cpc	r27, r1
     a4a:	39 f4       	brne	.+14     	; 0xa5a <__pack_f+0x144>
     a4c:	e7 fe       	sbrs	r14, 7
     a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__pack_f+0x154>
     a50:	80 e4       	ldi	r24, 0x40	; 64
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__pack_f+0x14c>
     a5a:	8f e3       	ldi	r24, 0x3F	; 63
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e8 0e       	add	r14, r24
     a64:	f9 1e       	adc	r15, r25
     a66:	0a 1f       	adc	r16, r26
     a68:	1b 1f       	adc	r17, r27
     a6a:	17 ff       	sbrs	r17, 7
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__pack_f+0x162>
     a6e:	16 95       	lsr	r17
     a70:	07 95       	ror	r16
     a72:	f7 94       	ror	r15
     a74:	e7 94       	ror	r14
     a76:	31 96       	adiw	r30, 0x01	; 1
     a78:	87 e0       	ldi	r24, 0x07	; 7
     a7a:	16 95       	lsr	r17
     a7c:	07 95       	ror	r16
     a7e:	f7 94       	ror	r15
     a80:	e7 94       	ror	r14
     a82:	8a 95       	dec	r24
     a84:	d1 f7       	brne	.-12     	; 0xa7a <__pack_f+0x164>
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <__pack_f+0x17c>
     a88:	ee 24       	eor	r14, r14
     a8a:	ff 24       	eor	r15, r15
     a8c:	87 01       	movw	r16, r14
     a8e:	ef ef       	ldi	r30, 0xFF	; 255
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	6e 2f       	mov	r22, r30
     a94:	67 95       	ror	r22
     a96:	66 27       	eor	r22, r22
     a98:	67 95       	ror	r22
     a9a:	90 2f       	mov	r25, r16
     a9c:	9f 77       	andi	r25, 0x7F	; 127
     a9e:	d7 94       	ror	r13
     aa0:	dd 24       	eor	r13, r13
     aa2:	d7 94       	ror	r13
     aa4:	8e 2f       	mov	r24, r30
     aa6:	86 95       	lsr	r24
     aa8:	49 2f       	mov	r20, r25
     aaa:	46 2b       	or	r20, r22
     aac:	58 2f       	mov	r21, r24
     aae:	5d 29       	or	r21, r13
     ab0:	b7 01       	movw	r22, r14
     ab2:	ca 01       	movw	r24, r20
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	08 95       	ret

00000ac0 <__unpack_f>:
     ac0:	fc 01       	movw	r30, r24
     ac2:	db 01       	movw	r26, r22
     ac4:	40 81       	ld	r20, Z
     ac6:	51 81       	ldd	r21, Z+1	; 0x01
     ac8:	22 81       	ldd	r18, Z+2	; 0x02
     aca:	62 2f       	mov	r22, r18
     acc:	6f 77       	andi	r22, 0x7F	; 127
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	22 1f       	adc	r18, r18
     ad2:	22 27       	eor	r18, r18
     ad4:	22 1f       	adc	r18, r18
     ad6:	93 81       	ldd	r25, Z+3	; 0x03
     ad8:	89 2f       	mov	r24, r25
     ada:	88 0f       	add	r24, r24
     adc:	82 2b       	or	r24, r18
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	99 1f       	adc	r25, r25
     ae4:	99 27       	eor	r25, r25
     ae6:	99 1f       	adc	r25, r25
     ae8:	11 96       	adiw	r26, 0x01	; 1
     aea:	9c 93       	st	X, r25
     aec:	11 97       	sbiw	r26, 0x01	; 1
     aee:	21 15       	cp	r18, r1
     af0:	31 05       	cpc	r19, r1
     af2:	a9 f5       	brne	.+106    	; 0xb5e <__unpack_f+0x9e>
     af4:	41 15       	cp	r20, r1
     af6:	51 05       	cpc	r21, r1
     af8:	61 05       	cpc	r22, r1
     afa:	71 05       	cpc	r23, r1
     afc:	11 f4       	brne	.+4      	; 0xb02 <__unpack_f+0x42>
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	37 c0       	rjmp	.+110    	; 0xb70 <__unpack_f+0xb0>
     b02:	82 e8       	ldi	r24, 0x82	; 130
     b04:	9f ef       	ldi	r25, 0xFF	; 255
     b06:	13 96       	adiw	r26, 0x03	; 3
     b08:	9c 93       	st	X, r25
     b0a:	8e 93       	st	-X, r24
     b0c:	12 97       	sbiw	r26, 0x02	; 2
     b0e:	9a 01       	movw	r18, r20
     b10:	ab 01       	movw	r20, r22
     b12:	67 e0       	ldi	r22, 0x07	; 7
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	44 1f       	adc	r20, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	6a 95       	dec	r22
     b1e:	d1 f7       	brne	.-12     	; 0xb14 <__unpack_f+0x54>
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	8c 93       	st	X, r24
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__unpack_f+0x80>
     b26:	22 0f       	add	r18, r18
     b28:	33 1f       	adc	r19, r19
     b2a:	44 1f       	adc	r20, r20
     b2c:	55 1f       	adc	r21, r21
     b2e:	12 96       	adiw	r26, 0x02	; 2
     b30:	8d 91       	ld	r24, X+
     b32:	9c 91       	ld	r25, X
     b34:	13 97       	sbiw	r26, 0x03	; 3
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	13 96       	adiw	r26, 0x03	; 3
     b3a:	9c 93       	st	X, r25
     b3c:	8e 93       	st	-X, r24
     b3e:	12 97       	sbiw	r26, 0x02	; 2
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	38 07       	cpc	r19, r24
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	48 07       	cpc	r20, r24
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	58 07       	cpc	r21, r24
     b4e:	58 f3       	brcs	.-42     	; 0xb26 <__unpack_f+0x66>
     b50:	14 96       	adiw	r26, 0x04	; 4
     b52:	2d 93       	st	X+, r18
     b54:	3d 93       	st	X+, r19
     b56:	4d 93       	st	X+, r20
     b58:	5c 93       	st	X, r21
     b5a:	17 97       	sbiw	r26, 0x07	; 7
     b5c:	08 95       	ret
     b5e:	2f 3f       	cpi	r18, 0xFF	; 255
     b60:	31 05       	cpc	r19, r1
     b62:	79 f4       	brne	.+30     	; 0xb82 <__unpack_f+0xc2>
     b64:	41 15       	cp	r20, r1
     b66:	51 05       	cpc	r21, r1
     b68:	61 05       	cpc	r22, r1
     b6a:	71 05       	cpc	r23, r1
     b6c:	19 f4       	brne	.+6      	; 0xb74 <__unpack_f+0xb4>
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	8c 93       	st	X, r24
     b72:	08 95       	ret
     b74:	64 ff       	sbrs	r22, 4
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <__unpack_f+0xbe>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	8c 93       	st	X, r24
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__unpack_f+0xe2>
     b7e:	1c 92       	st	X, r1
     b80:	10 c0       	rjmp	.+32     	; 0xba2 <__unpack_f+0xe2>
     b82:	2f 57       	subi	r18, 0x7F	; 127
     b84:	30 40       	sbci	r19, 0x00	; 0
     b86:	13 96       	adiw	r26, 0x03	; 3
     b88:	3c 93       	st	X, r19
     b8a:	2e 93       	st	-X, r18
     b8c:	12 97       	sbiw	r26, 0x02	; 2
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	8c 93       	st	X, r24
     b92:	87 e0       	ldi	r24, 0x07	; 7
     b94:	44 0f       	add	r20, r20
     b96:	55 1f       	adc	r21, r21
     b98:	66 1f       	adc	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	8a 95       	dec	r24
     b9e:	d1 f7       	brne	.-12     	; 0xb94 <__unpack_f+0xd4>
     ba0:	70 64       	ori	r23, 0x40	; 64
     ba2:	14 96       	adiw	r26, 0x04	; 4
     ba4:	4d 93       	st	X+, r20
     ba6:	5d 93       	st	X+, r21
     ba8:	6d 93       	st	X+, r22
     baa:	7c 93       	st	X, r23
     bac:	17 97       	sbiw	r26, 0x07	; 7
     bae:	08 95       	ret

00000bb0 <__fpcmp_parts_f>:
     bb0:	1f 93       	push	r17
     bb2:	dc 01       	movw	r26, r24
     bb4:	fb 01       	movw	r30, r22
     bb6:	9c 91       	ld	r25, X
     bb8:	92 30       	cpi	r25, 0x02	; 2
     bba:	08 f4       	brcc	.+2      	; 0xbbe <__fpcmp_parts_f+0xe>
     bbc:	47 c0       	rjmp	.+142    	; 0xc4c <__fpcmp_parts_f+0x9c>
     bbe:	80 81       	ld	r24, Z
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <__fpcmp_parts_f+0x16>
     bc4:	43 c0       	rjmp	.+134    	; 0xc4c <__fpcmp_parts_f+0x9c>
     bc6:	94 30       	cpi	r25, 0x04	; 4
     bc8:	51 f4       	brne	.+20     	; 0xbde <__fpcmp_parts_f+0x2e>
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	1c 91       	ld	r17, X
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	99 f5       	brne	.+102    	; 0xc38 <__fpcmp_parts_f+0x88>
     bd2:	81 81       	ldd	r24, Z+1	; 0x01
     bd4:	68 2f       	mov	r22, r24
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	61 1b       	sub	r22, r17
     bda:	71 09       	sbc	r23, r1
     bdc:	3f c0       	rjmp	.+126    	; 0xc5c <__fpcmp_parts_f+0xac>
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	21 f0       	breq	.+8      	; 0xbea <__fpcmp_parts_f+0x3a>
     be2:	92 30       	cpi	r25, 0x02	; 2
     be4:	31 f4       	brne	.+12     	; 0xbf2 <__fpcmp_parts_f+0x42>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	b9 f1       	breq	.+110    	; 0xc58 <__fpcmp_parts_f+0xa8>
     bea:	81 81       	ldd	r24, Z+1	; 0x01
     bec:	88 23       	and	r24, r24
     bee:	89 f1       	breq	.+98     	; 0xc52 <__fpcmp_parts_f+0xa2>
     bf0:	2d c0       	rjmp	.+90     	; 0xc4c <__fpcmp_parts_f+0x9c>
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	1c 91       	ld	r17, X
     bf6:	11 97       	sbiw	r26, 0x01	; 1
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	f1 f0       	breq	.+60     	; 0xc38 <__fpcmp_parts_f+0x88>
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	18 17       	cp	r17, r24
     c00:	d9 f4       	brne	.+54     	; 0xc38 <__fpcmp_parts_f+0x88>
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	2d 91       	ld	r18, X+
     c06:	3c 91       	ld	r19, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	82 17       	cp	r24, r18
     c10:	93 07       	cpc	r25, r19
     c12:	94 f0       	brlt	.+36     	; 0xc38 <__fpcmp_parts_f+0x88>
     c14:	28 17       	cp	r18, r24
     c16:	39 07       	cpc	r19, r25
     c18:	bc f0       	brlt	.+46     	; 0xc48 <__fpcmp_parts_f+0x98>
     c1a:	14 96       	adiw	r26, 0x04	; 4
     c1c:	8d 91       	ld	r24, X+
     c1e:	9d 91       	ld	r25, X+
     c20:	0d 90       	ld	r0, X+
     c22:	bc 91       	ld	r27, X
     c24:	a0 2d       	mov	r26, r0
     c26:	24 81       	ldd	r18, Z+4	; 0x04
     c28:	35 81       	ldd	r19, Z+5	; 0x05
     c2a:	46 81       	ldd	r20, Z+6	; 0x06
     c2c:	57 81       	ldd	r21, Z+7	; 0x07
     c2e:	28 17       	cp	r18, r24
     c30:	39 07       	cpc	r19, r25
     c32:	4a 07       	cpc	r20, r26
     c34:	5b 07       	cpc	r21, r27
     c36:	18 f4       	brcc	.+6      	; 0xc3e <__fpcmp_parts_f+0x8e>
     c38:	11 23       	and	r17, r17
     c3a:	41 f0       	breq	.+16     	; 0xc4c <__fpcmp_parts_f+0x9c>
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <__fpcmp_parts_f+0xa2>
     c3e:	82 17       	cp	r24, r18
     c40:	93 07       	cpc	r25, r19
     c42:	a4 07       	cpc	r26, r20
     c44:	b5 07       	cpc	r27, r21
     c46:	40 f4       	brcc	.+16     	; 0xc58 <__fpcmp_parts_f+0xa8>
     c48:	11 23       	and	r17, r17
     c4a:	19 f0       	breq	.+6      	; 0xc52 <__fpcmp_parts_f+0xa2>
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <__fpcmp_parts_f+0xac>
     c52:	6f ef       	ldi	r22, 0xFF	; 255
     c54:	7f ef       	ldi	r23, 0xFF	; 255
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <__fpcmp_parts_f+0xac>
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	cb 01       	movw	r24, r22
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <DIO_init_port_output>:
 *      Author: mh-sh
 */

#include "hal_DIO.h"

void DIO_init_port_output(enum_port_base_t port_base, u8 port_mask) {
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <DIO_init_port_output+0x6>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 1) |= port_mask;
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	dc 01       	movw	r26, r24
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	fc 01       	movw	r30, r24
     c84:	90 81       	ld	r25, Z
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	89 2b       	or	r24, r25
     c8a:	8c 93       	st	X, r24
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <DIO_init_port_input>:
void DIO_init_port_input(enum_port_base_t port_base, u8 port_mask) {
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <DIO_init_port_input+0x6>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 1) &= ~port_mask;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	dc 01       	movw	r26, r24
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	fc 01       	movw	r30, r24
     cb8:	80 81       	ld	r24, Z
     cba:	98 2f       	mov	r25, r24
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	80 95       	com	r24
     cc0:	89 23       	and	r24, r25
     cc2:	8c 93       	st	X, r24
}
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <DIO_write_port>:

void DIO_write_port(enum_port_base_t port_base, u8 port_mask, u8 data) {
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <DIO_write_port+0x6>
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	6a 83       	std	Y+2, r22	; 0x02
     cde:	4b 83       	std	Y+3, r20	; 0x03
	*(volatile u8*) (port_base + 2) &= ~(port_mask);
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	88 2f       	mov	r24, r24
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 96       	adiw	r24, 0x02	; 2
     ce8:	dc 01       	movw	r26, r24
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 96       	adiw	r24, 0x02	; 2
     cf2:	fc 01       	movw	r30, r24
     cf4:	80 81       	ld	r24, Z
     cf6:	98 2f       	mov	r25, r24
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	80 95       	com	r24
     cfc:	89 23       	and	r24, r25
     cfe:	8c 93       	st	X, r24
	*(volatile u8*) (port_base + 2) |= data & (port_mask);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 96       	adiw	r24, 0x02	; 2
     d08:	dc 01       	movw	r26, r24
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 96       	adiw	r24, 0x02	; 2
     d12:	fc 01       	movw	r30, r24
     d14:	20 81       	ld	r18, Z
     d16:	9b 81       	ldd	r25, Y+3	; 0x03
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	89 23       	and	r24, r25
     d1c:	82 2b       	or	r24, r18
     d1e:	8c 93       	st	X, r24
}
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <DIO_set_port>:
void DIO_write_pin(enum_port_base_t port_base, u8 pin_no, bool_t data) {
	*(volatile u8*) (port_base + 2) &= ~(1 << pin_no);
	*(volatile u8*) (port_base + 2) |= data << pin_no;
}

void DIO_set_port(enum_port_base_t port_base, u8 port_mask) {
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	00 d0       	rcall	.+0      	; 0xd32 <DIO_set_port+0x6>
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 2) |= port_mask;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 96       	adiw	r24, 0x02	; 2
     d42:	dc 01       	movw	r26, r24
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 96       	adiw	r24, 0x02	; 2
     d4c:	fc 01       	movw	r30, r24
     d4e:	90 81       	ld	r25, Z
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	89 2b       	or	r24, r25
     d54:	8c 93       	st	X, r24
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <DIO_clear_port>:
void DIO_clear_port(enum_port_base_t port_base, u8 port_mask) {
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <DIO_clear_port+0x6>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 2) &= ~port_mask;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 96       	adiw	r24, 0x02	; 2
     d76:	dc 01       	movw	r26, r24
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 96       	adiw	r24, 0x02	; 2
     d80:	fc 01       	movw	r30, r24
     d82:	80 81       	ld	r24, Z
     d84:	98 2f       	mov	r25, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	80 95       	com	r24
     d8a:	89 23       	and	r24, r25
     d8c:	8c 93       	st	X, r24
}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <DIO_set_pin>:
void DIO_set_pin(enum_port_base_t port_base, u8 pin_no) {
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <DIO_set_pin+0x6>
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 2) |= 1 << pin_no;
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 96       	adiw	r24, 0x02	; 2
     dae:	dc 01       	movw	r26, r24
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 96       	adiw	r24, 0x02	; 2
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_set_pin+0x38>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_set_pin+0x34>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <DIO_clear_pin>:
void DIO_clear_pin(enum_port_base_t port_base, u8 pin_no) {
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <DIO_clear_pin+0x6>
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 2) &= ~(1 << pin_no);
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 96       	adiw	r24, 0x02	; 2
     df8:	dc 01       	movw	r26, r24
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 96       	adiw	r24, 0x02	; 2
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_clear_pin+0x38>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_clear_pin+0x34>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
}
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <DIO_read_port>:

u8 DIO_read_port(enum_port_base_t port_base, u8 port_mask) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_read_port+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	6a 83       	std	Y+2, r22	; 0x02
	return ((*(volatile u8*) (port_base)) & (port_mask));
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	fc 01       	movw	r30, r24
     e44:	90 81       	ld	r25, Z
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	89 23       	and	r24, r25
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <DIO_read_pin>:
u8 DIO_read_pin(enum_port_base_t port_base, u8 pin_no) {
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <DIO_read_pin+0x6>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	6a 83       	std	Y+2, r22	; 0x02
	return ((*(volatile u8*) (port_base)) & (1 << pin_no));
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	fc 01       	movw	r30, r24
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_read_pin+0x2c>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_read_pin+0x28>
     e84:	84 23       	and	r24, r20
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <__vector_10>:
#include "hal_timer.h"
void (*t0_isr)(), (*t1_isr)(), (*t2_isr)();

void TIMER0_COMP_vect() {
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	if (t0_isr)
     e98:	80 91 75 00 	lds	r24, 0x0075
     e9c:	90 91 76 00 	lds	r25, 0x0076
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	29 f0       	breq	.+10     	; 0xeae <__vector_10+0x1e>
		t0_isr();
     ea4:	e0 91 75 00 	lds	r30, 0x0075
     ea8:	f0 91 76 00 	lds	r31, 0x0076
     eac:	09 95       	icall
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <__vector_4>:
void TIMER2_COMP_vect() {
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	if (t2_isr)
     ebc:	80 91 77 00 	lds	r24, 0x0077
     ec0:	90 91 78 00 	lds	r25, 0x0078
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	29 f0       	breq	.+10     	; 0xed2 <__vector_4+0x1e>
		t2_isr();
     ec8:	e0 91 77 00 	lds	r30, 0x0077
     ecc:	f0 91 78 00 	lds	r31, 0x0078
     ed0:	09 95       	icall
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <main>:
	seven_seg_display(minID1, currMin % 10);
	seven_seg_display(minID10, currMin++ / 10);

}

int main(void) {
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	63 97       	sbiw	r28, 0x13	; 19
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
//	seven_seg_init(BASE_B, COMMON_CATHOD, &minID10);
//
//	TMU_addTimer(&obj1, 500, PERIODIC, function1);
//	TMU_addTimer(&obj2, 5000, PERIODIC, function2);
//	TMU_addTimer(&obj3, 10000, PERIODIC, function3);
	u8 key = 0;
     eec:	19 82       	std	Y+1, r1	; 0x01
	char str[2];
	gcfg_keypad_t keypad = { BASE_C, BASE_C, 0, 1, 2 };
     eee:	ce 01       	movw	r24, r28
     ef0:	04 96       	adiw	r24, 0x04	; 4
     ef2:	98 8b       	std	Y+16, r25	; 0x10
     ef4:	8f 87       	std	Y+15, r24	; 0x0f
     ef6:	eb e6       	ldi	r30, 0x6B	; 107
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	fa 8b       	std	Y+18, r31	; 0x12
     efc:	e9 8b       	std	Y+17, r30	; 0x11
     efe:	f5 e0       	ldi	r31, 0x05	; 5
     f00:	fb 8b       	std	Y+19, r31	; 0x13
     f02:	e9 89       	ldd	r30, Y+17	; 0x11
     f04:	fa 89       	ldd	r31, Y+18	; 0x12
     f06:	00 80       	ld	r0, Z
     f08:	89 89       	ldd	r24, Y+17	; 0x11
     f0a:	9a 89       	ldd	r25, Y+18	; 0x12
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	9a 8b       	std	Y+18, r25	; 0x12
     f10:	89 8b       	std	Y+17, r24	; 0x11
     f12:	ef 85       	ldd	r30, Y+15	; 0x0f
     f14:	f8 89       	ldd	r31, Y+16	; 0x10
     f16:	00 82       	st	Z, r0
     f18:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1a:	98 89       	ldd	r25, Y+16	; 0x10
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	98 8b       	std	Y+16, r25	; 0x10
     f20:	8f 87       	std	Y+15, r24	; 0x0f
     f22:	9b 89       	ldd	r25, Y+19	; 0x13
     f24:	91 50       	subi	r25, 0x01	; 1
     f26:	9b 8b       	std	Y+19, r25	; 0x13
     f28:	eb 89       	ldd	r30, Y+19	; 0x13
     f2a:	ee 23       	and	r30, r30
     f2c:	51 f7       	brne	.-44     	; 0xf02 <main+0x2a>
	keypad_init(&keypad);
     f2e:	ce 01       	movw	r24, r28
     f30:	04 96       	adiw	r24, 0x04	; 4
     f32:	45 d0       	rcall	.+138    	; 0xfbe <keypad_init>
     f34:	87 e0       	ldi	r24, 0x07	; 7
	gcfg_lcd_t lcd;
	lcd.RS = 7;
     f36:	8c 87       	std	Y+12, r24	; 0x0c
     f38:	86 e0       	ldi	r24, 0x06	; 6
	lcd.RW = 6;
     f3a:	8d 87       	std	Y+13, r24	; 0x0d
     f3c:	85 e0       	ldi	r24, 0x05	; 5
	lcd.EN = 5;
     f3e:	8e 87       	std	Y+14, r24	; 0x0e
     f40:	89 e3       	ldi	r24, 0x39	; 57
	lcd.controlPort = BASE_A;
     f42:	8a 87       	std	Y+10, r24	; 0x0a
     f44:	86 e3       	ldi	r24, 0x36	; 54
	lcd.dataPort = BASE_B;
     f46:	8b 87       	std	Y+11, r24	; 0x0b
     f48:	81 e0       	ldi	r24, 0x01	; 1
	lcd.nbit = n4BIT_MODE;
     f4a:	89 87       	std	Y+9, r24	; 0x09
     f4c:	ce 01       	movw	r24, r28
	lcd_init(&lcd);
     f4e:	09 96       	adiw	r24, 0x09	; 9
     f50:	52 d1       	rcall	.+676    	; 0x11f6 <lcd_init>
     f52:	ce 01       	movw	r24, r28
     f54:	09 96       	adiw	r24, 0x09	; 9
	lcd_gotoxy(&lcd, 1, 1);
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	0e 94 98 13 	call	0x2730	; 0x2730 <lcd_gotoxy>
     f5e:	ce 01       	movw	r24, r28
     f60:	04 96       	adiw	r24, 0x04	; 4
//	lcd_print(&lcd, "xxxx xxxx");
//	lcd_gotoxy(&lcd, 1, 2);
//	lcd_print(&lcd, "yyyy yyyy");
	while (1) {
		keypad_dispatch(&keypad);
     f62:	1f d1       	rcall	.+574    	; 0x11a2 <keypad_dispatch>
     f64:	ce 01       	movw	r24, r28
     f66:	04 96       	adiw	r24, 0x04	; 4
     f68:	32 d1       	rcall	.+612    	; 0x11ce <keypad_get_key>
		if ((key = keypad_get_key(&keypad)) != 0) {
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	88 23       	and	r24, r24
     f70:	b1 f3       	breq	.-20     	; 0xf5e <main+0x86>
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	00 d0       	rcall	.+0      	; 0xf7a <main+0xa2>
			sprintf(str, "%d", key);
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <main+0xa4>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <main+0xa6>
     f7e:	ed b7       	in	r30, 0x3d	; 61
     f80:	fe b7       	in	r31, 0x3e	; 62
     f82:	31 96       	adiw	r30, 0x01	; 1
     f84:	ce 01       	movw	r24, r28
     f86:	02 96       	adiw	r24, 0x02	; 2
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
     f8c:	80 e6       	ldi	r24, 0x60	; 96
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	93 83       	std	Z+3, r25	; 0x03
     f92:	82 83       	std	Z+2, r24	; 0x02
     f94:	35 83       	std	Z+5, r19	; 0x05
     f96:	24 83       	std	Z+4, r18	; 0x04
     f98:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
     f9c:	8d b7       	in	r24, 0x3d	; 61
     f9e:	9e b7       	in	r25, 0x3e	; 62
     fa0:	06 96       	adiw	r24, 0x06	; 6
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	9e bf       	out	0x3e, r25	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	8d bf       	out	0x3d, r24	; 61
     fac:	ce 01       	movw	r24, r28
     fae:	09 96       	adiw	r24, 0x09	; 9
     fb0:	9e 01       	movw	r18, r28
     fb2:	2e 5f       	subi	r18, 0xFE	; 254
			lcd_print(&lcd, str);
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	b9 01       	movw	r22, r18
     fb8:	0e 94 ba 13 	call	0x2774	; 0x2774 <lcd_print>
     fbc:	d0 cf       	rjmp	.-96     	; 0xf5e <main+0x86>

00000fbe <keypad_init>:
 *  Created on: Aug 1, 2018
 *      Author: mh-sh
 */
#include "keypad.h"
static u8 last_click;
void keypad_init(gcfg_keypad_t * keypad) {
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <keypad_init+0x6>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
	DIO_init_port_output(keypad->n3Port,
     fcc:	e9 81       	ldd	r30, Y+1	; 0x01
     fce:	fa 81       	ldd	r31, Y+2	; 0x02
     fd0:	50 81       	ld	r21, Z
     fd2:	e9 81       	ldd	r30, Y+1	; 0x01
     fd4:	fa 81       	ldd	r31, Y+2	; 0x02
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <keypad_init+0x28>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	2a 95       	dec	r18
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <keypad_init+0x24>
     fea:	48 2f       	mov	r20, r24
     fec:	e9 81       	ldd	r30, Y+1	; 0x01
     fee:	fa 81       	ldd	r31, Y+2	; 0x02
     ff0:	83 81       	ldd	r24, Z+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <keypad_init+0x42>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	2a 95       	dec	r18
    1002:	e2 f7       	brpl	.-8      	; 0xffc <keypad_init+0x3e>
    1004:	48 2b       	or	r20, r24
    1006:	e9 81       	ldd	r30, Y+1	; 0x01
    1008:	fa 81       	ldd	r31, Y+2	; 0x02
    100a:	84 81       	ldd	r24, Z+4	; 0x04
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <keypad_init+0x5c>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	2a 95       	dec	r18
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <keypad_init+0x58>
    101e:	84 2b       	or	r24, r20
    1020:	98 2f       	mov	r25, r24
    1022:	85 2f       	mov	r24, r21
    1024:	69 2f       	mov	r22, r25
    1026:	1d de       	rcall	.-966    	; 0xc62 <DIO_init_port_output>
    1028:	e9 81       	ldd	r30, Y+1	; 0x01
			(1 << keypad->b0) | (1 << keypad->b1) | (1 << keypad->b2));
	DIO_set_port(keypad->n3Port,
    102a:	fa 81       	ldd	r31, Y+2	; 0x02
    102c:	50 81       	ld	r21, Z
    102e:	e9 81       	ldd	r30, Y+1	; 0x01
    1030:	fa 81       	ldd	r31, Y+2	; 0x02
    1032:	82 81       	ldd	r24, Z+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <keypad_init+0x84>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	2a 95       	dec	r18
    1044:	e2 f7       	brpl	.-8      	; 0x103e <keypad_init+0x80>
    1046:	48 2f       	mov	r20, r24
    1048:	e9 81       	ldd	r30, Y+1	; 0x01
    104a:	fa 81       	ldd	r31, Y+2	; 0x02
    104c:	83 81       	ldd	r24, Z+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <keypad_init+0x9e>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	2a 95       	dec	r18
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <keypad_init+0x9a>
    1060:	48 2b       	or	r20, r24
    1062:	e9 81       	ldd	r30, Y+1	; 0x01
    1064:	fa 81       	ldd	r31, Y+2	; 0x02
    1066:	84 81       	ldd	r24, Z+4	; 0x04
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <keypad_init+0xb8>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	2a 95       	dec	r18
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <keypad_init+0xb4>
    107a:	84 2b       	or	r24, r20
    107c:	98 2f       	mov	r25, r24
    107e:	85 2f       	mov	r24, r21
    1080:	69 2f       	mov	r22, r25
    1082:	54 de       	rcall	.-856    	; 0xd2c <DIO_set_port>
    1084:	e9 81       	ldd	r30, Y+1	; 0x01
    1086:	fa 81       	ldd	r31, Y+2	; 0x02
			(1 << keypad->b0) | (1 << keypad->b1) | (1 << keypad->b2));
	DIO_init_port_input(keypad->n4Port, 0xF);
    1088:	81 81       	ldd	r24, Z+1	; 0x01
    108a:	6f e0       	ldi	r22, 0x0F	; 15
    108c:	04 de       	rcall	.-1016   	; 0xc96 <DIO_init_port_input>
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
}
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <read_input>:
static void read_input(gcfg_keypad_t * keypad) {
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <read_input+0x6>
    109e:	0f 92       	push	r0
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	9b 83       	std	Y+3, r25	; 0x03
    10a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 temp;
	DIO_clear_port(keypad->n4Port, 0xF);
    10a8:	ea 81       	ldd	r30, Y+2	; 0x02
    10aa:	fb 81       	ldd	r31, Y+3	; 0x03
    10ac:	81 81       	ldd	r24, Z+1	; 0x01
    10ae:	6f e0       	ldi	r22, 0x0F	; 15
    10b0:	57 de       	rcall	.-850    	; 0xd60 <DIO_clear_port>
    10b2:	ea 81       	ldd	r30, Y+2	; 0x02
	DIO_set_pin(keypad->n3Port, keypad->b0);
    10b4:	fb 81       	ldd	r31, Y+3	; 0x03
    10b6:	80 81       	ld	r24, Z
    10b8:	ea 81       	ldd	r30, Y+2	; 0x02
    10ba:	fb 81       	ldd	r31, Y+3	; 0x03
    10bc:	92 81       	ldd	r25, Z+2	; 0x02
    10be:	69 2f       	mov	r22, r25
    10c0:	6b de       	rcall	.-810    	; 0xd98 <DIO_set_pin>
    10c2:	ea 81       	ldd	r30, Y+2	; 0x02
    10c4:	fb 81       	ldd	r31, Y+3	; 0x03
	if (DIO_read_port(keypad->n4Port, 0xF))
    10c6:	81 81       	ldd	r24, Z+1	; 0x01
    10c8:	6f e0       	ldi	r22, 0x0F	; 15
    10ca:	b1 de       	rcall	.-670    	; 0xe2e <DIO_read_port>
    10cc:	88 23       	and	r24, r24
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <read_input+0x3e>
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	24 c0       	rjmp	.+72     	; 0x111e <read_input+0x86>
		temp = 1;
    10d6:	ea 81       	ldd	r30, Y+2	; 0x02
    10d8:	fb 81       	ldd	r31, Y+3	; 0x03
    10da:	80 81       	ld	r24, Z
	else {
		DIO_clear_pin(keypad->n3Port, keypad->b0);
    10dc:	ea 81       	ldd	r30, Y+2	; 0x02
    10de:	fb 81       	ldd	r31, Y+3	; 0x03
    10e0:	92 81       	ldd	r25, Z+2	; 0x02
    10e2:	69 2f       	mov	r22, r25
    10e4:	7e de       	rcall	.-772    	; 0xde2 <DIO_clear_pin>
    10e6:	ea 81       	ldd	r30, Y+2	; 0x02
    10e8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ea:	80 81       	ld	r24, Z
    10ec:	ea 81       	ldd	r30, Y+2	; 0x02
		DIO_set_pin(keypad->n3Port, keypad->b1);
    10ee:	fb 81       	ldd	r31, Y+3	; 0x03
    10f0:	93 81       	ldd	r25, Z+3	; 0x03
    10f2:	69 2f       	mov	r22, r25
    10f4:	51 de       	rcall	.-862    	; 0xd98 <DIO_set_pin>
    10f6:	ea 81       	ldd	r30, Y+2	; 0x02
    10f8:	fb 81       	ldd	r31, Y+3	; 0x03
    10fa:	81 81       	ldd	r24, Z+1	; 0x01
    10fc:	6f e0       	ldi	r22, 0x0F	; 15
    10fe:	97 de       	rcall	.-722    	; 0xe2e <DIO_read_port>
		if (DIO_read_port(keypad->n4Port, 0xF))
    1100:	88 23       	and	r24, r24
    1102:	19 f0       	breq	.+6      	; 0x110a <read_input+0x72>
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	0a c0       	rjmp	.+20     	; 0x111e <read_input+0x86>
    110a:	ea 81       	ldd	r30, Y+2	; 0x02
    110c:	fb 81       	ldd	r31, Y+3	; 0x03
    110e:	80 81       	ld	r24, Z
			temp = 2;
    1110:	ea 81       	ldd	r30, Y+2	; 0x02
    1112:	fb 81       	ldd	r31, Y+3	; 0x03
    1114:	93 81       	ldd	r25, Z+3	; 0x03
		else {
			DIO_clear_pin(keypad->n3Port, keypad->b1);
    1116:	69 2f       	mov	r22, r25
    1118:	64 de       	rcall	.-824    	; 0xde2 <DIO_clear_pin>
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	ea 81       	ldd	r30, Y+2	; 0x02
    1120:	fb 81       	ldd	r31, Y+3	; 0x03
    1122:	81 81       	ldd	r24, Z+1	; 0x01
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	96 de       	rcall	.-724    	; 0xe54 <DIO_read_pin>
			temp = 3;
    1128:	88 23       	and	r24, r24
    112a:	21 f0       	breq	.+8      	; 0x1134 <read_input+0x9c>
		}
	}
	if (DIO_read_pin(keypad->n4Port, 0)) {
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	80 93 72 00 	sts	0x0072, r24
    1132:	31 c0       	rjmp	.+98     	; 0x1196 <read_input+0xfe>
    1134:	ea 81       	ldd	r30, Y+2	; 0x02
    1136:	fb 81       	ldd	r31, Y+3	; 0x03
    1138:	81 81       	ldd	r24, Z+1	; 0x01
    113a:	61 e0       	ldi	r22, 0x01	; 1
		last_click = 1 * temp;
    113c:	8b de       	rcall	.-746    	; 0xe54 <DIO_read_pin>
    113e:	88 23       	and	r24, r24
    1140:	41 f0       	breq	.+16     	; 0x1152 <read_input+0xba>
    1142:	89 81       	ldd	r24, Y+1	; 0x01
	} else if (DIO_read_pin(keypad->n4Port, 1)) {
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	80 93 72 00 	sts	0x0072, r24
    1150:	22 c0       	rjmp	.+68     	; 0x1196 <read_input+0xfe>
    1152:	ea 81       	ldd	r30, Y+2	; 0x02
		last_click = 2 * temp;
    1154:	fb 81       	ldd	r31, Y+3	; 0x03
    1156:	81 81       	ldd	r24, Z+1	; 0x01
    1158:	62 e0       	ldi	r22, 0x02	; 2
    115a:	7c de       	rcall	.-776    	; 0xe54 <DIO_read_pin>
    115c:	88 23       	and	r24, r24
    115e:	59 f0       	breq	.+22     	; 0x1176 <read_input+0xde>
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
	} else if (DIO_read_pin(keypad->n4Port, 2)) {
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	c9 01       	movw	r24, r18
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	82 0f       	add	r24, r18
    116e:	93 1f       	adc	r25, r19
    1170:	80 93 72 00 	sts	0x0072, r24
		last_click = 3 * temp;
    1174:	10 c0       	rjmp	.+32     	; 0x1196 <read_input+0xfe>
    1176:	ea 81       	ldd	r30, Y+2	; 0x02
    1178:	fb 81       	ldd	r31, Y+3	; 0x03
    117a:	81 81       	ldd	r24, Z+1	; 0x01
    117c:	63 e0       	ldi	r22, 0x03	; 3
    117e:	6a de       	rcall	.-812    	; 0xe54 <DIO_read_pin>
    1180:	88 23       	and	r24, r24
    1182:	49 f0       	breq	.+18     	; 0x1196 <read_input+0xfe>
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
	} else if (DIO_read_pin(keypad->n4Port, 3)) {
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	80 93 72 00 	sts	0x0072, r24
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
		last_click = 4 * temp;
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <keypad_dispatch>:
	}
}
void keypad_dispatch(gcfg_keypad_t * keypad) {
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <keypad_dispatch+0x6>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
	if (DIO_read_port(keypad->n4Port, 0xF)) {
    11b0:	e9 81       	ldd	r30, Y+1	; 0x01
    11b2:	fa 81       	ldd	r31, Y+2	; 0x02
    11b4:	81 81       	ldd	r24, Z+1	; 0x01
    11b6:	6f e0       	ldi	r22, 0x0F	; 15
    11b8:	3a de       	rcall	.-908    	; 0xe2e <DIO_read_port>
    11ba:	88 23       	and	r24, r24
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <keypad_dispatch+0x22>
    11be:	89 81       	ldd	r24, Y+1	; 0x01
		read_input(keypad);
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	6a df       	rcall	.-300    	; 0x1098 <read_input>
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
	}
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <keypad_get_key>:
u8 keypad_get_key(gcfg_keypad_t * keypad) {
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <keypad_get_key+0x6>
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9b 83       	std	Y+3, r25	; 0x03
    11dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 temp = last_click;
    11de:	80 91 72 00 	lds	r24, 0x0072
    11e2:	89 83       	std	Y+1, r24	; 0x01
	last_click = 0;
    11e4:	10 92 72 00 	sts	0x0072, r1
	return temp;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <lcd_init>:
 *      Author: mh-sh
 */

#include "lcd.h"

void lcd_init(gcfg_lcd_t * lcd) {
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	e2 97       	sbiw	r28, 0x32	; 50
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	9a ab       	std	Y+50, r25	; 0x32
    120c:	89 ab       	std	Y+49, r24	; 0x31

	if (lcd->nbit == n4BIT_MODE) {
    120e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1210:	fa a9       	ldd	r31, Y+50	; 0x32
    1212:	80 81       	ld	r24, Z
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	a1 f5       	brne	.+104    	; 0x1280 <lcd_init+0x8a>
		DIO_init_port_output(lcd->controlPort,
    1218:	e9 a9       	ldd	r30, Y+49	; 0x31
    121a:	fa a9       	ldd	r31, Y+50	; 0x32
    121c:	51 81       	ldd	r21, Z+1	; 0x01
    121e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1220:	fa a9       	ldd	r31, Y+50	; 0x32
    1222:	85 81       	ldd	r24, Z+5	; 0x05
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <lcd_init+0x3c>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	2a 95       	dec	r18
    1234:	e2 f7       	brpl	.-8      	; 0x122e <lcd_init+0x38>
    1236:	48 2f       	mov	r20, r24
    1238:	e9 a9       	ldd	r30, Y+49	; 0x31
    123a:	fa a9       	ldd	r31, Y+50	; 0x32
    123c:	83 81       	ldd	r24, Z+3	; 0x03
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <lcd_init+0x56>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	2a 95       	dec	r18
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <lcd_init+0x52>
    1250:	48 2b       	or	r20, r24
    1252:	e9 a9       	ldd	r30, Y+49	; 0x31
    1254:	fa a9       	ldd	r31, Y+50	; 0x32
    1256:	84 81       	ldd	r24, Z+4	; 0x04
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <lcd_init+0x70>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	2a 95       	dec	r18
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <lcd_init+0x6c>
    126a:	84 2b       	or	r24, r20
    126c:	98 2f       	mov	r25, r24
    126e:	85 2f       	mov	r24, r21
    1270:	69 2f       	mov	r22, r25
    1272:	f7 dc       	rcall	.-1554   	; 0xc62 <DIO_init_port_output>
    1274:	e9 a9       	ldd	r30, Y+49	; 0x31
				(1 << lcd->EN) | (1 << lcd->RS) | (1 << lcd->RW));
		DIO_init_port_output(lcd->dataPort, 0xF0);
    1276:	fa a9       	ldd	r31, Y+50	; 0x32
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	60 ef       	ldi	r22, 0xF0	; 240
    127c:	f2 dc       	rcall	.-1564   	; 0xc62 <DIO_init_port_output>
    127e:	0f c0       	rjmp	.+30     	; 0x129e <lcd_init+0xa8>
    1280:	e9 a9       	ldd	r30, Y+49	; 0x31
    1282:	fa a9       	ldd	r31, Y+50	; 0x32
	} else if (lcd->nbit == n8BIT_MODE) {
    1284:	80 81       	ld	r24, Z
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	51 f4       	brne	.+20     	; 0x129e <lcd_init+0xa8>
    128a:	e9 a9       	ldd	r30, Y+49	; 0x31
    128c:	fa a9       	ldd	r31, Y+50	; 0x32
		DIO_init_port_output(lcd->controlPort, 0xFF);
    128e:	81 81       	ldd	r24, Z+1	; 0x01
    1290:	6f ef       	ldi	r22, 0xFF	; 255
    1292:	e7 dc       	rcall	.-1586   	; 0xc62 <DIO_init_port_output>
    1294:	e9 a9       	ldd	r30, Y+49	; 0x31
    1296:	fa a9       	ldd	r31, Y+50	; 0x32
    1298:	82 81       	ldd	r24, Z+2	; 0x02
		DIO_init_port_output(lcd->dataPort, 0xFF);
    129a:	6f ef       	ldi	r22, 0xFF	; 255
    129c:	e2 dc       	rcall	.-1596   	; 0xc62 <DIO_init_port_output>
    129e:	e9 a9       	ldd	r30, Y+49	; 0x31
    12a0:	fa a9       	ldd	r31, Y+50	; 0x32
    12a2:	81 81       	ldd	r24, Z+1	; 0x01
    12a4:	e9 a9       	ldd	r30, Y+49	; 0x31
	} else {
		// todo error
	}
	DIO_clear_pin(lcd->controlPort, (lcd->EN));
    12a6:	fa a9       	ldd	r31, Y+50	; 0x32
    12a8:	95 81       	ldd	r25, Z+5	; 0x05
    12aa:	69 2f       	mov	r22, r25
    12ac:	9a dd       	rcall	.-1228   	; 0xde2 <DIO_clear_pin>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	aa ef       	ldi	r26, 0xFA	; 250
    12b4:	b4 e4       	ldi	r27, 0x44	; 68
    12b6:	8d a7       	std	Y+45, r24	; 0x2d
    12b8:	9e a7       	std	Y+46, r25	; 0x2e
    12ba:	af a7       	std	Y+47, r26	; 0x2f
    12bc:	b8 ab       	std	Y+48, r27	; 0x30
    12be:	6d a5       	ldd	r22, Y+45	; 0x2d
    12c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    12c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12c4:	98 a9       	ldd	r25, Y+48	; 0x30
    12c6:	2b ea       	ldi	r18, 0xAB	; 171
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12c8:	3a ea       	ldi	r19, 0xAA	; 170
    12ca:	4a ea       	ldi	r20, 0xAA	; 170
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	a9 d8       	rcall	.-3758   	; 0x422 <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	89 a7       	std	Y+41, r24	; 0x29
    12d6:	9a a7       	std	Y+42, r25	; 0x2a
    12d8:	ab a7       	std	Y+43, r26	; 0x2b
    12da:	bc a7       	std	Y+44, r27	; 0x2c
    12dc:	69 a5       	ldd	r22, Y+41	; 0x29
    12de:	7a a5       	ldd	r23, Y+42	; 0x2a
    12e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	94 da       	rcall	.-2776   	; 0x816 <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	1c f4       	brge	.+6      	; 0x12f8 <lcd_init+0x102>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	88 a7       	std	Y+40, r24	; 0x28
    12f6:	8b c0       	rjmp	.+278    	; 0x140e <lcd_init+0x218>
    12f8:	69 a5       	ldd	r22, Y+41	; 0x29
    12fa:	7a a5       	ldd	r23, Y+42	; 0x2a
    12fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    12fe:	9c a5       	ldd	r25, Y+44	; 0x2c
		__ticks = 1;
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 255)
    1306:	53 e4       	ldi	r21, 0x43	; 67
    1308:	2c da       	rcall	.-2984   	; 0x762 <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	0c f0       	brlt	.+2      	; 0x1310 <lcd_init+0x11a>
    130e:	76 c0       	rjmp	.+236    	; 0x13fc <lcd_init+0x206>
    1310:	6d a5       	ldd	r22, Y+45	; 0x2d
    1312:	7e a5       	ldd	r23, Y+46	; 0x2e
    1314:	8f a5       	ldd	r24, Y+47	; 0x2f
    1316:	98 a9       	ldd	r25, Y+48	; 0x30
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a e7       	ldi	r20, 0x7A	; 122
    131e:	54 e4       	ldi	r21, 0x44	; 68
	{
		_delay_ms(__us / 1000.0);
    1320:	77 d9       	rcall	.-3346   	; 0x610 <__divsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8c a3       	std	Y+36, r24	; 0x24
    1328:	9d a3       	std	Y+37, r25	; 0x25
    132a:	ae a3       	std	Y+38, r26	; 0x26
    132c:	bf a3       	std	Y+39, r27	; 0x27
    132e:	6c a1       	ldd	r22, Y+36	; 0x24
    1330:	7d a1       	ldd	r23, Y+37	; 0x25
    1332:	8e a1       	ldd	r24, Y+38	; 0x26
    1334:	9f a1       	ldd	r25, Y+39	; 0x27
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	4a e7       	ldi	r20, 0x7A	; 122
    133c:	53 e4       	ldi	r21, 0x43	; 67
    133e:	71 d8       	rcall	.-3870   	; 0x422 <__mulsf3>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	88 a3       	std	Y+32, r24	; 0x20
    1346:	99 a3       	std	Y+33, r25	; 0x21
    1348:	aa a3       	std	Y+34, r26	; 0x22
    134a:	bb a3       	std	Y+35, r27	; 0x23
    134c:	68 a1       	ldd	r22, Y+32	; 0x20
    134e:	79 a1       	ldd	r23, Y+33	; 0x21
    1350:	8a a1       	ldd	r24, Y+34	; 0x22
    1352:	9b a1       	ldd	r25, Y+35	; 0x23
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	5c da       	rcall	.-2888   	; 0x816 <__ltsf2>
    135e:	88 23       	and	r24, r24
	if (__tmp < 1.0)
    1360:	2c f4       	brge	.+10     	; 0x136c <lcd_init+0x176>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9f 8f       	std	Y+31, r25	; 0x1f
    1368:	8e 8f       	std	Y+30, r24	; 0x1e
    136a:	3d c0       	rjmp	.+122    	; 0x13e6 <lcd_init+0x1f0>
    136c:	68 a1       	ldd	r22, Y+32	; 0x20
    136e:	79 a1       	ldd	r23, Y+33	; 0x21
    1370:	8a a1       	ldd	r24, Y+34	; 0x22
    1372:	9b a1       	ldd	r25, Y+35	; 0x23
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
    1378:	4f e7       	ldi	r20, 0x7F	; 127
    137a:	57 e4       	ldi	r21, 0x47	; 71
    137c:	f2 d9       	rcall	.-3100   	; 0x762 <__gtsf2>
    137e:	18 16       	cp	r1, r24
    1380:	44 f5       	brge	.+80     	; 0x13d2 <lcd_init+0x1dc>
	else if (__tmp > 65535)
    1382:	6c a1       	ldd	r22, Y+36	; 0x24
    1384:	7d a1       	ldd	r23, Y+37	; 0x25
    1386:	8e a1       	ldd	r24, Y+38	; 0x26
    1388:	9f a1       	ldd	r25, Y+39	; 0x27
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	47 d8       	rcall	.-3954   	; 0x422 <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	bc 01       	movw	r22, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9f 8f       	std	Y+31, r25	; 0x1f
    13a6:	8e 8f       	std	Y+30, r24	; 0x1e
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <lcd_init+0x1d2>
    13aa:	89 e1       	ldi	r24, 0x19	; 25
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9d 8f       	std	Y+29, r25	; 0x1d
    13b0:	8c 8f       	std	Y+28, r24	; 0x1c
    13b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <lcd_init+0x1c0>
    13ba:	9d 8f       	std	Y+29, r25	; 0x1d
    13bc:	8c 8f       	std	Y+28, r24	; 0x1c
    13be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	9f 8f       	std	Y+31, r25	; 0x1f
    13c6:	8e 8f       	std	Y+30, r24	; 0x1e
    13c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	69 f7       	brne	.-38     	; 0x13aa <lcd_init+0x1b4>
    13d0:	24 c0       	rjmp	.+72     	; 0x141a <lcd_init+0x224>
    13d2:	68 a1       	ldd	r22, Y+32	; 0x20
    13d4:	79 a1       	ldd	r23, Y+33	; 0x21
    13d6:	8a a1       	ldd	r24, Y+34	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d8:	9b a1       	ldd	r25, Y+35	; 0x23
    13da:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e2:	9f 8f       	std	Y+31, r25	; 0x1f
    13e4:	8e 8f       	std	Y+30, r24	; 0x1e
    13e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13ea:	9b 8f       	std	Y+27, r25	; 0x1b
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ec:	8a 8f       	std	Y+26, r24	; 0x1a
    13ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <lcd_init+0x1fc>
    13f6:	9b 8f       	std	Y+27, r25	; 0x1b
    13f8:	8a 8f       	std	Y+26, r24	; 0x1a
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <lcd_init+0x224>
    13fc:	69 a5       	ldd	r22, Y+41	; 0x29
    13fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    1400:	8b a5       	ldd	r24, Y+43	; 0x2b
    1402:	9c a5       	ldd	r25, Y+44	; 0x2c
    1404:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	88 a7       	std	Y+40, r24	; 0x28
    140e:	88 a5       	ldd	r24, Y+40	; 0x28
    1410:	89 8f       	std	Y+25, r24	; 0x19
    1412:	89 8d       	ldd	r24, Y+25	; 0x19
    1414:	8a 95       	dec	r24
    1416:	f1 f7       	brne	.-4      	; 0x1414 <lcd_init+0x21e>
    1418:	89 8f       	std	Y+25, r24	; 0x19
    141a:	e9 a9       	ldd	r30, Y+49	; 0x31
    141c:	fa a9       	ldd	r31, Y+50	; 0x32
    141e:	80 81       	ld	r24, Z
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	69 f4       	brne	.+26     	; 0x143e <lcd_init+0x248>
    1424:	89 a9       	ldd	r24, Y+49	; 0x31
    1426:	9a a9       	ldd	r25, Y+50	; 0x32
    1428:	63 e3       	ldi	r22, 0x33	; 51
    142a:	e0 d0       	rcall	.+448    	; 0x15ec <lcd_send_command>
    142c:	89 a9       	ldd	r24, Y+49	; 0x31
    142e:	9a a9       	ldd	r25, Y+50	; 0x32
    1430:	62 e3       	ldi	r22, 0x32	; 50
    1432:	dc d0       	rcall	.+440    	; 0x15ec <lcd_send_command>
	_delay_us(2000);
	if (lcd->nbit == n4BIT_MODE) {
    1434:	89 a9       	ldd	r24, Y+49	; 0x31
    1436:	9a a9       	ldd	r25, Y+50	; 0x32
    1438:	6c e2       	ldi	r22, 0x2C	; 44
    143a:	d8 d0       	rcall	.+432    	; 0x15ec <lcd_send_command>
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <lcd_init+0x25a>

		lcd_send_command(lcd, 0x33); //vodoo
    143e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1440:	fa a9       	ldd	r31, Y+50	; 0x32
    1442:	80 81       	ld	r24, Z
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	21 f4       	brne	.+8      	; 0x1450 <lcd_init+0x25a>
		lcd_send_command(lcd, 0x32); //vodoo
    1448:	89 a9       	ldd	r24, Y+49	; 0x31
    144a:	9a a9       	ldd	r25, Y+50	; 0x32
    144c:	6c e3       	ldi	r22, 0x3C	; 60
    144e:	ce d0       	rcall	.+412    	; 0x15ec <lcd_send_command>
    1450:	89 a9       	ldd	r24, Y+49	; 0x31
		lcd_send_command(lcd, 0x2C); //2 line , 5*11, 4bit
    1452:	9a a9       	ldd	r25, Y+50	; 0x32
    1454:	6e e0       	ldi	r22, 0x0E	; 14
    1456:	ca d0       	rcall	.+404    	; 0x15ec <lcd_send_command>
    1458:	89 a9       	ldd	r24, Y+49	; 0x31
    145a:	9a a9       	ldd	r25, Y+50	; 0x32
    145c:	66 e0       	ldi	r22, 0x06	; 6
	} else if (lcd->nbit == n8BIT_MODE) {
    145e:	c6 d0       	rcall	.+396    	; 0x15ec <lcd_send_command>
    1460:	89 a9       	ldd	r24, Y+49	; 0x31
    1462:	9a a9       	ldd	r25, Y+50	; 0x32
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	c2 d0       	rcall	.+388    	; 0x15ec <lcd_send_command>
		lcd_send_command(lcd, 0x3C); //2 line , 5*11, 8bit
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	aa ef       	ldi	r26, 0xFA	; 250
    146e:	b4 e4       	ldi	r27, 0x44	; 68
    1470:	8d 8b       	std	Y+21, r24	; 0x15
	}

	lcd_send_command(lcd, 0x0E); //cursor on
    1472:	9e 8b       	std	Y+22, r25	; 0x16
    1474:	af 8b       	std	Y+23, r26	; 0x17
    1476:	b8 8f       	std	Y+24, r27	; 0x18
    1478:	6d 89       	ldd	r22, Y+21	; 0x15
    147a:	7e 89       	ldd	r23, Y+22	; 0x16
	lcd_send_command(lcd, 0x06); //shift right
    147c:	8f 89       	ldd	r24, Y+23	; 0x17
    147e:	98 8d       	ldd	r25, Y+24	; 0x18
    1480:	2b ea       	ldi	r18, 0xAB	; 171
    1482:	3a ea       	ldi	r19, 0xAA	; 170
    1484:	4a ea       	ldi	r20, 0xAA	; 170
    1486:	5e e3       	ldi	r21, 0x3E	; 62
    1488:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	89 8b       	std	Y+17, r24	; 0x11
    1492:	9a 8b       	std	Y+18, r25	; 0x12
    1494:	ab 8b       	std	Y+19, r26	; 0x13
    1496:	bc 8b       	std	Y+20, r27	; 0x14
    1498:	69 89       	ldd	r22, Y+17	; 0x11
    149a:	7a 89       	ldd	r23, Y+18	; 0x12
    149c:	8b 89       	ldd	r24, Y+19	; 0x13
    149e:	9c 89       	ldd	r25, Y+20	; 0x14
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e8       	ldi	r20, 0x80	; 128
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	b6 d9       	rcall	.-3220   	; 0x816 <__ltsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	1c f4       	brge	.+6      	; 0x14b4 <lcd_init+0x2be>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	88 8b       	std	Y+16, r24	; 0x10
    14b2:	8d c0       	rjmp	.+282    	; 0x15ce <lcd_init+0x3d8>
    14b4:	69 89       	ldd	r22, Y+17	; 0x11
    14b6:	7a 89       	ldd	r23, Y+18	; 0x12
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	53 e4       	ldi	r21, 0x43	; 67
    14c4:	4e d9       	rcall	.-3428   	; 0x762 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	0c f0       	brlt	.+2      	; 0x14cc <lcd_init+0x2d6>
    14ca:	78 c0       	rjmp	.+240    	; 0x15bc <lcd_init+0x3c6>
    14cc:	6d 89       	ldd	r22, Y+21	; 0x15
    14ce:	7e 89       	ldd	r23, Y+22	; 0x16
    14d0:	8f 89       	ldd	r24, Y+23	; 0x17
    14d2:	98 8d       	ldd	r25, Y+24	; 0x18
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
		__ticks = 1;
    14d8:	4a e7       	ldi	r20, 0x7A	; 122
    14da:	54 e4       	ldi	r21, 0x44	; 68
    14dc:	99 d8       	rcall	.-3790   	; 0x610 <__divsf3>
	else if (__tmp > 255)
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8c 87       	std	Y+12, r24	; 0x0c
    14e4:	9d 87       	std	Y+13, r25	; 0x0d
    14e6:	ae 87       	std	Y+14, r26	; 0x0e
    14e8:	bf 87       	std	Y+15, r27	; 0x0f
    14ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    14ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    14ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    14f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a e7       	ldi	r20, 0x7A	; 122
	{
		_delay_ms(__us / 1000.0);
    14f8:	53 e4       	ldi	r21, 0x43	; 67
    14fa:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	88 87       	std	Y+8, r24	; 0x08
    1504:	99 87       	std	Y+9, r25	; 0x09
    1506:	aa 87       	std	Y+10, r26	; 0x0a
    1508:	bb 87       	std	Y+11, r27	; 0x0b
    150a:	68 85       	ldd	r22, Y+8	; 0x08
    150c:	79 85       	ldd	r23, Y+9	; 0x09
    150e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1510:	9b 85       	ldd	r25, Y+11	; 0x0b
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	7d d9       	rcall	.-3334   	; 0x816 <__ltsf2>
    151c:	88 23       	and	r24, r24
    151e:	2c f4       	brge	.+10     	; 0x152a <lcd_init+0x334>
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9f 83       	std	Y+7, r25	; 0x07
    1526:	8e 83       	std	Y+6, r24	; 0x06
    1528:	3e c0       	rjmp	.+124    	; 0x15a6 <lcd_init+0x3b0>
    152a:	68 85       	ldd	r22, Y+8	; 0x08
    152c:	79 85       	ldd	r23, Y+9	; 0x09
    152e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1530:	9b 85       	ldd	r25, Y+11	; 0x0b
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	3f ef       	ldi	r19, 0xFF	; 255
    1536:	4f e7       	ldi	r20, 0x7F	; 127
	if (__tmp < 1.0)
    1538:	57 e4       	ldi	r21, 0x47	; 71
    153a:	13 d9       	rcall	.-3546   	; 0x762 <__gtsf2>
    153c:	18 16       	cp	r1, r24
    153e:	4c f5       	brge	.+82     	; 0x1592 <lcd_init+0x39c>
    1540:	6c 85       	ldd	r22, Y+12	; 0x0c
    1542:	7d 85       	ldd	r23, Y+13	; 0x0d
    1544:	8e 85       	ldd	r24, Y+14	; 0x0e
    1546:	9f 85       	ldd	r25, Y+15	; 0x0f
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e2       	ldi	r20, 0x20	; 32
    154e:	51 e4       	ldi	r21, 0x41	; 65
		__ticks = 1;
    1550:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	bc 01       	movw	r22, r24
	else if (__tmp > 65535)
    155a:	cd 01       	movw	r24, r26
    155c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	9f 83       	std	Y+7, r25	; 0x07
    1566:	8e 83       	std	Y+6, r24	; 0x06
    1568:	0f c0       	rjmp	.+30     	; 0x1588 <lcd_init+0x392>
    156a:	89 e1       	ldi	r24, 0x19	; 25
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9d 83       	std	Y+5, r25	; 0x05
    1570:	8c 83       	std	Y+4, r24	; 0x04
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <lcd_init+0x380>
    157a:	9d 83       	std	Y+5, r25	; 0x05
    157c:	8c 83       	std	Y+4, r24	; 0x04
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	9f 83       	std	Y+7, r25	; 0x07
    1586:	8e 83       	std	Y+6, r24	; 0x06
    1588:	8e 81       	ldd	r24, Y+6	; 0x06
    158a:	9f 81       	ldd	r25, Y+7	; 0x07
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	69 f7       	brne	.-38     	; 0x156a <lcd_init+0x374>
    1590:	24 c0       	rjmp	.+72     	; 0x15da <lcd_init+0x3e4>
    1592:	68 85       	ldd	r22, Y+8	; 0x08
    1594:	79 85       	ldd	r23, Y+9	; 0x09
    1596:	8a 85       	ldd	r24, Y+10	; 0x0a
    1598:	9b 85       	ldd	r25, Y+11	; 0x0b
    159a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9f 83       	std	Y+7, r25	; 0x07
    15a4:	8e 83       	std	Y+6, r24	; 0x06
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	9f 81       	ldd	r25, Y+7	; 0x07
    15aa:	9b 83       	std	Y+3, r25	; 0x03
    15ac:	8a 83       	std	Y+2, r24	; 0x02
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	9b 81       	ldd	r25, Y+3	; 0x03
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <lcd_init+0x3bc>
    15b6:	9b 83       	std	Y+3, r25	; 0x03
    15b8:	8a 83       	std	Y+2, r24	; 0x02
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <lcd_init+0x3e4>
    15bc:	69 89       	ldd	r22, Y+17	; 0x11
    15be:	7a 89       	ldd	r23, Y+18	; 0x12
    15c0:	8b 89       	ldd	r24, Y+19	; 0x13
    15c2:	9c 89       	ldd	r25, Y+20	; 0x14
    15c4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	88 8b       	std	Y+16, r24	; 0x10
    15ce:	88 89       	ldd	r24, Y+16	; 0x10
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	8a 95       	dec	r24
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <lcd_init+0x3de>
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	e2 96       	adiw	r28, 0x32	; 50
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <lcd_send_command>:
	lcd_send_command(lcd, 0x01); //clear
	_delay_us(2000);

}
void lcd_send_command(gcfg_lcd_t * lcd, u8 cmd) {
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	c3 56       	subi	r28, 0x63	; 99
    15fa:	d0 40       	sbci	r29, 0x00	; 0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	fe 01       	movw	r30, r28
    1608:	ef 59       	subi	r30, 0x9F	; 159
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
    1610:	fe 01       	movw	r30, r28
    1612:	ed 59       	subi	r30, 0x9D	; 157
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	60 83       	st	Z, r22
	DIO_clear_pin(lcd->controlPort, (lcd->RS));
    1618:	fe 01       	movw	r30, r28
    161a:	ef 59       	subi	r30, 0x9F	; 159
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	01 90       	ld	r0, Z+
    1620:	f0 81       	ld	r31, Z
    1622:	e0 2d       	mov	r30, r0
    1624:	81 81       	ldd	r24, Z+1	; 0x01
    1626:	fe 01       	movw	r30, r28
    1628:	ef 59       	subi	r30, 0x9F	; 159
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	01 90       	ld	r0, Z+
    162e:	f0 81       	ld	r31, Z
    1630:	e0 2d       	mov	r30, r0
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	69 2f       	mov	r22, r25
    1636:	d5 db       	rcall	.-2134   	; 0xde2 <DIO_clear_pin>
    1638:	fe 01       	movw	r30, r28
	DIO_clear_pin(lcd->controlPort, (lcd->RW));
    163a:	ef 59       	subi	r30, 0x9F	; 159
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	01 90       	ld	r0, Z+
    1640:	f0 81       	ld	r31, Z
    1642:	e0 2d       	mov	r30, r0
    1644:	81 81       	ldd	r24, Z+1	; 0x01
    1646:	fe 01       	movw	r30, r28
    1648:	ef 59       	subi	r30, 0x9F	; 159
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	01 90       	ld	r0, Z+
    164e:	f0 81       	ld	r31, Z
    1650:	e0 2d       	mov	r30, r0
    1652:	94 81       	ldd	r25, Z+4	; 0x04
    1654:	69 2f       	mov	r22, r25
    1656:	c5 db       	rcall	.-2166   	; 0xde2 <DIO_clear_pin>
    1658:	fe 01       	movw	r30, r28
    165a:	ef 59       	subi	r30, 0x9F	; 159

	if (lcd->nbit == n4BIT_MODE) {
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	01 90       	ld	r0, Z+
    1660:	f0 81       	ld	r31, Z
    1662:	e0 2d       	mov	r30, r0
    1664:	80 81       	ld	r24, Z
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f0       	breq	.+2      	; 0x166c <lcd_send_command+0x80>
    166a:	4d c2       	rjmp	.+1178   	; 0x1b06 <lcd_send_command+0x51a>
    166c:	fe 01       	movw	r30, r28
    166e:	ef 59       	subi	r30, 0x9F	; 159
		DIO_write_port(lcd->dataPort, 0xF0, (cmd & 0xF0));
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	01 90       	ld	r0, Z+
    1674:	f0 81       	ld	r31, Z
    1676:	e0 2d       	mov	r30, r0
    1678:	22 81       	ldd	r18, Z+2	; 0x02
    167a:	fe 01       	movw	r30, r28
    167c:	ed 59       	subi	r30, 0x9D	; 157
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	80 81       	ld	r24, Z
    1682:	98 2f       	mov	r25, r24
    1684:	90 7f       	andi	r25, 0xF0	; 240
    1686:	82 2f       	mov	r24, r18
    1688:	60 ef       	ldi	r22, 0xF0	; 240
    168a:	49 2f       	mov	r20, r25
    168c:	20 db       	rcall	.-2496   	; 0xcce <DIO_write_port>
    168e:	fe 01       	movw	r30, r28
    1690:	ef 59       	subi	r30, 0x9F	; 159
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
		DIO_set_pin(lcd->controlPort, (lcd->EN));
    1694:	01 90       	ld	r0, Z+
    1696:	f0 81       	ld	r31, Z
    1698:	e0 2d       	mov	r30, r0
    169a:	81 81       	ldd	r24, Z+1	; 0x01
    169c:	fe 01       	movw	r30, r28
    169e:	ef 59       	subi	r30, 0x9F	; 159
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	01 90       	ld	r0, Z+
    16a4:	f0 81       	ld	r31, Z
    16a6:	e0 2d       	mov	r30, r0
    16a8:	95 81       	ldd	r25, Z+5	; 0x05
    16aa:	69 2f       	mov	r22, r25
    16ac:	75 db       	rcall	.-2326   	; 0xd98 <DIO_set_pin>
    16ae:	fe 01       	movw	r30, r28
    16b0:	e3 5a       	subi	r30, 0xA3	; 163
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e8       	ldi	r26, 0x80	; 128
    16ba:	bf e3       	ldi	r27, 0x3F	; 63
    16bc:	80 83       	st	Z, r24
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	a2 83       	std	Z+2, r26	; 0x02
    16c2:	b3 83       	std	Z+3, r27	; 0x03
    16c4:	8e 01       	movw	r16, r28
    16c6:	07 5a       	subi	r16, 0xA7	; 167
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ca:	fe 01       	movw	r30, r28
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16cc:	e3 5a       	subi	r30, 0xA3	; 163
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	2b ea       	ldi	r18, 0xAB	; 171
    16da:	3a ea       	ldi	r19, 0xAA	; 170
    16dc:	4a ea       	ldi	r20, 0xAA	; 170
    16de:	5e e3       	ldi	r21, 0x3E	; 62
    16e0:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	f8 01       	movw	r30, r16
    16ea:	80 83       	st	Z, r24
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	a2 83       	std	Z+2, r26	; 0x02
    16f0:	b3 83       	std	Z+3, r27	; 0x03
    16f2:	fe 01       	movw	r30, r28
    16f4:	e7 5a       	subi	r30, 0xA7	; 167
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	60 81       	ld	r22, Z
	if (__tmp < 1.0)
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	86 d8       	rcall	.-3828   	; 0x816 <__ltsf2>
    170a:	88 23       	and	r24, r24
    170c:	34 f4       	brge	.+12     	; 0x171a <lcd_send_command+0x12e>
    170e:	fe 01       	movw	r30, r28
    1710:	e8 5a       	subi	r30, 0xA8	; 168
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	80 83       	st	Z, r24
		__ticks = 1;
    1718:	de c0       	rjmp	.+444    	; 0x18d6 <lcd_send_command+0x2ea>
    171a:	fe 01       	movw	r30, r28
    171c:	e7 5a       	subi	r30, 0xA7	; 167
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
	else if (__tmp > 255)
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4f e7       	ldi	r20, 0x7F	; 127
    172e:	53 e4       	ldi	r21, 0x43	; 67
    1730:	18 d8       	rcall	.-4048   	; 0x762 <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	0c f0       	brlt	.+2      	; 0x1738 <lcd_send_command+0x14c>
    1736:	bf c0       	rjmp	.+382    	; 0x18b6 <lcd_send_command+0x2ca>
    1738:	fe 01       	movw	r30, r28
    173a:	e3 5a       	subi	r30, 0xA3	; 163
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
	{
		_delay_ms(__us / 1000.0);
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a e7       	ldi	r20, 0x7A	; 122
    174c:	54 e4       	ldi	r21, 0x44	; 68
    174e:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	fe 01       	movw	r30, r28
    1758:	ec 5a       	subi	r30, 0xAC	; 172
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 83       	st	Z, r24
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	a2 83       	std	Z+2, r26	; 0x02
    1762:	b3 83       	std	Z+3, r27	; 0x03
    1764:	8e 01       	movw	r16, r28
    1766:	00 5b       	subi	r16, 0xB0	; 176
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	fe 01       	movw	r30, r28
    176c:	ec 5a       	subi	r30, 0xAC	; 172
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	53 e4       	ldi	r21, 0x43	; 67
    1780:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	f8 01       	movw	r30, r16
    178a:	80 83       	st	Z, r24
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	a2 83       	std	Z+2, r26	; 0x02
    1790:	b3 83       	std	Z+3, r27	; 0x03
    1792:	fe 01       	movw	r30, r28
    1794:	e0 5b       	subi	r30, 0xB0	; 176
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
	if (__tmp < 1.0)
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	36 d8       	rcall	.-3988   	; 0x816 <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	44 f4       	brge	.+16     	; 0x17be <lcd_send_command+0x1d2>
    17ae:	fe 01       	movw	r30, r28
    17b0:	e2 5b       	subi	r30, 0xB2	; 178
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	91 83       	std	Z+1, r25	; 0x01
    17ba:	80 83       	st	Z, r24
		__ticks = 1;
    17bc:	64 c0       	rjmp	.+200    	; 0x1886 <lcd_send_command+0x29a>
    17be:	fe 01       	movw	r30, r28
    17c0:	e0 5b       	subi	r30, 0xB0	; 176
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
	else if (__tmp > 65535)
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	0c f0       	brlt	.+2      	; 0x17de <lcd_send_command+0x1f2>
    17dc:	43 c0       	rjmp	.+134    	; 0x1864 <lcd_send_command+0x278>
    17de:	fe 01       	movw	r30, r28
    17e0:	ec 5a       	subi	r30, 0xAC	; 172
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
    17ea:	93 81       	ldd	r25, Z+3	; 0x03
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8e 01       	movw	r16, r28
    17fe:	02 5b       	subi	r16, 0xB2	; 178
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	f8 01       	movw	r30, r16
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	80 83       	st	Z, r24
    1814:	1f c0       	rjmp	.+62     	; 0x1854 <lcd_send_command+0x268>
    1816:	fe 01       	movw	r30, r28
    1818:	e4 5b       	subi	r30, 0xB4	; 180
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	89 e1       	ldi	r24, 0x19	; 25
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
    1824:	fe 01       	movw	r30, r28
    1826:	e4 5b       	subi	r30, 0xB4	; 180
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	80 81       	ld	r24, Z
    182c:	91 81       	ldd	r25, Z+1	; 0x01
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <lcd_send_command+0x242>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1832:	fe 01       	movw	r30, r28
    1834:	e4 5b       	subi	r30, 0xB4	; 180
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	80 83       	st	Z, r24
    183c:	de 01       	movw	r26, r28
    183e:	a2 5b       	subi	r26, 0xB2	; 178
    1840:	bf 4f       	sbci	r27, 0xFF	; 255
    1842:	fe 01       	movw	r30, r28
    1844:	e2 5b       	subi	r30, 0xB2	; 178
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	11 96       	adiw	r26, 0x01	; 1
    1850:	9c 93       	st	X, r25
    1852:	8e 93       	st	-X, r24
    1854:	fe 01       	movw	r30, r28
    1856:	e2 5b       	subi	r30, 0xB2	; 178
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	d1 f6       	brne	.-76     	; 0x1816 <lcd_send_command+0x22a>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	4b c0       	rjmp	.+150    	; 0x18fa <lcd_send_command+0x30e>
    1864:	8e 01       	movw	r16, r28
    1866:	02 5b       	subi	r16, 0xB2	; 178
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
    186a:	fe 01       	movw	r30, r28
    186c:	e0 5b       	subi	r30, 0xB0	; 176
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	60 81       	ld	r22, Z
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	f8 01       	movw	r30, r16
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	80 83       	st	Z, r24
    1886:	de 01       	movw	r26, r28
    1888:	a6 5b       	subi	r26, 0xB6	; 182
    188a:	bf 4f       	sbci	r27, 0xFF	; 255
    188c:	fe 01       	movw	r30, r28
    188e:	e2 5b       	subi	r30, 0xB2	; 178
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	11 96       	adiw	r26, 0x01	; 1
    1898:	9c 93       	st	X, r25
    189a:	8e 93       	st	-X, r24
    189c:	fe 01       	movw	r30, r28
    189e:	e6 5b       	subi	r30, 0xB6	; 182
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <lcd_send_command+0x2ba>
    18aa:	fe 01       	movw	r30, r28
    18ac:	e6 5b       	subi	r30, 0xB6	; 182
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
    18b4:	22 c0       	rjmp	.+68     	; 0x18fa <lcd_send_command+0x30e>
    18b6:	8e 01       	movw	r16, r28
    18b8:	08 5a       	subi	r16, 0xA8	; 168
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 5a       	subi	r30, 0xA7	; 167
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	f8 01       	movw	r30, r16
    18d4:	80 83       	st	Z, r24
    18d6:	de 01       	movw	r26, r28
    18d8:	a7 5b       	subi	r26, 0xB7	; 183
    18da:	bf 4f       	sbci	r27, 0xFF	; 255
    18dc:	fe 01       	movw	r30, r28
    18de:	e8 5a       	subi	r30, 0xA8	; 168
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	8c 93       	st	X, r24
    18e6:	fe 01       	movw	r30, r28
    18e8:	e7 5b       	subi	r30, 0xB7	; 183
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	8a 95       	dec	r24
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <lcd_send_command+0x302>
    18f2:	fe 01       	movw	r30, r28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18f4:	e7 5b       	subi	r30, 0xB7	; 183
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 83       	st	Z, r24
    18fa:	fe 01       	movw	r30, r28
    18fc:	ef 59       	subi	r30, 0x9F	; 159
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	01 90       	ld	r0, Z+
    1902:	f0 81       	ld	r31, Z
    1904:	e0 2d       	mov	r30, r0
    1906:	81 81       	ldd	r24, Z+1	; 0x01
		_delay_us(1);
		DIO_clear_pin(lcd->controlPort, (lcd->EN));
    1908:	fe 01       	movw	r30, r28
    190a:	ef 59       	subi	r30, 0x9F	; 159
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	01 90       	ld	r0, Z+
    1910:	f0 81       	ld	r31, Z
    1912:	e0 2d       	mov	r30, r0
    1914:	95 81       	ldd	r25, Z+5	; 0x05
    1916:	69 2f       	mov	r22, r25
    1918:	64 da       	rcall	.-2872   	; 0xde2 <DIO_clear_pin>
    191a:	fe 01       	movw	r30, r28
    191c:	eb 5b       	subi	r30, 0xBB	; 187
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a8 ec       	ldi	r26, 0xC8	; 200
    1926:	b2 e4       	ldi	r27, 0x42	; 66
    1928:	80 83       	st	Z, r24
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	a2 83       	std	Z+2, r26	; 0x02
    192e:	b3 83       	std	Z+3, r27	; 0x03
    1930:	8e 01       	movw	r16, r28
    1932:	0f 5b       	subi	r16, 0xBF	; 191
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
    1936:	fe 01       	movw	r30, r28
    1938:	eb 5b       	subi	r30, 0xBB	; 187
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	60 81       	ld	r22, Z
    193e:	71 81       	ldd	r23, Z+1	; 0x01
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	2b ea       	ldi	r18, 0xAB	; 171
    1946:	3a ea       	ldi	r19, 0xAA	; 170
    1948:	4a ea       	ldi	r20, 0xAA	; 170
    194a:	5e e3       	ldi	r21, 0x3E	; 62
    194c:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	f8 01       	movw	r30, r16
    1956:	80 83       	st	Z, r24
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	a2 83       	std	Z+2, r26	; 0x02
    195c:	b3 83       	std	Z+3, r27	; 0x03
    195e:	fe 01       	movw	r30, r28
    1960:	ef 5b       	subi	r30, 0xBF	; 191
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	34 f4       	brge	.+12     	; 0x1988 <lcd_send_command+0x39c>
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	fe 01       	movw	r30, r28
    1980:	e0 5c       	subi	r30, 0xC0	; 192
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 83       	st	Z, r24
    1986:	9d c0       	rjmp	.+314    	; 0x1ac2 <lcd_send_command+0x4d6>
    1988:	fe 01       	movw	r30, r28
    198a:	ef 5b       	subi	r30, 0xBF	; 191
		__ticks = 1;
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 255)
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	53 e4       	ldi	r21, 0x43	; 67
    199e:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <lcd_send_command+0x3bc>
    19a6:	7e c0       	rjmp	.+252    	; 0x1aa4 <lcd_send_command+0x4b8>
    19a8:	fe 01       	movw	r30, r28
    19aa:	eb 5b       	subi	r30, 0xBB	; 187
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
	{
		_delay_ms(__us / 1000.0);
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8c af       	std	Y+60, r24	; 0x3c
    19c8:	9d af       	std	Y+61, r25	; 0x3d
    19ca:	ae af       	std	Y+62, r26	; 0x3e
    19cc:	bf af       	std	Y+63, r27	; 0x3f
    19ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    19d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    19d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    19d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a e7       	ldi	r20, 0x7A	; 122
    19dc:	53 e4       	ldi	r21, 0x43	; 67
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	88 af       	std	Y+56, r24	; 0x38
    19e8:	99 af       	std	Y+57, r25	; 0x39
    19ea:	aa af       	std	Y+58, r26	; 0x3a
    19ec:	bb af       	std	Y+59, r27	; 0x3b
    19ee:	68 ad       	ldd	r22, Y+56	; 0x38
    19f0:	79 ad       	ldd	r23, Y+57	; 0x39
    19f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    19f4:	9b ad       	ldd	r25, Y+59	; 0x3b
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
	if (__tmp < 1.0)
    19fe:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <lcd_send_command+0x424>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9f ab       	std	Y+55, r25	; 0x37
    1a0c:	8e ab       	std	Y+54, r24	; 0x36
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <lcd_send_command+0x4a2>
    1a10:	68 ad       	ldd	r22, Y+56	; 0x38
    1a12:	79 ad       	ldd	r23, Y+57	; 0x39
    1a14:	8a ad       	ldd	r24, Y+58	; 0x3a
		__ticks = 1;
    1a16:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
    1a20:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <lcd_send_command+0x48e>
    1a28:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a2a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9f ab       	std	Y+55, r25	; 0x37
    1a4e:	8e ab       	std	Y+54, r24	; 0x36
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <lcd_send_command+0x484>
    1a52:	89 e1       	ldi	r24, 0x19	; 25
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9d ab       	std	Y+53, r25	; 0x35
    1a58:	8c ab       	std	Y+52, r24	; 0x34
    1a5a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a5c:	9d a9       	ldd	r25, Y+53	; 0x35
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <lcd_send_command+0x472>
    1a62:	9d ab       	std	Y+53, r25	; 0x35
    1a64:	8c ab       	std	Y+52, r24	; 0x34
    1a66:	8e a9       	ldd	r24, Y+54	; 0x36
    1a68:	9f a9       	ldd	r25, Y+55	; 0x37
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	9f ab       	std	Y+55, r25	; 0x37
    1a6e:	8e ab       	std	Y+54, r24	; 0x36
    1a70:	8e a9       	ldd	r24, Y+54	; 0x36
    1a72:	9f a9       	ldd	r25, Y+55	; 0x37
    1a74:	00 97       	sbiw	r24, 0x00	; 0
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <lcd_send_command+0x466>
    1a78:	2d c0       	rjmp	.+90     	; 0x1ad4 <lcd_send_command+0x4e8>
    1a7a:	68 ad       	ldd	r22, Y+56	; 0x38
    1a7c:	79 ad       	ldd	r23, Y+57	; 0x39
    1a7e:	8a ad       	ldd	r24, Y+58	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a82:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	9f ab       	std	Y+55, r25	; 0x37
    1a8c:	8e ab       	std	Y+54, r24	; 0x36
    1a8e:	8e a9       	ldd	r24, Y+54	; 0x36
    1a90:	9f a9       	ldd	r25, Y+55	; 0x37
    1a92:	9b ab       	std	Y+51, r25	; 0x33
    1a94:	8a ab       	std	Y+50, r24	; 0x32
    1a96:	8a a9       	ldd	r24, Y+50	; 0x32
    1a98:	9b a9       	ldd	r25, Y+51	; 0x33
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <lcd_send_command+0x4ae>
    1a9e:	9b ab       	std	Y+51, r25	; 0x33
    1aa0:	8a ab       	std	Y+50, r24	; 0x32
    1aa2:	18 c0       	rjmp	.+48     	; 0x1ad4 <lcd_send_command+0x4e8>
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	ef 5b       	subi	r30, 0xBF	; 191
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	fe 01       	movw	r30, r28
    1abc:	e0 5c       	subi	r30, 0xC0	; 192
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 83       	st	Z, r24
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e0 5c       	subi	r30, 0xC0	; 192
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 ab       	std	Y+49, r24	; 0x31
    1acc:	89 a9       	ldd	r24, Y+49	; 0x31
    1ace:	8a 95       	dec	r24
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <lcd_send_command+0x4e2>
    1ad2:	89 ab       	std	Y+49, r24	; 0x31
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ef 59       	subi	r30, 0x9F	; 159
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	01 90       	ld	r0, Z+
    1adc:	f0 81       	ld	r31, Z
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	22 81       	ldd	r18, Z+2	; 0x02
    1ae2:	fe 01       	movw	r30, r28
		_delay_us(100);
		DIO_write_port(lcd->dataPort, 0xF0, (cmd & 0xF) << 4);
    1ae4:	ed 59       	subi	r30, 0x9D	; 157
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	82 95       	swap	r24
    1af0:	92 95       	swap	r25
    1af2:	90 7f       	andi	r25, 0xF0	; 240
    1af4:	98 27       	eor	r25, r24
    1af6:	80 7f       	andi	r24, 0xF0	; 240
    1af8:	98 27       	eor	r25, r24
    1afa:	98 2f       	mov	r25, r24
    1afc:	82 2f       	mov	r24, r18
    1afe:	60 ef       	ldi	r22, 0xF0	; 240
    1b00:	49 2f       	mov	r20, r25
    1b02:	e5 d8       	rcall	.-3638   	; 0xcce <DIO_write_port>
    1b04:	16 c0       	rjmp	.+44     	; 0x1b32 <lcd_send_command+0x546>
    1b06:	fe 01       	movw	r30, r28
    1b08:	ef 59       	subi	r30, 0x9F	; 159
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	01 90       	ld	r0, Z+
    1b0e:	f0 81       	ld	r31, Z
    1b10:	e0 2d       	mov	r30, r0
    1b12:	80 81       	ld	r24, Z
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	69 f4       	brne	.+26     	; 0x1b32 <lcd_send_command+0x546>
	} else if (lcd->nbit == n8BIT_MODE) {
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ef 59       	subi	r30, 0x9F	; 159
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	01 90       	ld	r0, Z+
    1b20:	f0 81       	ld	r31, Z
    1b22:	e0 2d       	mov	r30, r0
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	fe 01       	movw	r30, r28
    1b28:	ed 59       	subi	r30, 0x9D	; 157
		DIO_write_port(lcd->dataPort, 0xFF, cmd);
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	6f ef       	ldi	r22, 0xFF	; 255
    1b2e:	40 81       	ld	r20, Z
    1b30:	ce d8       	rcall	.-3684   	; 0xcce <DIO_write_port>
    1b32:	fe 01       	movw	r30, r28
    1b34:	ef 59       	subi	r30, 0x9F	; 159
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	01 90       	ld	r0, Z+
    1b3a:	f0 81       	ld	r31, Z
    1b3c:	e0 2d       	mov	r30, r0
    1b3e:	81 81       	ldd	r24, Z+1	; 0x01
    1b40:	fe 01       	movw	r30, r28
    1b42:	ef 59       	subi	r30, 0x9F	; 159
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
	} else {
		// todo error
	}
	DIO_set_pin(lcd->controlPort, (lcd->EN));
    1b46:	01 90       	ld	r0, Z+
    1b48:	f0 81       	ld	r31, Z
    1b4a:	e0 2d       	mov	r30, r0
    1b4c:	95 81       	ldd	r25, Z+5	; 0x05
    1b4e:	69 2f       	mov	r22, r25
    1b50:	23 d9       	rcall	.-3514   	; 0xd98 <DIO_set_pin>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e8       	ldi	r26, 0x80	; 128
    1b58:	bf e3       	ldi	r27, 0x3F	; 63
    1b5a:	8d a7       	std	Y+45, r24	; 0x2d
    1b5c:	9e a7       	std	Y+46, r25	; 0x2e
    1b5e:	af a7       	std	Y+47, r26	; 0x2f
    1b60:	b8 ab       	std	Y+48, r27	; 0x30
    1b62:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b64:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b68:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6a:	2b ea       	ldi	r18, 0xAB	; 171
    1b6c:	3a ea       	ldi	r19, 0xAA	; 170
    1b6e:	4a ea       	ldi	r20, 0xAA	; 170
    1b70:	5e e3       	ldi	r21, 0x3E	; 62
    1b72:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b78:	cb 01       	movw	r24, r22
    1b7a:	89 a7       	std	Y+41, r24	; 0x29
    1b7c:	9a a7       	std	Y+42, r25	; 0x2a
    1b7e:	ab a7       	std	Y+43, r26	; 0x2b
    1b80:	bc a7       	std	Y+44, r27	; 0x2c
    1b82:	69 a5       	ldd	r22, Y+41	; 0x29
    1b84:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1b96:	88 23       	and	r24, r24
	if (__tmp < 1.0)
    1b98:	1c f4       	brge	.+6      	; 0x1ba0 <lcd_send_command+0x5b4>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	88 a7       	std	Y+40, r24	; 0x28
    1b9e:	91 c0       	rjmp	.+290    	; 0x1cc2 <lcd_send_command+0x6d6>
    1ba0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ba2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ba4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	53 e4       	ldi	r21, 0x43	; 67
		__ticks = 1;
    1bb0:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
	else if (__tmp > 255)
    1bb6:	0c f0       	brlt	.+2      	; 0x1bba <lcd_send_command+0x5ce>
    1bb8:	7b c0       	rjmp	.+246    	; 0x1cb0 <lcd_send_command+0x6c4>
    1bba:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bbc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4a e7       	ldi	r20, 0x7A	; 122
    1bc8:	54 e4       	ldi	r21, 0x44	; 68
    1bca:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    1bce:	dc 01       	movw	r26, r24
	{
		_delay_ms(__us / 1000.0);
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	8c a3       	std	Y+36, r24	; 0x24
    1bd4:	9d a3       	std	Y+37, r25	; 0x25
    1bd6:	ae a3       	std	Y+38, r26	; 0x26
    1bd8:	bf a3       	std	Y+39, r27	; 0x27
    1bda:	6c a1       	ldd	r22, Y+36	; 0x24
    1bdc:	7d a1       	ldd	r23, Y+37	; 0x25
    1bde:	8e a1       	ldd	r24, Y+38	; 0x26
    1be0:	9f a1       	ldd	r25, Y+39	; 0x27
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a e7       	ldi	r20, 0x7A	; 122
    1be8:	53 e4       	ldi	r21, 0x43	; 67
    1bea:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	88 a3       	std	Y+32, r24	; 0x20
    1bf4:	99 a3       	std	Y+33, r25	; 0x21
    1bf6:	aa a3       	std	Y+34, r26	; 0x22
    1bf8:	bb a3       	std	Y+35, r27	; 0x23
    1bfa:	68 a1       	ldd	r22, Y+32	; 0x20
    1bfc:	79 a1       	ldd	r23, Y+33	; 0x21
    1bfe:	8a a1       	ldd	r24, Y+34	; 0x22
    1c00:	9b a1       	ldd	r25, Y+35	; 0x23
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1c0e:	88 23       	and	r24, r24
	if (__tmp < 1.0)
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <lcd_send_command+0x630>
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9f 8f       	std	Y+31, r25	; 0x1f
    1c18:	8e 8f       	std	Y+30, r24	; 0x1e
    1c1a:	3f c0       	rjmp	.+126    	; 0x1c9a <lcd_send_command+0x6ae>
    1c1c:	68 a1       	ldd	r22, Y+32	; 0x20
    1c1e:	79 a1       	ldd	r23, Y+33	; 0x21
    1c20:	8a a1       	ldd	r24, Y+34	; 0x22
    1c22:	9b a1       	ldd	r25, Y+35	; 0x23
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	57 e4       	ldi	r21, 0x47	; 71
    1c2c:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1c30:	18 16       	cp	r1, r24
	else if (__tmp > 65535)
    1c32:	4c f5       	brge	.+82     	; 0x1c86 <lcd_send_command+0x69a>
    1c34:	6c a1       	ldd	r22, Y+36	; 0x24
    1c36:	7d a1       	ldd	r23, Y+37	; 0x25
    1c38:	8e a1       	ldd	r24, Y+38	; 0x26
    1c3a:	9f a1       	ldd	r25, Y+39	; 0x27
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9f 8f       	std	Y+31, r25	; 0x1f
    1c5a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <lcd_send_command+0x690>
    1c5e:	89 e1       	ldi	r24, 0x19	; 25
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9d 8f       	std	Y+29, r25	; 0x1d
    1c64:	8c 8f       	std	Y+28, r24	; 0x1c
    1c66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c68:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <lcd_send_command+0x67e>
    1c6e:	9d 8f       	std	Y+29, r25	; 0x1d
    1c70:	8c 8f       	std	Y+28, r24	; 0x1c
    1c72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c74:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	9f 8f       	std	Y+31, r25	; 0x1f
    1c7a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f7       	brne	.-38     	; 0x1c5e <lcd_send_command+0x672>
    1c84:	24 c0       	rjmp	.+72     	; 0x1cce <lcd_send_command+0x6e2>
    1c86:	68 a1       	ldd	r22, Y+32	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	79 a1       	ldd	r23, Y+33	; 0x21
    1c8a:	8a a1       	ldd	r24, Y+34	; 0x22
    1c8c:	9b a1       	ldd	r25, Y+35	; 0x23
    1c8e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9f 8f       	std	Y+31, r25	; 0x1f
    1c98:	8e 8f       	std	Y+30, r24	; 0x1e
    1c9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c9e:	9b 8f       	std	Y+27, r25	; 0x1b
    1ca0:	8a 8f       	std	Y+26, r24	; 0x1a
    1ca2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ca4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <lcd_send_command+0x6ba>
    1caa:	9b 8f       	std	Y+27, r25	; 0x1b
    1cac:	8a 8f       	std	Y+26, r24	; 0x1a
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <lcd_send_command+0x6e2>
    1cb0:	69 a5       	ldd	r22, Y+41	; 0x29
    1cb2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	88 a7       	std	Y+40, r24	; 0x28
    1cc2:	88 a5       	ldd	r24, Y+40	; 0x28
    1cc4:	89 8f       	std	Y+25, r24	; 0x19
    1cc6:	89 8d       	ldd	r24, Y+25	; 0x19
    1cc8:	8a 95       	dec	r24
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <lcd_send_command+0x6dc>
    1ccc:	89 8f       	std	Y+25, r24	; 0x19
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ef 59       	subi	r30, 0x9F	; 159
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	01 90       	ld	r0, Z+
    1cd6:	f0 81       	ld	r31, Z
    1cd8:	e0 2d       	mov	r30, r0
    1cda:	81 81       	ldd	r24, Z+1	; 0x01
    1cdc:	fe 01       	movw	r30, r28
    1cde:	ef 59       	subi	r30, 0x9F	; 159
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	01 90       	ld	r0, Z+
	_delay_us(1);
	DIO_clear_pin(lcd->controlPort, (lcd->EN));
    1ce4:	f0 81       	ld	r31, Z
    1ce6:	e0 2d       	mov	r30, r0
    1ce8:	95 81       	ldd	r25, Z+5	; 0x05
    1cea:	69 2f       	mov	r22, r25
    1cec:	7a d8       	rcall	.-3852   	; 0xde2 <DIO_clear_pin>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a8 ec       	ldi	r26, 0xC8	; 200
    1cf4:	b2 e4       	ldi	r27, 0x42	; 66
    1cf6:	8d 8b       	std	Y+21, r24	; 0x15
    1cf8:	9e 8b       	std	Y+22, r25	; 0x16
    1cfa:	af 8b       	std	Y+23, r26	; 0x17
    1cfc:	b8 8f       	std	Y+24, r27	; 0x18
    1cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1d00:	7e 89       	ldd	r23, Y+22	; 0x16
    1d02:	8f 89       	ldd	r24, Y+23	; 0x17
    1d04:	98 8d       	ldd	r25, Y+24	; 0x18
    1d06:	2b ea       	ldi	r18, 0xAB	; 171
    1d08:	3a ea       	ldi	r19, 0xAA	; 170
    1d0a:	4a ea       	ldi	r20, 0xAA	; 170
    1d0c:	5e e3       	ldi	r21, 0x3E	; 62
    1d0e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d16:	89 8b       	std	Y+17, r24	; 0x11
    1d18:	9a 8b       	std	Y+18, r25	; 0x12
    1d1a:	ab 8b       	std	Y+19, r26	; 0x13
    1d1c:	bc 8b       	std	Y+20, r27	; 0x14
    1d1e:	69 89       	ldd	r22, Y+17	; 0x11
    1d20:	7a 89       	ldd	r23, Y+18	; 0x12
    1d22:	8b 89       	ldd	r24, Y+19	; 0x13
    1d24:	9c 89       	ldd	r25, Y+20	; 0x14
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	1c f4       	brge	.+6      	; 0x1d3c <lcd_send_command+0x750>
	if (__tmp < 1.0)
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	88 8b       	std	Y+16, r24	; 0x10
    1d3a:	91 c0       	rjmp	.+290    	; 0x1e5e <lcd_send_command+0x872>
    1d3c:	69 89       	ldd	r22, Y+17	; 0x11
    1d3e:	7a 89       	ldd	r23, Y+18	; 0x12
    1d40:	8b 89       	ldd	r24, Y+19	; 0x13
    1d42:	9c 89       	ldd	r25, Y+20	; 0x14
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	53 e4       	ldi	r21, 0x43	; 67
    1d4c:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
		__ticks = 1;
    1d50:	18 16       	cp	r1, r24
    1d52:	0c f0       	brlt	.+2      	; 0x1d56 <lcd_send_command+0x76a>
	else if (__tmp > 255)
    1d54:	7b c0       	rjmp	.+246    	; 0x1e4c <lcd_send_command+0x860>
    1d56:	6d 89       	ldd	r22, Y+21	; 0x15
    1d58:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a e7       	ldi	r20, 0x7A	; 122
    1d64:	54 e4       	ldi	r21, 0x44	; 68
    1d66:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
	{
		_delay_ms(__us / 1000.0);
    1d6e:	8c 87       	std	Y+12, r24	; 0x0c
    1d70:	9d 87       	std	Y+13, r25	; 0x0d
    1d72:	ae 87       	std	Y+14, r26	; 0x0e
    1d74:	bf 87       	std	Y+15, r27	; 0x0f
    1d76:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d78:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a e7       	ldi	r20, 0x7A	; 122
    1d84:	53 e4       	ldi	r21, 0x43	; 67
    1d86:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	88 87       	std	Y+8, r24	; 0x08
    1d90:	99 87       	std	Y+9, r25	; 0x09
    1d92:	aa 87       	std	Y+10, r26	; 0x0a
    1d94:	bb 87       	std	Y+11, r27	; 0x0b
    1d96:	68 85       	ldd	r22, Y+8	; 0x08
    1d98:	79 85       	ldd	r23, Y+9	; 0x09
    1d9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e8       	ldi	r20, 0x80	; 128
    1da4:	5f e3       	ldi	r21, 0x3F	; 63
    1da6:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1daa:	88 23       	and	r24, r24
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <lcd_send_command+0x7cc>
	if (__tmp < 1.0)
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9f 83       	std	Y+7, r25	; 0x07
    1db4:	8e 83       	std	Y+6, r24	; 0x06
    1db6:	3f c0       	rjmp	.+126    	; 0x1e36 <lcd_send_command+0x84a>
    1db8:	68 85       	ldd	r22, Y+8	; 0x08
    1dba:	79 85       	ldd	r23, Y+9	; 0x09
    1dbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
		__ticks = 1;
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	4c f5       	brge	.+82     	; 0x1e22 <lcd_send_command+0x836>
	else if (__tmp > 65535)
    1dd0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dd2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e2       	ldi	r20, 0x20	; 32
    1dde:	51 e4       	ldi	r21, 0x41	; 65
    1de0:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9f 83       	std	Y+7, r25	; 0x07
    1df6:	8e 83       	std	Y+6, r24	; 0x06
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <lcd_send_command+0x82c>
    1dfa:	89 e1       	ldi	r24, 0x19	; 25
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9d 83       	std	Y+5, r25	; 0x05
    1e00:	8c 83       	std	Y+4, r24	; 0x04
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	9d 81       	ldd	r25, Y+5	; 0x05
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <lcd_send_command+0x81a>
    1e0a:	9d 83       	std	Y+5, r25	; 0x05
    1e0c:	8c 83       	std	Y+4, r24	; 0x04
    1e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e10:	9f 81       	ldd	r25, Y+7	; 0x07
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	9f 83       	std	Y+7, r25	; 0x07
    1e16:	8e 83       	std	Y+6, r24	; 0x06
    1e18:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f7       	brne	.-38     	; 0x1dfa <lcd_send_command+0x80e>
    1e20:	24 c0       	rjmp	.+72     	; 0x1e6a <lcd_send_command+0x87e>
    1e22:	68 85       	ldd	r22, Y+8	; 0x08
    1e24:	79 85       	ldd	r23, Y+9	; 0x09
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e2a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	cb 01       	movw	r24, r22
    1e32:	9f 83       	std	Y+7, r25	; 0x07
    1e34:	8e 83       	std	Y+6, r24	; 0x06
    1e36:	8e 81       	ldd	r24, Y+6	; 0x06
    1e38:	9f 81       	ldd	r25, Y+7	; 0x07
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	9b 83       	std	Y+3, r25	; 0x03
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	9b 81       	ldd	r25, Y+3	; 0x03
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <lcd_send_command+0x856>
    1e46:	9b 83       	std	Y+3, r25	; 0x03
    1e48:	8a 83       	std	Y+2, r24	; 0x02
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <lcd_send_command+0x87e>
    1e4c:	69 89       	ldd	r22, Y+17	; 0x11
    1e4e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	88 8b       	std	Y+16, r24	; 0x10
    1e5e:	88 89       	ldd	r24, Y+16	; 0x10
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	8a 95       	dec	r24
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <lcd_send_command+0x878>
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	cd 59       	subi	r28, 0x9D	; 157
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	08 95       	ret

00001e82 <lcd_send_data>:
	_delay_us(100);
}
void lcd_send_data(gcfg_lcd_t * lcd, u8 data) {
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	c3 56       	subi	r28, 0x63	; 99
    1e90:	d0 40       	sbci	r29, 0x00	; 0
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ef 59       	subi	r30, 0x9F	; 159
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	ed 59       	subi	r30, 0x9D	; 157
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	60 83       	st	Z, r22
	DIO_set_pin(lcd->controlPort, (lcd->RS));
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ef 59       	subi	r30, 0x9F	; 159
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	01 90       	ld	r0, Z+
    1eb6:	f0 81       	ld	r31, Z
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	81 81       	ldd	r24, Z+1	; 0x01
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ef 59       	subi	r30, 0x9F	; 159
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	01 90       	ld	r0, Z+
    1ec4:	f0 81       	ld	r31, Z
    1ec6:	e0 2d       	mov	r30, r0
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	69 2f       	mov	r22, r25
    1ecc:	0e 94 cc 06 	call	0xd98	; 0xd98 <DIO_set_pin>
	DIO_clear_pin(lcd->controlPort, (lcd->RW));
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ef 59       	subi	r30, 0x9F	; 159
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	01 90       	ld	r0, Z+
    1ed8:	f0 81       	ld	r31, Z
    1eda:	e0 2d       	mov	r30, r0
    1edc:	81 81       	ldd	r24, Z+1	; 0x01
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ef 59       	subi	r30, 0x9F	; 159
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	01 90       	ld	r0, Z+
    1ee6:	f0 81       	ld	r31, Z
    1ee8:	e0 2d       	mov	r30, r0
    1eea:	94 81       	ldd	r25, Z+4	; 0x04
    1eec:	69 2f       	mov	r22, r25
    1eee:	0e 94 f1 06 	call	0xde2	; 0xde2 <DIO_clear_pin>

	if (lcd->nbit == n4BIT_MODE) {
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ef 59       	subi	r30, 0x9F	; 159
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	01 90       	ld	r0, Z+
    1efa:	f0 81       	ld	r31, Z
    1efc:	e0 2d       	mov	r30, r0
    1efe:	80 81       	ld	r24, Z
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <lcd_send_data+0x84>
    1f04:	54 c2       	rjmp	.+1192   	; 0x23ae <lcd_send_data+0x52c>
		DIO_write_port(lcd->dataPort, 0xF0, (data & 0xF0));
    1f06:	fe 01       	movw	r30, r28
    1f08:	ef 59       	subi	r30, 0x9F	; 159
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	01 90       	ld	r0, Z+
    1f0e:	f0 81       	ld	r31, Z
    1f10:	e0 2d       	mov	r30, r0
    1f12:	22 81       	ldd	r18, Z+2	; 0x02
    1f14:	fe 01       	movw	r30, r28
    1f16:	ed 59       	subi	r30, 0x9D	; 157
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	90 7f       	andi	r25, 0xF0	; 240
    1f20:	82 2f       	mov	r24, r18
    1f22:	60 ef       	ldi	r22, 0xF0	; 240
    1f24:	49 2f       	mov	r20, r25
    1f26:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_write_port>
		DIO_set_pin(lcd->controlPort, (lcd->EN));
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ef 59       	subi	r30, 0x9F	; 159
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	01 90       	ld	r0, Z+
    1f32:	f0 81       	ld	r31, Z
    1f34:	e0 2d       	mov	r30, r0
    1f36:	81 81       	ldd	r24, Z+1	; 0x01
    1f38:	fe 01       	movw	r30, r28
    1f3a:	ef 59       	subi	r30, 0x9F	; 159
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	01 90       	ld	r0, Z+
    1f40:	f0 81       	ld	r31, Z
    1f42:	e0 2d       	mov	r30, r0
    1f44:	95 81       	ldd	r25, Z+5	; 0x05
    1f46:	69 2f       	mov	r22, r25
    1f48:	0e 94 cc 06 	call	0xd98	; 0xd98 <DIO_set_pin>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e3 5a       	subi	r30, 0xA3	; 163
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 e8       	ldi	r26, 0x80	; 128
    1f58:	bf e3       	ldi	r27, 0x3F	; 63
    1f5a:	80 83       	st	Z, r24
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	a2 83       	std	Z+2, r26	; 0x02
    1f60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f62:	8e 01       	movw	r16, r28
    1f64:	07 5a       	subi	r16, 0xA7	; 167
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e3 5a       	subi	r30, 0xA3	; 163
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	2b ea       	ldi	r18, 0xAB	; 171
    1f78:	3a ea       	ldi	r19, 0xAA	; 170
    1f7a:	4a ea       	ldi	r20, 0xAA	; 170
    1f7c:	5e e3       	ldi	r21, 0x3E	; 62
    1f7e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	f8 01       	movw	r30, r16
    1f88:	80 83       	st	Z, r24
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	a2 83       	std	Z+2, r26	; 0x02
    1f8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f90:	fe 01       	movw	r30, r28
    1f92:	e7 5a       	subi	r30, 0xA7	; 167
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	60 81       	ld	r22, Z
    1f98:	71 81       	ldd	r23, Z+1	; 0x01
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	34 f4       	brge	.+12     	; 0x1fba <lcd_send_data+0x138>
		__ticks = 1;
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e8 5a       	subi	r30, 0xA8	; 168
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	80 83       	st	Z, r24
    1fb8:	e0 c0       	rjmp	.+448    	; 0x217a <lcd_send_data+0x2f8>
	else if (__tmp > 255)
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e7 5a       	subi	r30, 0xA7	; 167
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	53 e4       	ldi	r21, 0x43	; 67
    1fd0:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	0c f0       	brlt	.+2      	; 0x1fda <lcd_send_data+0x158>
    1fd8:	c0 c0       	rjmp	.+384    	; 0x215a <lcd_send_data+0x2d8>
	{
		_delay_ms(__us / 1000.0);
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e3 5a       	subi	r30, 0xA3	; 163
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	60 81       	ld	r22, Z
    1fe2:	71 81       	ldd	r23, Z+1	; 0x01
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a e7       	ldi	r20, 0x7A	; 122
    1fee:	54 e4       	ldi	r21, 0x44	; 68
    1ff0:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ec 5a       	subi	r30, 0xAC	; 172
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 83       	st	Z, r24
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	a2 83       	std	Z+2, r26	; 0x02
    2004:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2006:	8e 01       	movw	r16, r28
    2008:	00 5b       	subi	r16, 0xB0	; 176
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	fe 01       	movw	r30, r28
    200e:	ec 5a       	subi	r30, 0xAC	; 172
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4a e7       	ldi	r20, 0x7A	; 122
    2020:	53 e4       	ldi	r21, 0x43	; 67
    2022:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	f8 01       	movw	r30, r16
    202c:	80 83       	st	Z, r24
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	a2 83       	std	Z+2, r26	; 0x02
    2032:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2034:	fe 01       	movw	r30, r28
    2036:	e0 5b       	subi	r30, 0xB0	; 176
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5f e3       	ldi	r21, 0x3F	; 63
    204a:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    204e:	88 23       	and	r24, r24
    2050:	44 f4       	brge	.+16     	; 0x2062 <lcd_send_data+0x1e0>
		__ticks = 1;
    2052:	fe 01       	movw	r30, r28
    2054:	e2 5b       	subi	r30, 0xB2	; 178
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
    2060:	64 c0       	rjmp	.+200    	; 0x212a <lcd_send_data+0x2a8>
	else if (__tmp > 65535)
    2062:	fe 01       	movw	r30, r28
    2064:	e0 5b       	subi	r30, 0xB0	; 176
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	3f ef       	ldi	r19, 0xFF	; 255
    2074:	4f e7       	ldi	r20, 0x7F	; 127
    2076:	57 e4       	ldi	r21, 0x47	; 71
    2078:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    207c:	18 16       	cp	r1, r24
    207e:	0c f0       	brlt	.+2      	; 0x2082 <lcd_send_data+0x200>
    2080:	43 c0       	rjmp	.+134    	; 0x2108 <lcd_send_data+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	fe 01       	movw	r30, r28
    2084:	ec 5a       	subi	r30, 0xAC	; 172
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e2       	ldi	r20, 0x20	; 32
    2096:	51 e4       	ldi	r21, 0x41	; 65
    2098:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8e 01       	movw	r16, r28
    20a2:	02 5b       	subi	r16, 0xB2	; 178
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	f8 01       	movw	r30, r16
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	1f c0       	rjmp	.+62     	; 0x20f8 <lcd_send_data+0x276>
    20ba:	fe 01       	movw	r30, r28
    20bc:	e4 5b       	subi	r30, 0xB4	; 180
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	89 e1       	ldi	r24, 0x19	; 25
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c8:	fe 01       	movw	r30, r28
    20ca:	e4 5b       	subi	r30, 0xB4	; 180
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 81       	ld	r24, Z
    20d0:	91 81       	ldd	r25, Z+1	; 0x01
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <lcd_send_data+0x250>
    20d6:	fe 01       	movw	r30, r28
    20d8:	e4 5b       	subi	r30, 0xB4	; 180
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	de 01       	movw	r26, r28
    20e2:	a2 5b       	subi	r26, 0xB2	; 178
    20e4:	bf 4f       	sbci	r27, 0xFF	; 255
    20e6:	fe 01       	movw	r30, r28
    20e8:	e2 5b       	subi	r30, 0xB2	; 178
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	9c 93       	st	X, r25
    20f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	fe 01       	movw	r30, r28
    20fa:	e2 5b       	subi	r30, 0xB2	; 178
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	91 81       	ldd	r25, Z+1	; 0x01
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	d1 f6       	brne	.-76     	; 0x20ba <lcd_send_data+0x238>
    2106:	4b c0       	rjmp	.+150    	; 0x219e <lcd_send_data+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2108:	8e 01       	movw	r16, r28
    210a:	02 5b       	subi	r16, 0xB2	; 178
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	e0 5b       	subi	r30, 0xB0	; 176
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	f8 01       	movw	r30, r16
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	80 83       	st	Z, r24
    212a:	de 01       	movw	r26, r28
    212c:	a6 5b       	subi	r26, 0xB6	; 182
    212e:	bf 4f       	sbci	r27, 0xFF	; 255
    2130:	fe 01       	movw	r30, r28
    2132:	e2 5b       	subi	r30, 0xB2	; 178
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	9c 93       	st	X, r25
    213e:	8e 93       	st	-X, r24
    2140:	fe 01       	movw	r30, r28
    2142:	e6 5b       	subi	r30, 0xB6	; 182
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <lcd_send_data+0x2c8>
    214e:	fe 01       	movw	r30, r28
    2150:	e6 5b       	subi	r30, 0xB6	; 182
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
    2158:	22 c0       	rjmp	.+68     	; 0x219e <lcd_send_data+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    215a:	8e 01       	movw	r16, r28
    215c:	08 5a       	subi	r16, 0xA8	; 168
    215e:	1f 4f       	sbci	r17, 0xFF	; 255
    2160:	fe 01       	movw	r30, r28
    2162:	e7 5a       	subi	r30, 0xA7	; 167
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	f8 01       	movw	r30, r16
    2178:	80 83       	st	Z, r24
    217a:	de 01       	movw	r26, r28
    217c:	a7 5b       	subi	r26, 0xB7	; 183
    217e:	bf 4f       	sbci	r27, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	e8 5a       	subi	r30, 0xA8	; 168
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    218a:	fe 01       	movw	r30, r28
    218c:	e7 5b       	subi	r30, 0xB7	; 183
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	8a 95       	dec	r24
    2194:	f1 f7       	brne	.-4      	; 0x2192 <lcd_send_data+0x310>
    2196:	fe 01       	movw	r30, r28
    2198:	e7 5b       	subi	r30, 0xB7	; 183
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 83       	st	Z, r24
		_delay_us(1);
		DIO_clear_pin(lcd->controlPort, (lcd->EN));
    219e:	fe 01       	movw	r30, r28
    21a0:	ef 59       	subi	r30, 0x9F	; 159
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	01 90       	ld	r0, Z+
    21a6:	f0 81       	ld	r31, Z
    21a8:	e0 2d       	mov	r30, r0
    21aa:	81 81       	ldd	r24, Z+1	; 0x01
    21ac:	fe 01       	movw	r30, r28
    21ae:	ef 59       	subi	r30, 0x9F	; 159
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	01 90       	ld	r0, Z+
    21b4:	f0 81       	ld	r31, Z
    21b6:	e0 2d       	mov	r30, r0
    21b8:	95 81       	ldd	r25, Z+5	; 0x05
    21ba:	69 2f       	mov	r22, r25
    21bc:	0e 94 f1 06 	call	0xde2	; 0xde2 <DIO_clear_pin>
    21c0:	fe 01       	movw	r30, r28
    21c2:	eb 5b       	subi	r30, 0xBB	; 187
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a8 ec       	ldi	r26, 0xC8	; 200
    21cc:	b2 e4       	ldi	r27, 0x42	; 66
    21ce:	80 83       	st	Z, r24
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	a2 83       	std	Z+2, r26	; 0x02
    21d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21d6:	8e 01       	movw	r16, r28
    21d8:	0f 5b       	subi	r16, 0xBF	; 191
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	fe 01       	movw	r30, r28
    21de:	eb 5b       	subi	r30, 0xBB	; 187
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	2b ea       	ldi	r18, 0xAB	; 171
    21ec:	3a ea       	ldi	r19, 0xAA	; 170
    21ee:	4a ea       	ldi	r20, 0xAA	; 170
    21f0:	5e e3       	ldi	r21, 0x3E	; 62
    21f2:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	f8 01       	movw	r30, r16
    21fc:	80 83       	st	Z, r24
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	a2 83       	std	Z+2, r26	; 0x02
    2202:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2204:	fe 01       	movw	r30, r28
    2206:	ef 5b       	subi	r30, 0xBF	; 191
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	34 f4       	brge	.+12     	; 0x222e <lcd_send_data+0x3ac>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	fe 01       	movw	r30, r28
    2226:	e0 5c       	subi	r30, 0xC0	; 192
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 83       	st	Z, r24
    222c:	9d c0       	rjmp	.+314    	; 0x2368 <lcd_send_data+0x4e6>
	else if (__tmp > 255)
    222e:	fe 01       	movw	r30, r28
    2230:	ef 5b       	subi	r30, 0xBF	; 191
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	53 e4       	ldi	r21, 0x43	; 67
    2244:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	0c f0       	brlt	.+2      	; 0x224e <lcd_send_data+0x3cc>
    224c:	7e c0       	rjmp	.+252    	; 0x234a <lcd_send_data+0x4c8>
	{
		_delay_ms(__us / 1000.0);
    224e:	fe 01       	movw	r30, r28
    2250:	eb 5b       	subi	r30, 0xBB	; 187
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a e7       	ldi	r20, 0x7A	; 122
    2262:	54 e4       	ldi	r21, 0x44	; 68
    2264:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8c af       	std	Y+60, r24	; 0x3c
    226e:	9d af       	std	Y+61, r25	; 0x3d
    2270:	ae af       	std	Y+62, r26	; 0x3e
    2272:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	6c ad       	ldd	r22, Y+60	; 0x3c
    2276:	7d ad       	ldd	r23, Y+61	; 0x3d
    2278:	8e ad       	ldd	r24, Y+62	; 0x3e
    227a:	9f ad       	ldd	r25, Y+63	; 0x3f
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a e7       	ldi	r20, 0x7A	; 122
    2282:	53 e4       	ldi	r21, 0x43	; 67
    2284:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	88 af       	std	Y+56, r24	; 0x38
    228e:	99 af       	std	Y+57, r25	; 0x39
    2290:	aa af       	std	Y+58, r26	; 0x3a
    2292:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2294:	68 ad       	ldd	r22, Y+56	; 0x38
    2296:	79 ad       	ldd	r23, Y+57	; 0x39
    2298:	8a ad       	ldd	r24, Y+58	; 0x3a
    229a:	9b ad       	ldd	r25, Y+59	; 0x3b
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <lcd_send_data+0x434>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9f ab       	std	Y+55, r25	; 0x37
    22b2:	8e ab       	std	Y+54, r24	; 0x36
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <lcd_send_data+0x4b2>
	else if (__tmp > 65535)
    22b6:	68 ad       	ldd	r22, Y+56	; 0x38
    22b8:	79 ad       	ldd	r23, Y+57	; 0x39
    22ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    22bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <lcd_send_data+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    22d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    22d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    22d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9f ab       	std	Y+55, r25	; 0x37
    22f4:	8e ab       	std	Y+54, r24	; 0x36
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <lcd_send_data+0x494>
    22f8:	89 e1       	ldi	r24, 0x19	; 25
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9d ab       	std	Y+53, r25	; 0x35
    22fe:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2300:	8c a9       	ldd	r24, Y+52	; 0x34
    2302:	9d a9       	ldd	r25, Y+53	; 0x35
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <lcd_send_data+0x482>
    2308:	9d ab       	std	Y+53, r25	; 0x35
    230a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8e a9       	ldd	r24, Y+54	; 0x36
    230e:	9f a9       	ldd	r25, Y+55	; 0x37
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9f ab       	std	Y+55, r25	; 0x37
    2314:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8e a9       	ldd	r24, Y+54	; 0x36
    2318:	9f a9       	ldd	r25, Y+55	; 0x37
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <lcd_send_data+0x476>
    231e:	2d c0       	rjmp	.+90     	; 0x237a <lcd_send_data+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	68 ad       	ldd	r22, Y+56	; 0x38
    2322:	79 ad       	ldd	r23, Y+57	; 0x39
    2324:	8a ad       	ldd	r24, Y+58	; 0x3a
    2326:	9b ad       	ldd	r25, Y+59	; 0x3b
    2328:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9f ab       	std	Y+55, r25	; 0x37
    2332:	8e ab       	std	Y+54, r24	; 0x36
    2334:	8e a9       	ldd	r24, Y+54	; 0x36
    2336:	9f a9       	ldd	r25, Y+55	; 0x37
    2338:	9b ab       	std	Y+51, r25	; 0x33
    233a:	8a ab       	std	Y+50, r24	; 0x32
    233c:	8a a9       	ldd	r24, Y+50	; 0x32
    233e:	9b a9       	ldd	r25, Y+51	; 0x33
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <lcd_send_data+0x4be>
    2344:	9b ab       	std	Y+51, r25	; 0x33
    2346:	8a ab       	std	Y+50, r24	; 0x32
    2348:	18 c0       	rjmp	.+48     	; 0x237a <lcd_send_data+0x4f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    234a:	fe 01       	movw	r30, r28
    234c:	ef 5b       	subi	r30, 0xBF	; 191
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	fe 01       	movw	r30, r28
    2362:	e0 5c       	subi	r30, 0xC0	; 192
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	80 83       	st	Z, r24
    2368:	fe 01       	movw	r30, r28
    236a:	e0 5c       	subi	r30, 0xC0	; 192
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 81       	ld	r24, Z
    2370:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2372:	89 a9       	ldd	r24, Y+49	; 0x31
    2374:	8a 95       	dec	r24
    2376:	f1 f7       	brne	.-4      	; 0x2374 <lcd_send_data+0x4f2>
    2378:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(100);
		DIO_write_port(lcd->dataPort, 0xF0, (data & 0xF) << 4);
    237a:	fe 01       	movw	r30, r28
    237c:	ef 59       	subi	r30, 0x9F	; 159
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	01 90       	ld	r0, Z+
    2382:	f0 81       	ld	r31, Z
    2384:	e0 2d       	mov	r30, r0
    2386:	22 81       	ldd	r18, Z+2	; 0x02
    2388:	fe 01       	movw	r30, r28
    238a:	ed 59       	subi	r30, 0x9D	; 157
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	82 95       	swap	r24
    2396:	92 95       	swap	r25
    2398:	90 7f       	andi	r25, 0xF0	; 240
    239a:	98 27       	eor	r25, r24
    239c:	80 7f       	andi	r24, 0xF0	; 240
    239e:	98 27       	eor	r25, r24
    23a0:	98 2f       	mov	r25, r24
    23a2:	82 2f       	mov	r24, r18
    23a4:	60 ef       	ldi	r22, 0xF0	; 240
    23a6:	49 2f       	mov	r20, r25
    23a8:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_write_port>
    23ac:	17 c0       	rjmp	.+46     	; 0x23dc <lcd_send_data+0x55a>
	} else if (lcd->nbit == n8BIT_MODE) {
    23ae:	fe 01       	movw	r30, r28
    23b0:	ef 59       	subi	r30, 0x9F	; 159
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	01 90       	ld	r0, Z+
    23b6:	f0 81       	ld	r31, Z
    23b8:	e0 2d       	mov	r30, r0
    23ba:	80 81       	ld	r24, Z
    23bc:	82 30       	cpi	r24, 0x02	; 2
    23be:	71 f4       	brne	.+28     	; 0x23dc <lcd_send_data+0x55a>
		DIO_write_port(lcd->dataPort, 0xFF, data);
    23c0:	fe 01       	movw	r30, r28
    23c2:	ef 59       	subi	r30, 0x9F	; 159
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	01 90       	ld	r0, Z+
    23c8:	f0 81       	ld	r31, Z
    23ca:	e0 2d       	mov	r30, r0
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	fe 01       	movw	r30, r28
    23d0:	ed 59       	subi	r30, 0x9D	; 157
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	6f ef       	ldi	r22, 0xFF	; 255
    23d6:	40 81       	ld	r20, Z
    23d8:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_write_port>
	} else {
		// todo error
	}
	DIO_set_pin(lcd->controlPort, (lcd->EN));
    23dc:	fe 01       	movw	r30, r28
    23de:	ef 59       	subi	r30, 0x9F	; 159
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	01 90       	ld	r0, Z+
    23e4:	f0 81       	ld	r31, Z
    23e6:	e0 2d       	mov	r30, r0
    23e8:	81 81       	ldd	r24, Z+1	; 0x01
    23ea:	fe 01       	movw	r30, r28
    23ec:	ef 59       	subi	r30, 0x9F	; 159
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	01 90       	ld	r0, Z+
    23f2:	f0 81       	ld	r31, Z
    23f4:	e0 2d       	mov	r30, r0
    23f6:	95 81       	ldd	r25, Z+5	; 0x05
    23f8:	69 2f       	mov	r22, r25
    23fa:	0e 94 cc 06 	call	0xd98	; 0xd98 <DIO_set_pin>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e8       	ldi	r26, 0x80	; 128
    2404:	bf e3       	ldi	r27, 0x3F	; 63
    2406:	8d a7       	std	Y+45, r24	; 0x2d
    2408:	9e a7       	std	Y+46, r25	; 0x2e
    240a:	af a7       	std	Y+47, r26	; 0x2f
    240c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    240e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2410:	7e a5       	ldd	r23, Y+46	; 0x2e
    2412:	8f a5       	ldd	r24, Y+47	; 0x2f
    2414:	98 a9       	ldd	r25, Y+48	; 0x30
    2416:	2b ea       	ldi	r18, 0xAB	; 171
    2418:	3a ea       	ldi	r19, 0xAA	; 170
    241a:	4a ea       	ldi	r20, 0xAA	; 170
    241c:	5e e3       	ldi	r21, 0x3E	; 62
    241e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	89 a7       	std	Y+41, r24	; 0x29
    2428:	9a a7       	std	Y+42, r25	; 0x2a
    242a:	ab a7       	std	Y+43, r26	; 0x2b
    242c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    242e:	69 a5       	ldd	r22, Y+41	; 0x29
    2430:	7a a5       	ldd	r23, Y+42	; 0x2a
    2432:	8b a5       	ldd	r24, Y+43	; 0x2b
    2434:	9c a5       	ldd	r25, Y+44	; 0x2c
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	1c f4       	brge	.+6      	; 0x244c <lcd_send_data+0x5ca>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	88 a7       	std	Y+40, r24	; 0x28
    244a:	91 c0       	rjmp	.+290    	; 0x256e <lcd_send_data+0x6ec>
	else if (__tmp > 255)
    244c:	69 a5       	ldd	r22, Y+41	; 0x29
    244e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2450:	8b a5       	ldd	r24, Y+43	; 0x2b
    2452:	9c a5       	ldd	r25, Y+44	; 0x2c
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4f e7       	ldi	r20, 0x7F	; 127
    245a:	53 e4       	ldi	r21, 0x43	; 67
    245c:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    2460:	18 16       	cp	r1, r24
    2462:	0c f0       	brlt	.+2      	; 0x2466 <lcd_send_data+0x5e4>
    2464:	7b c0       	rjmp	.+246    	; 0x255c <lcd_send_data+0x6da>
	{
		_delay_ms(__us / 1000.0);
    2466:	6d a5       	ldd	r22, Y+45	; 0x2d
    2468:	7e a5       	ldd	r23, Y+46	; 0x2e
    246a:	8f a5       	ldd	r24, Y+47	; 0x2f
    246c:	98 a9       	ldd	r25, Y+48	; 0x30
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a e7       	ldi	r20, 0x7A	; 122
    2474:	54 e4       	ldi	r21, 0x44	; 68
    2476:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	8c a3       	std	Y+36, r24	; 0x24
    2480:	9d a3       	std	Y+37, r25	; 0x25
    2482:	ae a3       	std	Y+38, r26	; 0x26
    2484:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	6c a1       	ldd	r22, Y+36	; 0x24
    2488:	7d a1       	ldd	r23, Y+37	; 0x25
    248a:	8e a1       	ldd	r24, Y+38	; 0x26
    248c:	9f a1       	ldd	r25, Y+39	; 0x27
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	4a e7       	ldi	r20, 0x7A	; 122
    2494:	53 e4       	ldi	r21, 0x43	; 67
    2496:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	88 a3       	std	Y+32, r24	; 0x20
    24a0:	99 a3       	std	Y+33, r25	; 0x21
    24a2:	aa a3       	std	Y+34, r26	; 0x22
    24a4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24a6:	68 a1       	ldd	r22, Y+32	; 0x20
    24a8:	79 a1       	ldd	r23, Y+33	; 0x21
    24aa:	8a a1       	ldd	r24, Y+34	; 0x22
    24ac:	9b a1       	ldd	r25, Y+35	; 0x23
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <lcd_send_data+0x646>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9f 8f       	std	Y+31, r25	; 0x1f
    24c4:	8e 8f       	std	Y+30, r24	; 0x1e
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <lcd_send_data+0x6c4>
	else if (__tmp > 65535)
    24c8:	68 a1       	ldd	r22, Y+32	; 0x20
    24ca:	79 a1       	ldd	r23, Y+33	; 0x21
    24cc:	8a a1       	ldd	r24, Y+34	; 0x22
    24ce:	9b a1       	ldd	r25, Y+35	; 0x23
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	4c f5       	brge	.+82     	; 0x2532 <lcd_send_data+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	6c a1       	ldd	r22, Y+36	; 0x24
    24e2:	7d a1       	ldd	r23, Y+37	; 0x25
    24e4:	8e a1       	ldd	r24, Y+38	; 0x26
    24e6:	9f a1       	ldd	r25, Y+39	; 0x27
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9f 8f       	std	Y+31, r25	; 0x1f
    2506:	8e 8f       	std	Y+30, r24	; 0x1e
    2508:	0f c0       	rjmp	.+30     	; 0x2528 <lcd_send_data+0x6a6>
    250a:	89 e1       	ldi	r24, 0x19	; 25
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9d 8f       	std	Y+29, r25	; 0x1d
    2510:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2512:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2514:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <lcd_send_data+0x694>
    251a:	9d 8f       	std	Y+29, r25	; 0x1d
    251c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2520:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	9f 8f       	std	Y+31, r25	; 0x1f
    2526:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	8e 8d       	ldd	r24, Y+30	; 0x1e
    252a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	69 f7       	brne	.-38     	; 0x250a <lcd_send_data+0x688>
    2530:	24 c0       	rjmp	.+72     	; 0x257a <lcd_send_data+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2532:	68 a1       	ldd	r22, Y+32	; 0x20
    2534:	79 a1       	ldd	r23, Y+33	; 0x21
    2536:	8a a1       	ldd	r24, Y+34	; 0x22
    2538:	9b a1       	ldd	r25, Y+35	; 0x23
    253a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9f 8f       	std	Y+31, r25	; 0x1f
    2544:	8e 8f       	std	Y+30, r24	; 0x1e
    2546:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2548:	9f 8d       	ldd	r25, Y+31	; 0x1f
    254a:	9b 8f       	std	Y+27, r25	; 0x1b
    254c:	8a 8f       	std	Y+26, r24	; 0x1a
    254e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2550:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <lcd_send_data+0x6d0>
    2556:	9b 8f       	std	Y+27, r25	; 0x1b
    2558:	8a 8f       	std	Y+26, r24	; 0x1a
    255a:	0f c0       	rjmp	.+30     	; 0x257a <lcd_send_data+0x6f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    255c:	69 a5       	ldd	r22, Y+41	; 0x29
    255e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2560:	8b a5       	ldd	r24, Y+43	; 0x2b
    2562:	9c a5       	ldd	r25, Y+44	; 0x2c
    2564:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	88 a7       	std	Y+40, r24	; 0x28
    256e:	88 a5       	ldd	r24, Y+40	; 0x28
    2570:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2572:	89 8d       	ldd	r24, Y+25	; 0x19
    2574:	8a 95       	dec	r24
    2576:	f1 f7       	brne	.-4      	; 0x2574 <lcd_send_data+0x6f2>
    2578:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_clear_pin(lcd->controlPort, (lcd->EN));
    257a:	fe 01       	movw	r30, r28
    257c:	ef 59       	subi	r30, 0x9F	; 159
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	01 90       	ld	r0, Z+
    2582:	f0 81       	ld	r31, Z
    2584:	e0 2d       	mov	r30, r0
    2586:	81 81       	ldd	r24, Z+1	; 0x01
    2588:	fe 01       	movw	r30, r28
    258a:	ef 59       	subi	r30, 0x9F	; 159
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	01 90       	ld	r0, Z+
    2590:	f0 81       	ld	r31, Z
    2592:	e0 2d       	mov	r30, r0
    2594:	95 81       	ldd	r25, Z+5	; 0x05
    2596:	69 2f       	mov	r22, r25
    2598:	0e 94 f1 06 	call	0xde2	; 0xde2 <DIO_clear_pin>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a8 ec       	ldi	r26, 0xC8	; 200
    25a2:	b2 e4       	ldi	r27, 0x42	; 66
    25a4:	8d 8b       	std	Y+21, r24	; 0x15
    25a6:	9e 8b       	std	Y+22, r25	; 0x16
    25a8:	af 8b       	std	Y+23, r26	; 0x17
    25aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ac:	6d 89       	ldd	r22, Y+21	; 0x15
    25ae:	7e 89       	ldd	r23, Y+22	; 0x16
    25b0:	8f 89       	ldd	r24, Y+23	; 0x17
    25b2:	98 8d       	ldd	r25, Y+24	; 0x18
    25b4:	2b ea       	ldi	r18, 0xAB	; 171
    25b6:	3a ea       	ldi	r19, 0xAA	; 170
    25b8:	4a ea       	ldi	r20, 0xAA	; 170
    25ba:	5e e3       	ldi	r21, 0x3E	; 62
    25bc:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	89 8b       	std	Y+17, r24	; 0x11
    25c6:	9a 8b       	std	Y+18, r25	; 0x12
    25c8:	ab 8b       	std	Y+19, r26	; 0x13
    25ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25cc:	69 89       	ldd	r22, Y+17	; 0x11
    25ce:	7a 89       	ldd	r23, Y+18	; 0x12
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	1c f4       	brge	.+6      	; 0x25ea <lcd_send_data+0x768>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	88 8b       	std	Y+16, r24	; 0x10
    25e8:	91 c0       	rjmp	.+290    	; 0x270c <lcd_send_data+0x88a>
	else if (__tmp > 255)
    25ea:	69 89       	ldd	r22, Y+17	; 0x11
    25ec:	7a 89       	ldd	r23, Y+18	; 0x12
    25ee:	8b 89       	ldd	r24, Y+19	; 0x13
    25f0:	9c 89       	ldd	r25, Y+20	; 0x14
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	53 e4       	ldi	r21, 0x43	; 67
    25fa:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	0c f0       	brlt	.+2      	; 0x2604 <lcd_send_data+0x782>
    2602:	7b c0       	rjmp	.+246    	; 0x26fa <lcd_send_data+0x878>
	{
		_delay_ms(__us / 1000.0);
    2604:	6d 89       	ldd	r22, Y+21	; 0x15
    2606:	7e 89       	ldd	r23, Y+22	; 0x16
    2608:	8f 89       	ldd	r24, Y+23	; 0x17
    260a:	98 8d       	ldd	r25, Y+24	; 0x18
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a e7       	ldi	r20, 0x7A	; 122
    2612:	54 e4       	ldi	r21, 0x44	; 68
    2614:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8c 87       	std	Y+12, r24	; 0x0c
    261e:	9d 87       	std	Y+13, r25	; 0x0d
    2620:	ae 87       	std	Y+14, r26	; 0x0e
    2622:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2624:	6c 85       	ldd	r22, Y+12	; 0x0c
    2626:	7d 85       	ldd	r23, Y+13	; 0x0d
    2628:	8e 85       	ldd	r24, Y+14	; 0x0e
    262a:	9f 85       	ldd	r25, Y+15	; 0x0f
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	53 e4       	ldi	r21, 0x43	; 67
    2634:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	88 87       	std	Y+8, r24	; 0x08
    263e:	99 87       	std	Y+9, r25	; 0x09
    2640:	aa 87       	std	Y+10, r26	; 0x0a
    2642:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2644:	68 85       	ldd	r22, Y+8	; 0x08
    2646:	79 85       	ldd	r23, Y+9	; 0x09
    2648:	8a 85       	ldd	r24, Y+10	; 0x0a
    264a:	9b 85       	ldd	r25, Y+11	; 0x0b
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	2c f4       	brge	.+10     	; 0x2666 <lcd_send_data+0x7e4>
		__ticks = 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9f 83       	std	Y+7, r25	; 0x07
    2662:	8e 83       	std	Y+6, r24	; 0x06
    2664:	3f c0       	rjmp	.+126    	; 0x26e4 <lcd_send_data+0x862>
	else if (__tmp > 65535)
    2666:	68 85       	ldd	r22, Y+8	; 0x08
    2668:	79 85       	ldd	r23, Y+9	; 0x09
    266a:	8a 85       	ldd	r24, Y+10	; 0x0a
    266c:	9b 85       	ldd	r25, Y+11	; 0x0b
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	4c f5       	brge	.+82     	; 0x26d0 <lcd_send_data+0x84e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2680:	7d 85       	ldd	r23, Y+13	; 0x0d
    2682:	8e 85       	ldd	r24, Y+14	; 0x0e
    2684:	9f 85       	ldd	r25, Y+15	; 0x0f
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e2       	ldi	r20, 0x20	; 32
    268c:	51 e4       	ldi	r21, 0x41	; 65
    268e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9f 83       	std	Y+7, r25	; 0x07
    26a4:	8e 83       	std	Y+6, r24	; 0x06
    26a6:	0f c0       	rjmp	.+30     	; 0x26c6 <lcd_send_data+0x844>
    26a8:	89 e1       	ldi	r24, 0x19	; 25
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9d 83       	std	Y+5, r25	; 0x05
    26ae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26b0:	8c 81       	ldd	r24, Y+4	; 0x04
    26b2:	9d 81       	ldd	r25, Y+5	; 0x05
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <lcd_send_data+0x832>
    26b8:	9d 83       	std	Y+5, r25	; 0x05
    26ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26bc:	8e 81       	ldd	r24, Y+6	; 0x06
    26be:	9f 81       	ldd	r25, Y+7	; 0x07
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	9f 83       	std	Y+7, r25	; 0x07
    26c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	8e 81       	ldd	r24, Y+6	; 0x06
    26c8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <lcd_send_data+0x826>
    26ce:	24 c0       	rjmp	.+72     	; 0x2718 <lcd_send_data+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d0:	68 85       	ldd	r22, Y+8	; 0x08
    26d2:	79 85       	ldd	r23, Y+9	; 0x09
    26d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9f 83       	std	Y+7, r25	; 0x07
    26e2:	8e 83       	std	Y+6, r24	; 0x06
    26e4:	8e 81       	ldd	r24, Y+6	; 0x06
    26e6:	9f 81       	ldd	r25, Y+7	; 0x07
    26e8:	9b 83       	std	Y+3, r25	; 0x03
    26ea:	8a 83       	std	Y+2, r24	; 0x02
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <lcd_send_data+0x86e>
    26f4:	9b 83       	std	Y+3, r25	; 0x03
    26f6:	8a 83       	std	Y+2, r24	; 0x02
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <lcd_send_data+0x896>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26fa:	69 89       	ldd	r22, Y+17	; 0x11
    26fc:	7a 89       	ldd	r23, Y+18	; 0x12
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	88 8b       	std	Y+16, r24	; 0x10
    270c:	88 89       	ldd	r24, Y+16	; 0x10
    270e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	8a 95       	dec	r24
    2714:	f1 f7       	brne	.-4      	; 0x2712 <lcd_send_data+0x890>
    2716:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    2718:	cd 59       	subi	r28, 0x9D	; 157
    271a:	df 4f       	sbci	r29, 0xFF	; 255
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	08 95       	ret

00002730 <lcd_gotoxy>:

static const u8 firstCharAdr[] = { 0x80, 0xC0 };
void lcd_gotoxy(gcfg_lcd_t * lcd, u8 x, u8 y) {
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <lcd_gotoxy+0x6>
    2736:	00 d0       	rcall	.+0      	; 0x2738 <lcd_gotoxy+0x8>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	6b 83       	std	Y+3, r22	; 0x03
    2742:	4c 83       	std	Y+4, r20	; 0x04
//	if (x > 0&&) todo
	//00-27h , 40h-67h

	lcd_send_command(lcd, firstCharAdr[y - 1] + x - 1);
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	fc 01       	movw	r30, r24
    274e:	e0 59       	subi	r30, 0x90	; 144
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	90 81       	ld	r25, Z
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	89 0f       	add	r24, r25
    2758:	28 2f       	mov	r18, r24
    275a:	21 50       	subi	r18, 0x01	; 1
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	62 2f       	mov	r22, r18
    2762:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <lcd_send_command>
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <lcd_print>:
void lcd_print(gcfg_lcd_t * lcd, char * str) {
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <lcd_print+0x6>
    277a:	00 d0       	rcall	.+0      	; 0x277c <lcd_print+0x8>
    277c:	0f 92       	push	r0
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	9b 83       	std	Y+3, r25	; 0x03
    2784:	8a 83       	std	Y+2, r24	; 0x02
    2786:	7d 83       	std	Y+5, r23	; 0x05
    2788:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    278a:	19 82       	std	Y+1, r1	; 0x01
    278c:	10 c0       	rjmp	.+32     	; 0x27ae <lcd_print+0x3a>
	while (str[i] != '\0')
		lcd_send_data(lcd, str[i++]);
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
    2796:	9d 81       	ldd	r25, Y+5	; 0x05
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	20 81       	ld	r18, Z
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	8f 5f       	subi	r24, 0xFF	; 255
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	9b 81       	ldd	r25, Y+3	; 0x03
    27aa:	62 2f       	mov	r22, r18
    27ac:	6a db       	rcall	.-2348   	; 0x1e82 <lcd_send_data>
    27ae:	89 81       	ldd	r24, Y+1	; 0x01

	lcd_send_command(lcd, firstCharAdr[y - 1] + x - 1);
}
void lcd_print(gcfg_lcd_t * lcd, char * str) {
	u8 i = 0;
	while (str[i] != '\0')
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	8c 81       	ldd	r24, Y+4	; 0x04
    27b6:	9d 81       	ldd	r25, Y+5	; 0x05
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 0f       	add	r30, r18
    27bc:	f3 1f       	adc	r31, r19
    27be:	80 81       	ld	r24, Z
    27c0:	88 23       	and	r24, r24
    27c2:	29 f7       	brne	.-54     	; 0x278e <lcd_print+0x1a>
    27c4:	0f 90       	pop	r0
		lcd_send_data(lcd, str[i++]);
}
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <__prologue_saves__>:
    27d4:	2f 92       	push	r2
    27d6:	3f 92       	push	r3
    27d8:	4f 92       	push	r4
    27da:	5f 92       	push	r5
    27dc:	6f 92       	push	r6
    27de:	7f 92       	push	r7
    27e0:	8f 92       	push	r8
    27e2:	9f 92       	push	r9
    27e4:	af 92       	push	r10
    27e6:	bf 92       	push	r11
    27e8:	cf 92       	push	r12
    27ea:	df 92       	push	r13
    27ec:	ef 92       	push	r14
    27ee:	ff 92       	push	r15
    27f0:	0f 93       	push	r16
    27f2:	1f 93       	push	r17
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	ca 1b       	sub	r28, r26
    27fe:	db 0b       	sbc	r29, r27
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	09 94       	ijmp

0000280c <__epilogue_restores__>:
    280c:	2a 88       	ldd	r2, Y+18	; 0x12
    280e:	39 88       	ldd	r3, Y+17	; 0x11
    2810:	48 88       	ldd	r4, Y+16	; 0x10
    2812:	5f 84       	ldd	r5, Y+15	; 0x0f
    2814:	6e 84       	ldd	r6, Y+14	; 0x0e
    2816:	7d 84       	ldd	r7, Y+13	; 0x0d
    2818:	8c 84       	ldd	r8, Y+12	; 0x0c
    281a:	9b 84       	ldd	r9, Y+11	; 0x0b
    281c:	aa 84       	ldd	r10, Y+10	; 0x0a
    281e:	b9 84       	ldd	r11, Y+9	; 0x09
    2820:	c8 84       	ldd	r12, Y+8	; 0x08
    2822:	df 80       	ldd	r13, Y+7	; 0x07
    2824:	ee 80       	ldd	r14, Y+6	; 0x06
    2826:	fd 80       	ldd	r15, Y+5	; 0x05
    2828:	0c 81       	ldd	r16, Y+4	; 0x04
    282a:	1b 81       	ldd	r17, Y+3	; 0x03
    282c:	aa 81       	ldd	r26, Y+2	; 0x02
    282e:	b9 81       	ldd	r27, Y+1	; 0x01
    2830:	ce 0f       	add	r28, r30
    2832:	d1 1d       	adc	r29, r1
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	ed 01       	movw	r28, r26
    2840:	08 95       	ret

00002842 <sprintf>:
    2842:	ae e0       	ldi	r26, 0x0E	; 14
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e6 e2       	ldi	r30, 0x26	; 38
    2848:	f4 e1       	ldi	r31, 0x14	; 20
    284a:	d2 cf       	rjmp	.-92     	; 0x27f0 <__prologue_saves__+0x1c>
    284c:	0d 89       	ldd	r16, Y+21	; 0x15
    284e:	1e 89       	ldd	r17, Y+22	; 0x16
    2850:	86 e0       	ldi	r24, 0x06	; 6
    2852:	8c 83       	std	Y+4, r24	; 0x04
    2854:	1a 83       	std	Y+2, r17	; 0x02
    2856:	09 83       	std	Y+1, r16	; 0x01
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	9f e7       	ldi	r25, 0x7F	; 127
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	9e 01       	movw	r18, r28
    2862:	27 5e       	subi	r18, 0xE7	; 231
    2864:	3f 4f       	sbci	r19, 0xFF	; 255
    2866:	ce 01       	movw	r24, r28
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	6f 89       	ldd	r22, Y+23	; 0x17
    286c:	78 8d       	ldd	r23, Y+24	; 0x18
    286e:	a9 01       	movw	r20, r18
    2870:	09 d0       	rcall	.+18     	; 0x2884 <vfprintf>
    2872:	2f 81       	ldd	r18, Y+7	; 0x07
    2874:	38 85       	ldd	r19, Y+8	; 0x08
    2876:	02 0f       	add	r16, r18
    2878:	13 1f       	adc	r17, r19
    287a:	f8 01       	movw	r30, r16
    287c:	10 82       	st	Z, r1
    287e:	2e 96       	adiw	r28, 0x0e	; 14
    2880:	e4 e0       	ldi	r30, 0x04	; 4
    2882:	d2 cf       	rjmp	.-92     	; 0x2828 <__epilogue_restores__+0x1c>

00002884 <vfprintf>:
    2884:	ab e0       	ldi	r26, 0x0B	; 11
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e7 e4       	ldi	r30, 0x47	; 71
    288a:	f4 e1       	ldi	r31, 0x14	; 20
    288c:	a3 cf       	rjmp	.-186    	; 0x27d4 <__prologue_saves__>
    288e:	3c 01       	movw	r6, r24
    2890:	2b 01       	movw	r4, r22
    2892:	5a 01       	movw	r10, r20
    2894:	fc 01       	movw	r30, r24
    2896:	17 82       	std	Z+7, r1	; 0x07
    2898:	16 82       	std	Z+6, r1	; 0x06
    289a:	83 81       	ldd	r24, Z+3	; 0x03
    289c:	81 fd       	sbrc	r24, 1
    289e:	03 c0       	rjmp	.+6      	; 0x28a6 <vfprintf+0x22>
    28a0:	6f ef       	ldi	r22, 0xFF	; 255
    28a2:	7f ef       	ldi	r23, 0xFF	; 255
    28a4:	b9 c1       	rjmp	.+882    	; 0x2c18 <vfprintf+0x394>
    28a6:	9a e0       	ldi	r25, 0x0A	; 10
    28a8:	89 2e       	mov	r8, r25
    28aa:	1e 01       	movw	r2, r28
    28ac:	08 94       	sec
    28ae:	21 1c       	adc	r2, r1
    28b0:	31 1c       	adc	r3, r1
    28b2:	f3 01       	movw	r30, r6
    28b4:	23 81       	ldd	r18, Z+3	; 0x03
    28b6:	f2 01       	movw	r30, r4
    28b8:	23 fd       	sbrc	r18, 3
    28ba:	85 91       	lpm	r24, Z+
    28bc:	23 ff       	sbrs	r18, 3
    28be:	81 91       	ld	r24, Z+
    28c0:	2f 01       	movw	r4, r30
    28c2:	88 23       	and	r24, r24
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <vfprintf+0x44>
    28c6:	a5 c1       	rjmp	.+842    	; 0x2c12 <vfprintf+0x38e>
    28c8:	85 32       	cpi	r24, 0x25	; 37
    28ca:	39 f4       	brne	.+14     	; 0x28da <vfprintf+0x56>
    28cc:	23 fd       	sbrc	r18, 3
    28ce:	85 91       	lpm	r24, Z+
    28d0:	23 ff       	sbrs	r18, 3
    28d2:	81 91       	ld	r24, Z+
    28d4:	2f 01       	movw	r4, r30
    28d6:	85 32       	cpi	r24, 0x25	; 37
    28d8:	21 f4       	brne	.+8      	; 0x28e2 <vfprintf+0x5e>
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	b3 01       	movw	r22, r6
    28de:	b6 d1       	rcall	.+876    	; 0x2c4c <fputc>
    28e0:	e8 cf       	rjmp	.-48     	; 0x28b2 <vfprintf+0x2e>
    28e2:	98 2f       	mov	r25, r24
    28e4:	ff 24       	eor	r15, r15
    28e6:	ee 24       	eor	r14, r14
    28e8:	99 24       	eor	r9, r9
    28ea:	ff e1       	ldi	r31, 0x1F	; 31
    28ec:	ff 15       	cp	r31, r15
    28ee:	d0 f0       	brcs	.+52     	; 0x2924 <vfprintf+0xa0>
    28f0:	9b 32       	cpi	r25, 0x2B	; 43
    28f2:	69 f0       	breq	.+26     	; 0x290e <vfprintf+0x8a>
    28f4:	9c 32       	cpi	r25, 0x2C	; 44
    28f6:	28 f4       	brcc	.+10     	; 0x2902 <vfprintf+0x7e>
    28f8:	90 32       	cpi	r25, 0x20	; 32
    28fa:	59 f0       	breq	.+22     	; 0x2912 <vfprintf+0x8e>
    28fc:	93 32       	cpi	r25, 0x23	; 35
    28fe:	91 f4       	brne	.+36     	; 0x2924 <vfprintf+0xa0>
    2900:	0e c0       	rjmp	.+28     	; 0x291e <vfprintf+0x9a>
    2902:	9d 32       	cpi	r25, 0x2D	; 45
    2904:	49 f0       	breq	.+18     	; 0x2918 <vfprintf+0x94>
    2906:	90 33       	cpi	r25, 0x30	; 48
    2908:	69 f4       	brne	.+26     	; 0x2924 <vfprintf+0xa0>
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	24 c0       	rjmp	.+72     	; 0x2956 <vfprintf+0xd2>
    290e:	52 e0       	ldi	r21, 0x02	; 2
    2910:	f5 2a       	or	r15, r21
    2912:	84 e0       	ldi	r24, 0x04	; 4
    2914:	f8 2a       	or	r15, r24
    2916:	28 c0       	rjmp	.+80     	; 0x2968 <vfprintf+0xe4>
    2918:	98 e0       	ldi	r25, 0x08	; 8
    291a:	f9 2a       	or	r15, r25
    291c:	25 c0       	rjmp	.+74     	; 0x2968 <vfprintf+0xe4>
    291e:	e0 e1       	ldi	r30, 0x10	; 16
    2920:	fe 2a       	or	r15, r30
    2922:	22 c0       	rjmp	.+68     	; 0x2968 <vfprintf+0xe4>
    2924:	f7 fc       	sbrc	r15, 7
    2926:	29 c0       	rjmp	.+82     	; 0x297a <vfprintf+0xf6>
    2928:	89 2f       	mov	r24, r25
    292a:	80 53       	subi	r24, 0x30	; 48
    292c:	8a 30       	cpi	r24, 0x0A	; 10
    292e:	70 f4       	brcc	.+28     	; 0x294c <vfprintf+0xc8>
    2930:	f6 fe       	sbrs	r15, 6
    2932:	05 c0       	rjmp	.+10     	; 0x293e <vfprintf+0xba>
    2934:	98 9c       	mul	r9, r8
    2936:	90 2c       	mov	r9, r0
    2938:	11 24       	eor	r1, r1
    293a:	98 0e       	add	r9, r24
    293c:	15 c0       	rjmp	.+42     	; 0x2968 <vfprintf+0xe4>
    293e:	e8 9c       	mul	r14, r8
    2940:	e0 2c       	mov	r14, r0
    2942:	11 24       	eor	r1, r1
    2944:	e8 0e       	add	r14, r24
    2946:	f0 e2       	ldi	r31, 0x20	; 32
    2948:	ff 2a       	or	r15, r31
    294a:	0e c0       	rjmp	.+28     	; 0x2968 <vfprintf+0xe4>
    294c:	9e 32       	cpi	r25, 0x2E	; 46
    294e:	29 f4       	brne	.+10     	; 0x295a <vfprintf+0xd6>
    2950:	f6 fc       	sbrc	r15, 6
    2952:	5f c1       	rjmp	.+702    	; 0x2c12 <vfprintf+0x38e>
    2954:	40 e4       	ldi	r20, 0x40	; 64
    2956:	f4 2a       	or	r15, r20
    2958:	07 c0       	rjmp	.+14     	; 0x2968 <vfprintf+0xe4>
    295a:	9c 36       	cpi	r25, 0x6C	; 108
    295c:	19 f4       	brne	.+6      	; 0x2964 <vfprintf+0xe0>
    295e:	50 e8       	ldi	r21, 0x80	; 128
    2960:	f5 2a       	or	r15, r21
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <vfprintf+0xe4>
    2964:	98 36       	cpi	r25, 0x68	; 104
    2966:	49 f4       	brne	.+18     	; 0x297a <vfprintf+0xf6>
    2968:	f2 01       	movw	r30, r4
    296a:	23 fd       	sbrc	r18, 3
    296c:	95 91       	lpm	r25, Z+
    296e:	23 ff       	sbrs	r18, 3
    2970:	91 91       	ld	r25, Z+
    2972:	2f 01       	movw	r4, r30
    2974:	99 23       	and	r25, r25
    2976:	09 f0       	breq	.+2      	; 0x297a <vfprintf+0xf6>
    2978:	b8 cf       	rjmp	.-144    	; 0x28ea <vfprintf+0x66>
    297a:	89 2f       	mov	r24, r25
    297c:	85 54       	subi	r24, 0x45	; 69
    297e:	83 30       	cpi	r24, 0x03	; 3
    2980:	18 f0       	brcs	.+6      	; 0x2988 <vfprintf+0x104>
    2982:	80 52       	subi	r24, 0x20	; 32
    2984:	83 30       	cpi	r24, 0x03	; 3
    2986:	38 f4       	brcc	.+14     	; 0x2996 <vfprintf+0x112>
    2988:	44 e0       	ldi	r20, 0x04	; 4
    298a:	50 e0       	ldi	r21, 0x00	; 0
    298c:	a4 0e       	add	r10, r20
    298e:	b5 1e       	adc	r11, r21
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	59 83       	std	Y+1, r21	; 0x01
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <vfprintf+0x130>
    2996:	93 36       	cpi	r25, 0x63	; 99
    2998:	31 f0       	breq	.+12     	; 0x29a6 <vfprintf+0x122>
    299a:	93 37       	cpi	r25, 0x73	; 115
    299c:	79 f0       	breq	.+30     	; 0x29bc <vfprintf+0x138>
    299e:	93 35       	cpi	r25, 0x53	; 83
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <vfprintf+0x120>
    29a2:	52 c0       	rjmp	.+164    	; 0x2a48 <vfprintf+0x1c4>
    29a4:	1f c0       	rjmp	.+62     	; 0x29e4 <vfprintf+0x160>
    29a6:	f5 01       	movw	r30, r10
    29a8:	80 81       	ld	r24, Z
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	42 e0       	ldi	r20, 0x02	; 2
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	a4 0e       	add	r10, r20
    29b2:	b5 1e       	adc	r11, r21
    29b4:	61 01       	movw	r12, r2
    29b6:	01 e0       	ldi	r16, 0x01	; 1
    29b8:	10 e0       	ldi	r17, 0x00	; 0
    29ba:	11 c0       	rjmp	.+34     	; 0x29de <vfprintf+0x15a>
    29bc:	f5 01       	movw	r30, r10
    29be:	c0 80       	ld	r12, Z
    29c0:	d1 80       	ldd	r13, Z+1	; 0x01
    29c2:	f6 fc       	sbrc	r15, 6
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <vfprintf+0x148>
    29c6:	6f ef       	ldi	r22, 0xFF	; 255
    29c8:	7f ef       	ldi	r23, 0xFF	; 255
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <vfprintf+0x14c>
    29cc:	69 2d       	mov	r22, r9
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	42 e0       	ldi	r20, 0x02	; 2
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	a4 0e       	add	r10, r20
    29d6:	b5 1e       	adc	r11, r21
    29d8:	c6 01       	movw	r24, r12
    29da:	2d d1       	rcall	.+602    	; 0x2c36 <strnlen>
    29dc:	8c 01       	movw	r16, r24
    29de:	5f e7       	ldi	r21, 0x7F	; 127
    29e0:	f5 22       	and	r15, r21
    29e2:	13 c0       	rjmp	.+38     	; 0x2a0a <vfprintf+0x186>
    29e4:	f5 01       	movw	r30, r10
    29e6:	c0 80       	ld	r12, Z
    29e8:	d1 80       	ldd	r13, Z+1	; 0x01
    29ea:	f6 fc       	sbrc	r15, 6
    29ec:	03 c0       	rjmp	.+6      	; 0x29f4 <vfprintf+0x170>
    29ee:	6f ef       	ldi	r22, 0xFF	; 255
    29f0:	7f ef       	ldi	r23, 0xFF	; 255
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <vfprintf+0x174>
    29f4:	69 2d       	mov	r22, r9
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	42 e0       	ldi	r20, 0x02	; 2
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	a4 0e       	add	r10, r20
    29fe:	b5 1e       	adc	r11, r21
    2a00:	c6 01       	movw	r24, r12
    2a02:	0e d1       	rcall	.+540    	; 0x2c20 <strnlen_P>
    2a04:	8c 01       	movw	r16, r24
    2a06:	50 e8       	ldi	r21, 0x80	; 128
    2a08:	f5 2a       	or	r15, r21
    2a0a:	f3 fe       	sbrs	r15, 3
    2a0c:	06 c0       	rjmp	.+12     	; 0x2a1a <vfprintf+0x196>
    2a0e:	18 c0       	rjmp	.+48     	; 0x2a40 <vfprintf+0x1bc>
    2a10:	80 e2       	ldi	r24, 0x20	; 32
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	b3 01       	movw	r22, r6
    2a16:	1a d1       	rcall	.+564    	; 0x2c4c <fputc>
    2a18:	ea 94       	dec	r14
    2a1a:	8e 2d       	mov	r24, r14
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	08 17       	cp	r16, r24
    2a20:	19 07       	cpc	r17, r25
    2a22:	b0 f3       	brcs	.-20     	; 0x2a10 <vfprintf+0x18c>
    2a24:	0d c0       	rjmp	.+26     	; 0x2a40 <vfprintf+0x1bc>
    2a26:	f6 01       	movw	r30, r12
    2a28:	f7 fc       	sbrc	r15, 7
    2a2a:	85 91       	lpm	r24, Z+
    2a2c:	f7 fe       	sbrs	r15, 7
    2a2e:	81 91       	ld	r24, Z+
    2a30:	6f 01       	movw	r12, r30
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	b3 01       	movw	r22, r6
    2a36:	0a d1       	rcall	.+532    	; 0x2c4c <fputc>
    2a38:	e1 10       	cpse	r14, r1
    2a3a:	ea 94       	dec	r14
    2a3c:	01 50       	subi	r16, 0x01	; 1
    2a3e:	10 40       	sbci	r17, 0x00	; 0
    2a40:	01 15       	cp	r16, r1
    2a42:	11 05       	cpc	r17, r1
    2a44:	81 f7       	brne	.-32     	; 0x2a26 <vfprintf+0x1a2>
    2a46:	e2 c0       	rjmp	.+452    	; 0x2c0c <vfprintf+0x388>
    2a48:	94 36       	cpi	r25, 0x64	; 100
    2a4a:	11 f0       	breq	.+4      	; 0x2a50 <vfprintf+0x1cc>
    2a4c:	99 36       	cpi	r25, 0x69	; 105
    2a4e:	61 f5       	brne	.+88     	; 0x2aa8 <vfprintf+0x224>
    2a50:	f7 fe       	sbrs	r15, 7
    2a52:	08 c0       	rjmp	.+16     	; 0x2a64 <vfprintf+0x1e0>
    2a54:	f5 01       	movw	r30, r10
    2a56:	20 81       	ld	r18, Z
    2a58:	31 81       	ldd	r19, Z+1	; 0x01
    2a5a:	42 81       	ldd	r20, Z+2	; 0x02
    2a5c:	53 81       	ldd	r21, Z+3	; 0x03
    2a5e:	84 e0       	ldi	r24, 0x04	; 4
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0a c0       	rjmp	.+20     	; 0x2a78 <vfprintf+0x1f4>
    2a64:	f5 01       	movw	r30, r10
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	9c 01       	movw	r18, r24
    2a6c:	44 27       	eor	r20, r20
    2a6e:	37 fd       	sbrc	r19, 7
    2a70:	40 95       	com	r20
    2a72:	54 2f       	mov	r21, r20
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	a8 0e       	add	r10, r24
    2a7a:	b9 1e       	adc	r11, r25
    2a7c:	9f e6       	ldi	r25, 0x6F	; 111
    2a7e:	f9 22       	and	r15, r25
    2a80:	57 ff       	sbrs	r21, 7
    2a82:	09 c0       	rjmp	.+18     	; 0x2a96 <vfprintf+0x212>
    2a84:	50 95       	com	r21
    2a86:	40 95       	com	r20
    2a88:	30 95       	com	r19
    2a8a:	21 95       	neg	r18
    2a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a90:	5f 4f       	sbci	r21, 0xFF	; 255
    2a92:	e0 e8       	ldi	r30, 0x80	; 128
    2a94:	fe 2a       	or	r15, r30
    2a96:	ca 01       	movw	r24, r20
    2a98:	b9 01       	movw	r22, r18
    2a9a:	a1 01       	movw	r20, r2
    2a9c:	2a e0       	ldi	r18, 0x0A	; 10
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	01 d1       	rcall	.+514    	; 0x2ca4 <__ultoa_invert>
    2aa2:	d8 2e       	mov	r13, r24
    2aa4:	d2 18       	sub	r13, r2
    2aa6:	3f c0       	rjmp	.+126    	; 0x2b26 <vfprintf+0x2a2>
    2aa8:	95 37       	cpi	r25, 0x75	; 117
    2aaa:	29 f4       	brne	.+10     	; 0x2ab6 <vfprintf+0x232>
    2aac:	1f 2d       	mov	r17, r15
    2aae:	1f 7e       	andi	r17, 0xEF	; 239
    2ab0:	2a e0       	ldi	r18, 0x0A	; 10
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	1d c0       	rjmp	.+58     	; 0x2af0 <vfprintf+0x26c>
    2ab6:	1f 2d       	mov	r17, r15
    2ab8:	19 7f       	andi	r17, 0xF9	; 249
    2aba:	9f 36       	cpi	r25, 0x6F	; 111
    2abc:	61 f0       	breq	.+24     	; 0x2ad6 <vfprintf+0x252>
    2abe:	90 37       	cpi	r25, 0x70	; 112
    2ac0:	20 f4       	brcc	.+8      	; 0x2aca <vfprintf+0x246>
    2ac2:	98 35       	cpi	r25, 0x58	; 88
    2ac4:	09 f0       	breq	.+2      	; 0x2ac8 <vfprintf+0x244>
    2ac6:	a5 c0       	rjmp	.+330    	; 0x2c12 <vfprintf+0x38e>
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <vfprintf+0x264>
    2aca:	90 37       	cpi	r25, 0x70	; 112
    2acc:	39 f0       	breq	.+14     	; 0x2adc <vfprintf+0x258>
    2ace:	98 37       	cpi	r25, 0x78	; 120
    2ad0:	09 f0       	breq	.+2      	; 0x2ad4 <vfprintf+0x250>
    2ad2:	9f c0       	rjmp	.+318    	; 0x2c12 <vfprintf+0x38e>
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <vfprintf+0x25a>
    2ad6:	28 e0       	ldi	r18, 0x08	; 8
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	0a c0       	rjmp	.+20     	; 0x2af0 <vfprintf+0x26c>
    2adc:	10 61       	ori	r17, 0x10	; 16
    2ade:	14 fd       	sbrc	r17, 4
    2ae0:	14 60       	ori	r17, 0x04	; 4
    2ae2:	20 e1       	ldi	r18, 0x10	; 16
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <vfprintf+0x26c>
    2ae8:	14 fd       	sbrc	r17, 4
    2aea:	16 60       	ori	r17, 0x06	; 6
    2aec:	20 e1       	ldi	r18, 0x10	; 16
    2aee:	32 e0       	ldi	r19, 0x02	; 2
    2af0:	17 ff       	sbrs	r17, 7
    2af2:	08 c0       	rjmp	.+16     	; 0x2b04 <vfprintf+0x280>
    2af4:	f5 01       	movw	r30, r10
    2af6:	60 81       	ld	r22, Z
    2af8:	71 81       	ldd	r23, Z+1	; 0x01
    2afa:	82 81       	ldd	r24, Z+2	; 0x02
    2afc:	93 81       	ldd	r25, Z+3	; 0x03
    2afe:	44 e0       	ldi	r20, 0x04	; 4
    2b00:	50 e0       	ldi	r21, 0x00	; 0
    2b02:	08 c0       	rjmp	.+16     	; 0x2b14 <vfprintf+0x290>
    2b04:	f5 01       	movw	r30, r10
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	42 e0       	ldi	r20, 0x02	; 2
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	a4 0e       	add	r10, r20
    2b16:	b5 1e       	adc	r11, r21
    2b18:	a1 01       	movw	r20, r2
    2b1a:	c4 d0       	rcall	.+392    	; 0x2ca4 <__ultoa_invert>
    2b1c:	d8 2e       	mov	r13, r24
    2b1e:	d2 18       	sub	r13, r2
    2b20:	8f e7       	ldi	r24, 0x7F	; 127
    2b22:	f8 2e       	mov	r15, r24
    2b24:	f1 22       	and	r15, r17
    2b26:	f6 fe       	sbrs	r15, 6
    2b28:	0b c0       	rjmp	.+22     	; 0x2b40 <vfprintf+0x2bc>
    2b2a:	5e ef       	ldi	r21, 0xFE	; 254
    2b2c:	f5 22       	and	r15, r21
    2b2e:	d9 14       	cp	r13, r9
    2b30:	38 f4       	brcc	.+14     	; 0x2b40 <vfprintf+0x2bc>
    2b32:	f4 fe       	sbrs	r15, 4
    2b34:	07 c0       	rjmp	.+14     	; 0x2b44 <vfprintf+0x2c0>
    2b36:	f2 fc       	sbrc	r15, 2
    2b38:	05 c0       	rjmp	.+10     	; 0x2b44 <vfprintf+0x2c0>
    2b3a:	8f ee       	ldi	r24, 0xEF	; 239
    2b3c:	f8 22       	and	r15, r24
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <vfprintf+0x2c0>
    2b40:	1d 2d       	mov	r17, r13
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <vfprintf+0x2c2>
    2b44:	19 2d       	mov	r17, r9
    2b46:	f4 fe       	sbrs	r15, 4
    2b48:	0d c0       	rjmp	.+26     	; 0x2b64 <vfprintf+0x2e0>
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ed 0d       	add	r30, r13
    2b4e:	f1 1d       	adc	r31, r1
    2b50:	80 81       	ld	r24, Z
    2b52:	80 33       	cpi	r24, 0x30	; 48
    2b54:	19 f4       	brne	.+6      	; 0x2b5c <vfprintf+0x2d8>
    2b56:	99 ee       	ldi	r25, 0xE9	; 233
    2b58:	f9 22       	and	r15, r25
    2b5a:	08 c0       	rjmp	.+16     	; 0x2b6c <vfprintf+0x2e8>
    2b5c:	1f 5f       	subi	r17, 0xFF	; 255
    2b5e:	f2 fe       	sbrs	r15, 2
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <vfprintf+0x2e8>
    2b62:	03 c0       	rjmp	.+6      	; 0x2b6a <vfprintf+0x2e6>
    2b64:	8f 2d       	mov	r24, r15
    2b66:	86 78       	andi	r24, 0x86	; 134
    2b68:	09 f0       	breq	.+2      	; 0x2b6c <vfprintf+0x2e8>
    2b6a:	1f 5f       	subi	r17, 0xFF	; 255
    2b6c:	0f 2d       	mov	r16, r15
    2b6e:	f3 fc       	sbrc	r15, 3
    2b70:	13 c0       	rjmp	.+38     	; 0x2b98 <vfprintf+0x314>
    2b72:	f0 fe       	sbrs	r15, 0
    2b74:	0e c0       	rjmp	.+28     	; 0x2b92 <vfprintf+0x30e>
    2b76:	1e 15       	cp	r17, r14
    2b78:	10 f0       	brcs	.+4      	; 0x2b7e <vfprintf+0x2fa>
    2b7a:	9d 2c       	mov	r9, r13
    2b7c:	0a c0       	rjmp	.+20     	; 0x2b92 <vfprintf+0x30e>
    2b7e:	9d 2c       	mov	r9, r13
    2b80:	9e 0c       	add	r9, r14
    2b82:	91 1a       	sub	r9, r17
    2b84:	1e 2d       	mov	r17, r14
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <vfprintf+0x30e>
    2b88:	80 e2       	ldi	r24, 0x20	; 32
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	b3 01       	movw	r22, r6
    2b8e:	5e d0       	rcall	.+188    	; 0x2c4c <fputc>
    2b90:	1f 5f       	subi	r17, 0xFF	; 255
    2b92:	1e 15       	cp	r17, r14
    2b94:	c8 f3       	brcs	.-14     	; 0x2b88 <vfprintf+0x304>
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <vfprintf+0x31c>
    2b98:	1e 15       	cp	r17, r14
    2b9a:	10 f4       	brcc	.+4      	; 0x2ba0 <vfprintf+0x31c>
    2b9c:	e1 1a       	sub	r14, r17
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <vfprintf+0x31e>
    2ba0:	ee 24       	eor	r14, r14
    2ba2:	04 ff       	sbrs	r16, 4
    2ba4:	0e c0       	rjmp	.+28     	; 0x2bc2 <vfprintf+0x33e>
    2ba6:	80 e3       	ldi	r24, 0x30	; 48
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	b3 01       	movw	r22, r6
    2bac:	4f d0       	rcall	.+158    	; 0x2c4c <fputc>
    2bae:	02 ff       	sbrs	r16, 2
    2bb0:	1b c0       	rjmp	.+54     	; 0x2be8 <vfprintf+0x364>
    2bb2:	01 fd       	sbrc	r16, 1
    2bb4:	03 c0       	rjmp	.+6      	; 0x2bbc <vfprintf+0x338>
    2bb6:	88 e7       	ldi	r24, 0x78	; 120
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	0e c0       	rjmp	.+28     	; 0x2bd8 <vfprintf+0x354>
    2bbc:	88 e5       	ldi	r24, 0x58	; 88
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0b c0       	rjmp	.+22     	; 0x2bd8 <vfprintf+0x354>
    2bc2:	80 2f       	mov	r24, r16
    2bc4:	86 78       	andi	r24, 0x86	; 134
    2bc6:	81 f0       	breq	.+32     	; 0x2be8 <vfprintf+0x364>
    2bc8:	01 ff       	sbrs	r16, 1
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <vfprintf+0x34c>
    2bcc:	8b e2       	ldi	r24, 0x2B	; 43
    2bce:	01 c0       	rjmp	.+2      	; 0x2bd2 <vfprintf+0x34e>
    2bd0:	80 e2       	ldi	r24, 0x20	; 32
    2bd2:	f7 fc       	sbrc	r15, 7
    2bd4:	8d e2       	ldi	r24, 0x2D	; 45
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	b3 01       	movw	r22, r6
    2bda:	38 d0       	rcall	.+112    	; 0x2c4c <fputc>
    2bdc:	05 c0       	rjmp	.+10     	; 0x2be8 <vfprintf+0x364>
    2bde:	80 e3       	ldi	r24, 0x30	; 48
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	b3 01       	movw	r22, r6
    2be4:	33 d0       	rcall	.+102    	; 0x2c4c <fputc>
    2be6:	9a 94       	dec	r9
    2be8:	d9 14       	cp	r13, r9
    2bea:	c8 f3       	brcs	.-14     	; 0x2bde <vfprintf+0x35a>
    2bec:	da 94       	dec	r13
    2bee:	f1 01       	movw	r30, r2
    2bf0:	ed 0d       	add	r30, r13
    2bf2:	f1 1d       	adc	r31, r1
    2bf4:	80 81       	ld	r24, Z
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	b3 01       	movw	r22, r6
    2bfa:	28 d0       	rcall	.+80     	; 0x2c4c <fputc>
    2bfc:	dd 20       	and	r13, r13
    2bfe:	b1 f7       	brne	.-20     	; 0x2bec <vfprintf+0x368>
    2c00:	05 c0       	rjmp	.+10     	; 0x2c0c <vfprintf+0x388>
    2c02:	80 e2       	ldi	r24, 0x20	; 32
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	b3 01       	movw	r22, r6
    2c08:	21 d0       	rcall	.+66     	; 0x2c4c <fputc>
    2c0a:	ea 94       	dec	r14
    2c0c:	ee 20       	and	r14, r14
    2c0e:	c9 f7       	brne	.-14     	; 0x2c02 <vfprintf+0x37e>
    2c10:	50 ce       	rjmp	.-864    	; 0x28b2 <vfprintf+0x2e>
    2c12:	f3 01       	movw	r30, r6
    2c14:	66 81       	ldd	r22, Z+6	; 0x06
    2c16:	77 81       	ldd	r23, Z+7	; 0x07
    2c18:	cb 01       	movw	r24, r22
    2c1a:	2b 96       	adiw	r28, 0x0b	; 11
    2c1c:	e2 e1       	ldi	r30, 0x12	; 18
    2c1e:	f6 cd       	rjmp	.-1044   	; 0x280c <__epilogue_restores__>

00002c20 <strnlen_P>:
    2c20:	fc 01       	movw	r30, r24
    2c22:	05 90       	lpm	r0, Z+
    2c24:	61 50       	subi	r22, 0x01	; 1
    2c26:	70 40       	sbci	r23, 0x00	; 0
    2c28:	01 10       	cpse	r0, r1
    2c2a:	d8 f7       	brcc	.-10     	; 0x2c22 <strnlen_P+0x2>
    2c2c:	80 95       	com	r24
    2c2e:	90 95       	com	r25
    2c30:	8e 0f       	add	r24, r30
    2c32:	9f 1f       	adc	r25, r31
    2c34:	08 95       	ret

00002c36 <strnlen>:
    2c36:	fc 01       	movw	r30, r24
    2c38:	61 50       	subi	r22, 0x01	; 1
    2c3a:	70 40       	sbci	r23, 0x00	; 0
    2c3c:	01 90       	ld	r0, Z+
    2c3e:	01 10       	cpse	r0, r1
    2c40:	d8 f7       	brcc	.-10     	; 0x2c38 <strnlen+0x2>
    2c42:	80 95       	com	r24
    2c44:	90 95       	com	r25
    2c46:	8e 0f       	add	r24, r30
    2c48:	9f 1f       	adc	r25, r31
    2c4a:	08 95       	ret

00002c4c <fputc>:
    2c4c:	0f 93       	push	r16
    2c4e:	1f 93       	push	r17
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	8c 01       	movw	r16, r24
    2c56:	eb 01       	movw	r28, r22
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	81 ff       	sbrs	r24, 1
    2c5c:	1b c0       	rjmp	.+54     	; 0x2c94 <fputc+0x48>
    2c5e:	82 ff       	sbrs	r24, 2
    2c60:	0d c0       	rjmp	.+26     	; 0x2c7c <fputc+0x30>
    2c62:	2e 81       	ldd	r18, Y+6	; 0x06
    2c64:	3f 81       	ldd	r19, Y+7	; 0x07
    2c66:	8c 81       	ldd	r24, Y+4	; 0x04
    2c68:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6a:	28 17       	cp	r18, r24
    2c6c:	39 07       	cpc	r19, r25
    2c6e:	64 f4       	brge	.+24     	; 0x2c88 <fputc+0x3c>
    2c70:	e8 81       	ld	r30, Y
    2c72:	f9 81       	ldd	r31, Y+1	; 0x01
    2c74:	01 93       	st	Z+, r16
    2c76:	f9 83       	std	Y+1, r31	; 0x01
    2c78:	e8 83       	st	Y, r30
    2c7a:	06 c0       	rjmp	.+12     	; 0x2c88 <fputc+0x3c>
    2c7c:	e8 85       	ldd	r30, Y+8	; 0x08
    2c7e:	f9 85       	ldd	r31, Y+9	; 0x09
    2c80:	80 2f       	mov	r24, r16
    2c82:	09 95       	icall
    2c84:	89 2b       	or	r24, r25
    2c86:	31 f4       	brne	.+12     	; 0x2c94 <fputc+0x48>
    2c88:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	9f 83       	std	Y+7, r25	; 0x07
    2c90:	8e 83       	std	Y+6, r24	; 0x06
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <fputc+0x4c>
    2c94:	0f ef       	ldi	r16, 0xFF	; 255
    2c96:	1f ef       	ldi	r17, 0xFF	; 255
    2c98:	c8 01       	movw	r24, r16
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	08 95       	ret

00002ca4 <__ultoa_invert>:
    2ca4:	fa 01       	movw	r30, r20
    2ca6:	aa 27       	eor	r26, r26
    2ca8:	28 30       	cpi	r18, 0x08	; 8
    2caa:	51 f1       	breq	.+84     	; 0x2d00 <__ultoa_invert+0x5c>
    2cac:	20 31       	cpi	r18, 0x10	; 16
    2cae:	81 f1       	breq	.+96     	; 0x2d10 <__ultoa_invert+0x6c>
    2cb0:	e8 94       	clt
    2cb2:	6f 93       	push	r22
    2cb4:	6e 7f       	andi	r22, 0xFE	; 254
    2cb6:	6e 5f       	subi	r22, 0xFE	; 254
    2cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cba:	8f 4f       	sbci	r24, 0xFF	; 255
    2cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbe:	af 4f       	sbci	r26, 0xFF	; 255
    2cc0:	b1 e0       	ldi	r27, 0x01	; 1
    2cc2:	3e d0       	rcall	.+124    	; 0x2d40 <__ultoa_invert+0x9c>
    2cc4:	b4 e0       	ldi	r27, 0x04	; 4
    2cc6:	3c d0       	rcall	.+120    	; 0x2d40 <__ultoa_invert+0x9c>
    2cc8:	67 0f       	add	r22, r23
    2cca:	78 1f       	adc	r23, r24
    2ccc:	89 1f       	adc	r24, r25
    2cce:	9a 1f       	adc	r25, r26
    2cd0:	a1 1d       	adc	r26, r1
    2cd2:	68 0f       	add	r22, r24
    2cd4:	79 1f       	adc	r23, r25
    2cd6:	8a 1f       	adc	r24, r26
    2cd8:	91 1d       	adc	r25, r1
    2cda:	a1 1d       	adc	r26, r1
    2cdc:	6a 0f       	add	r22, r26
    2cde:	71 1d       	adc	r23, r1
    2ce0:	81 1d       	adc	r24, r1
    2ce2:	91 1d       	adc	r25, r1
    2ce4:	a1 1d       	adc	r26, r1
    2ce6:	20 d0       	rcall	.+64     	; 0x2d28 <__ultoa_invert+0x84>
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <__ultoa_invert+0x48>
    2cea:	68 94       	set
    2cec:	3f 91       	pop	r19
    2cee:	2a e0       	ldi	r18, 0x0A	; 10
    2cf0:	26 9f       	mul	r18, r22
    2cf2:	11 24       	eor	r1, r1
    2cf4:	30 19       	sub	r19, r0
    2cf6:	30 5d       	subi	r19, 0xD0	; 208
    2cf8:	31 93       	st	Z+, r19
    2cfa:	de f6       	brtc	.-74     	; 0x2cb2 <__ultoa_invert+0xe>
    2cfc:	cf 01       	movw	r24, r30
    2cfe:	08 95       	ret
    2d00:	46 2f       	mov	r20, r22
    2d02:	47 70       	andi	r20, 0x07	; 7
    2d04:	40 5d       	subi	r20, 0xD0	; 208
    2d06:	41 93       	st	Z+, r20
    2d08:	b3 e0       	ldi	r27, 0x03	; 3
    2d0a:	0f d0       	rcall	.+30     	; 0x2d2a <__ultoa_invert+0x86>
    2d0c:	c9 f7       	brne	.-14     	; 0x2d00 <__ultoa_invert+0x5c>
    2d0e:	f6 cf       	rjmp	.-20     	; 0x2cfc <__ultoa_invert+0x58>
    2d10:	46 2f       	mov	r20, r22
    2d12:	4f 70       	andi	r20, 0x0F	; 15
    2d14:	40 5d       	subi	r20, 0xD0	; 208
    2d16:	4a 33       	cpi	r20, 0x3A	; 58
    2d18:	18 f0       	brcs	.+6      	; 0x2d20 <__ultoa_invert+0x7c>
    2d1a:	49 5d       	subi	r20, 0xD9	; 217
    2d1c:	31 fd       	sbrc	r19, 1
    2d1e:	40 52       	subi	r20, 0x20	; 32
    2d20:	41 93       	st	Z+, r20
    2d22:	02 d0       	rcall	.+4      	; 0x2d28 <__ultoa_invert+0x84>
    2d24:	a9 f7       	brne	.-22     	; 0x2d10 <__ultoa_invert+0x6c>
    2d26:	ea cf       	rjmp	.-44     	; 0x2cfc <__ultoa_invert+0x58>
    2d28:	b4 e0       	ldi	r27, 0x04	; 4
    2d2a:	a6 95       	lsr	r26
    2d2c:	97 95       	ror	r25
    2d2e:	87 95       	ror	r24
    2d30:	77 95       	ror	r23
    2d32:	67 95       	ror	r22
    2d34:	ba 95       	dec	r27
    2d36:	c9 f7       	brne	.-14     	; 0x2d2a <__ultoa_invert+0x86>
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	61 05       	cpc	r22, r1
    2d3c:	71 05       	cpc	r23, r1
    2d3e:	08 95       	ret
    2d40:	9b 01       	movw	r18, r22
    2d42:	ac 01       	movw	r20, r24
    2d44:	0a 2e       	mov	r0, r26
    2d46:	06 94       	lsr	r0
    2d48:	57 95       	ror	r21
    2d4a:	47 95       	ror	r20
    2d4c:	37 95       	ror	r19
    2d4e:	27 95       	ror	r18
    2d50:	ba 95       	dec	r27
    2d52:	c9 f7       	brne	.-14     	; 0x2d46 <__ultoa_invert+0xa2>
    2d54:	62 0f       	add	r22, r18
    2d56:	73 1f       	adc	r23, r19
    2d58:	84 1f       	adc	r24, r20
    2d5a:	95 1f       	adc	r25, r21
    2d5c:	a0 1d       	adc	r26, r0
    2d5e:	08 95       	ret

00002d60 <_exit>:
    2d60:	f8 94       	cli

00002d62 <__stop_program>:
    2d62:	ff cf       	rjmp	.-2      	; 0x2d62 <__stop_program>
