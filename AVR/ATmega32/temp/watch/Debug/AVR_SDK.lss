
AVR_SDK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  000002f2  2**0
                  ALLOC
  2 .stab         00000f48  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000162d  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	05 c1       	rjmp	.+522    	; 0x21c <__vector_4>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	e7 c0       	rjmp	.+462    	; 0x1f8 <__vector_10>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	dc d0       	rcall	.+440    	; 0x240 <main>
  88:	f8 c0       	rjmp	.+496    	; 0x27a <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <UART_init>:
 *      Author: mh-sh
 */

#include "USART.h"

void UART_init(UART_NUM_t UART, u16 baudRate) {
  8c:	df 93       	push	r29
  8e:	cf 93       	push	r28
  90:	00 d0       	rcall	.+0      	; 0x92 <UART_init+0x6>
  92:	0f 92       	push	r0
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	89 83       	std	Y+1, r24	; 0x01
  9a:	7b 83       	std	Y+3, r23	; 0x03
  9c:	6a 83       	std	Y+2, r22	; 0x02
	UBRRH = (unsigned char) (baudRate >> 8);
  9e:	e0 e4       	ldi	r30, 0x40	; 64
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8a 81       	ldd	r24, Y+2	; 0x02
  a4:	9b 81       	ldd	r25, Y+3	; 0x03
  a6:	89 2f       	mov	r24, r25
  a8:	99 27       	eor	r25, r25
  aa:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudRate;
  ac:	e9 e2       	ldi	r30, 0x29	; 41
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	80 83       	st	Z, r24

	UCSRB = (1 << RXEN) | (1 << TXEN);
  b4:	ea e2       	ldi	r30, 0x2A	; 42
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	80 83       	st	Z, r24

	UCSRC &= ~(1 << UMSEL);
  bc:	a0 e4       	ldi	r26, 0x40	; 64
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e0 e4       	ldi	r30, 0x40	; 64
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 7b       	andi	r24, 0xBF	; 191
  c8:	8c 93       	st	X, r24
	//2stop , odd parity , 8bit data
	UCSRC = (1 << URSEL) | (3 << UPM0) | (1 << USBS) | (3 << UCSZ0);
  ca:	e0 e4       	ldi	r30, 0x40	; 64
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	8e eb       	ldi	r24, 0xBE	; 190
  d0:	80 83       	st	Z, r24

}
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <UART_readByte>:
	}

	return ret_error;

}
char UART_readByte(UART_NUM_t UART) { //Blocking
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	89 83       	std	Y+1, r24	; 0x01

	while (!(UCSRA & (1 << RXC)))
  ea:	eb e2       	ldi	r30, 0x2B	; 43
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	dc f7       	brge	.-10     	; 0xea <UART_readByte+0xc>
		;
	return UDR;
  f4:	ec e2       	ldi	r30, 0x2C	; 44
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z

}
  fa:	0f 90       	pop	r0
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <DIO_init_port_output>:
 *      Author: mh-sh
 */

#include "hal_DIO.h"

void DIO_init_port_output(enum_port_base_t port_base, u8 port_mask) {
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <DIO_init_port_output+0x6>
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	89 83       	std	Y+1, r24	; 0x01
 10e:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 1) |= port_mask;
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	dc 01       	movw	r26, r24
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	88 2f       	mov	r24, r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	fc 01       	movw	r30, r24
 124:	90 81       	ld	r25, Z
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	89 2b       	or	r24, r25
 12a:	8c 93       	st	X, r24
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	cf 91       	pop	r28
 132:	df 91       	pop	r29
 134:	08 95       	ret

00000136 <DIO_write_pin>:
void DIO_init_port_input(enum_port_base_t port_base, u8 port_mask) {
	*(volatile u8*) (port_base + 1) &= ~port_mask;
}

void DIO_write_pin(enum_port_base_t port_base, u8 pin_no, bool_t data) {
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	00 d0       	rcall	.+0      	; 0x13c <DIO_write_pin+0x6>
 13c:	0f 92       	push	r0
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	6a 83       	std	Y+2, r22	; 0x02
 146:	4b 83       	std	Y+3, r20	; 0x03
	*(volatile u8*) (port_base + 2) &= ~(1 << pin_no);
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	88 2f       	mov	r24, r24
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 96       	adiw	r24, 0x02	; 2
 150:	dc 01       	movw	r26, r24
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	88 2f       	mov	r24, r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 96       	adiw	r24, 0x02	; 2
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_write_pin+0x3a>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	2a 95       	dec	r18
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_write_pin+0x36>
 174:	80 95       	com	r24
 176:	84 23       	and	r24, r20
 178:	8c 93       	st	X, r24
	*(volatile u8*) (port_base + 2) |= data << pin_no;
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 96       	adiw	r24, 0x02	; 2
 182:	dc 01       	movw	r26, r24
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 96       	adiw	r24, 0x02	; 2
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
 190:	48 2f       	mov	r20, r24
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	8a 81       	ldd	r24, Y+2	; 0x02
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	b9 01       	movw	r22, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_write_pin+0x70>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	8a 95       	dec	r24
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_write_pin+0x6c>
 1aa:	cb 01       	movw	r24, r22
 1ac:	84 2b       	or	r24, r20
 1ae:	8c 93       	st	X, r24
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	cf 91       	pop	r28
 1b8:	df 91       	pop	r29
 1ba:	08 95       	ret

000001bc <DIO_read_pin>:
}

u8 DIO_read_port(enum_port_base_t port_base, u8 port_mask) {
	return ((*(volatile u8*) (port_base)) & (port_mask));
}
u8 DIO_read_pin(enum_port_base_t port_base, u8 pin_no) {
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <DIO_read_pin+0x6>
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	6a 83       	std	Y+2, r22	; 0x02
	return ((*(volatile u8*) (port_base)) & (1 << pin_no));
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	48 2f       	mov	r20, r24
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 2e       	mov	r0, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_read_pin+0x2c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_read_pin+0x28>
 1ec:	84 23       	and	r24, r20
}
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <__vector_10>:
#include "hal_timer.h"
void (*t0_isr)(), (*t1_isr)(), (*t2_isr)();

void TIMER0_COMP_vect() {
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	if (t0_isr)
 200:	80 91 62 00 	lds	r24, 0x0062
 204:	90 91 63 00 	lds	r25, 0x0063
 208:	00 97       	sbiw	r24, 0x00	; 0
 20a:	29 f0       	breq	.+10     	; 0x216 <__vector_10+0x1e>
		t0_isr();
 20c:	e0 91 62 00 	lds	r30, 0x0062
 210:	f0 91 63 00 	lds	r31, 0x0063
 214:	09 95       	icall
}
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <__vector_4>:
void TIMER2_COMP_vect() {
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	if (t2_isr)
 224:	80 91 64 00 	lds	r24, 0x0064
 228:	90 91 65 00 	lds	r25, 0x0065
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	29 f0       	breq	.+10     	; 0x23a <__vector_4+0x1e>
		t2_isr();
 230:	e0 91 64 00 	lds	r30, 0x0064
 234:	f0 91 65 00 	lds	r31, 0x0065
 238:	09 95       	icall
}
 23a:	cf 91       	pop	r28
 23c:	df 91       	pop	r29
 23e:	08 95       	ret

00000240 <main>:
	seven_seg_display(minID1, currMin % 10);
//	seven_seg_display(minID10, currMin++ / 10);

}

int main(void) {
 240:	df 93       	push	r29
 242:	cf 93       	push	r28
 244:	0f 92       	push	r0
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	UART_init(UART0, 9600);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	60 e8       	ldi	r22, 0x80	; 128
 24e:	75 e2       	ldi	r23, 0x25	; 37
 250:	1d df       	rcall	.-454    	; 0x8c <UART_init>
 252:	86 e3       	ldi	r24, 0x36	; 54
	DIO_init_port_output(BASE_B, 1);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	55 df       	rcall	.-342    	; 0x102 <DIO_init_port_output>
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	41 df       	rcall	.-382    	; 0xde <UART_readByte>
//	TMU_addTimer(&obj2, 5000, PERIODIC, function2);
//	TMU_addTimer(&obj3, 10000, PERIODIC, function3);
	while (1) {
//		TMU_Dispatch();
//		UART_sendByte(UART0, 'a');
		if (UART_readByte(UART0) == 'a') {
 25c:	81 36       	cpi	r24, 0x61	; 97
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x18>
 260:	86 e3       	ldi	r24, 0x36	; 54
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	ab df       	rcall	.-170    	; 0x1bc <DIO_read_pin>
			DIO_write_pin(BASE_B, 0, !DIO_read_pin(BASE_B, 0));
 266:	19 82       	std	Y+1, r1	; 0x01
 268:	88 23       	and	r24, r24
 26a:	11 f4       	brne	.+4      	; 0x270 <main+0x30>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	86 e3       	ldi	r24, 0x36	; 54
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	49 81       	ldd	r20, Y+1	; 0x01
 276:	5f df       	rcall	.-322    	; 0x136 <DIO_write_pin>
 278:	ef cf       	rjmp	.-34     	; 0x258 <main+0x18>

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
