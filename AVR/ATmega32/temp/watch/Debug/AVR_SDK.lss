
AVR_SDK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002396  0000242a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  0000243c  2**0
                  ALLOC
  3 .stab         00001ea8  00000000  00000000  0000243c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018a7  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a386  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	ce c6       	rjmp	.+3484   	; 0xdae <__vector_4>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	b0 c6       	rjmp	.+3424   	; 0xd8a <__vector_10>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	a5 d6       	rcall	.+3402   	; 0xdd2 <main>
      88:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <__fixunssfsi>:
      8e:	ef 92       	push	r14
      90:	ff 92       	push	r15
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	7b 01       	movw	r14, r22
      98:	8c 01       	movw	r16, r24
      9a:	20 e0       	ldi	r18, 0x00	; 0
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	40 e0       	ldi	r20, 0x00	; 0
      a0:	5f e4       	ldi	r21, 0x4F	; 79
      a2:	8c d3       	rcall	.+1816   	; 0x7bc <__gesf2>
      a4:	88 23       	and	r24, r24
      a6:	7c f0       	brlt	.+30     	; 0xc6 <__fixunssfsi+0x38>
      a8:	c8 01       	movw	r24, r16
      aa:	b7 01       	movw	r22, r14
      ac:	20 e0       	ldi	r18, 0x00	; 0
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	40 e0       	ldi	r20, 0x00	; 0
      b2:	5f e4       	ldi	r21, 0x4F	; 79
      b4:	60 d1       	rcall	.+704    	; 0x376 <__subsf3>
      b6:	dc d3       	rcall	.+1976   	; 0x870 <__fixsfsi>
      b8:	9b 01       	movw	r18, r22
      ba:	ac 01       	movw	r20, r24
      bc:	20 50       	subi	r18, 0x00	; 0
      be:	30 40       	sbci	r19, 0x00	; 0
      c0:	40 40       	sbci	r20, 0x00	; 0
      c2:	50 48       	sbci	r21, 0x80	; 128
      c4:	05 c0       	rjmp	.+10     	; 0xd0 <__fixunssfsi+0x42>
      c6:	c8 01       	movw	r24, r16
      c8:	b7 01       	movw	r22, r14
      ca:	d2 d3       	rcall	.+1956   	; 0x870 <__fixsfsi>
      cc:	9b 01       	movw	r18, r22
      ce:	ac 01       	movw	r20, r24
      d0:	b9 01       	movw	r22, r18
      d2:	ca 01       	movw	r24, r20
      d4:	1f 91       	pop	r17
      d6:	0f 91       	pop	r16
      d8:	ff 90       	pop	r15
      da:	ef 90       	pop	r14
      dc:	08 95       	ret

000000de <_fpadd_parts>:
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e5 e7       	ldi	r30, 0x75	; 117
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__>
      ea:	dc 01       	movw	r26, r24
      ec:	2b 01       	movw	r4, r22
      ee:	fa 01       	movw	r30, r20
      f0:	9c 91       	ld	r25, X
      f2:	92 30       	cpi	r25, 0x02	; 2
      f4:	08 f4       	brcc	.+2      	; 0xf8 <_fpadd_parts+0x1a>
      f6:	39 c1       	rjmp	.+626    	; 0x36a <_fpadd_parts+0x28c>
      f8:	eb 01       	movw	r28, r22
      fa:	88 81       	ld	r24, Y
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	08 f4       	brcc	.+2      	; 0x102 <_fpadd_parts+0x24>
     100:	33 c1       	rjmp	.+614    	; 0x368 <_fpadd_parts+0x28a>
     102:	94 30       	cpi	r25, 0x04	; 4
     104:	69 f4       	brne	.+26     	; 0x120 <_fpadd_parts+0x42>
     106:	84 30       	cpi	r24, 0x04	; 4
     108:	09 f0       	breq	.+2      	; 0x10c <_fpadd_parts+0x2e>
     10a:	2f c1       	rjmp	.+606    	; 0x36a <_fpadd_parts+0x28c>
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	9c 91       	ld	r25, X
     110:	11 97       	sbiw	r26, 0x01	; 1
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	98 17       	cp	r25, r24
     116:	09 f4       	brne	.+2      	; 0x11a <_fpadd_parts+0x3c>
     118:	28 c1       	rjmp	.+592    	; 0x36a <_fpadd_parts+0x28c>
     11a:	aa e6       	ldi	r26, 0x6A	; 106
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	25 c1       	rjmp	.+586    	; 0x36a <_fpadd_parts+0x28c>
     120:	84 30       	cpi	r24, 0x04	; 4
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x48>
     124:	21 c1       	rjmp	.+578    	; 0x368 <_fpadd_parts+0x28a>
     126:	82 30       	cpi	r24, 0x02	; 2
     128:	a9 f4       	brne	.+42     	; 0x154 <_fpadd_parts+0x76>
     12a:	92 30       	cpi	r25, 0x02	; 2
     12c:	09 f0       	breq	.+2      	; 0x130 <_fpadd_parts+0x52>
     12e:	1d c1       	rjmp	.+570    	; 0x36a <_fpadd_parts+0x28c>
     130:	9a 01       	movw	r18, r20
     132:	ad 01       	movw	r20, r26
     134:	88 e0       	ldi	r24, 0x08	; 8
     136:	ea 01       	movw	r28, r20
     138:	09 90       	ld	r0, Y+
     13a:	ae 01       	movw	r20, r28
     13c:	e9 01       	movw	r28, r18
     13e:	09 92       	st	Y+, r0
     140:	9e 01       	movw	r18, r28
     142:	81 50       	subi	r24, 0x01	; 1
     144:	c1 f7       	brne	.-16     	; 0x136 <_fpadd_parts+0x58>
     146:	e2 01       	movw	r28, r4
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	11 96       	adiw	r26, 0x01	; 1
     14c:	9c 91       	ld	r25, X
     14e:	89 23       	and	r24, r25
     150:	81 83       	std	Z+1, r24	; 0x01
     152:	08 c1       	rjmp	.+528    	; 0x364 <_fpadd_parts+0x286>
     154:	92 30       	cpi	r25, 0x02	; 2
     156:	09 f4       	brne	.+2      	; 0x15a <_fpadd_parts+0x7c>
     158:	07 c1       	rjmp	.+526    	; 0x368 <_fpadd_parts+0x28a>
     15a:	12 96       	adiw	r26, 0x02	; 2
     15c:	2d 90       	ld	r2, X+
     15e:	3c 90       	ld	r3, X
     160:	13 97       	sbiw	r26, 0x03	; 3
     162:	eb 01       	movw	r28, r22
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	14 96       	adiw	r26, 0x04	; 4
     16a:	ad 90       	ld	r10, X+
     16c:	bd 90       	ld	r11, X+
     16e:	cd 90       	ld	r12, X+
     170:	dc 90       	ld	r13, X
     172:	17 97       	sbiw	r26, 0x07	; 7
     174:	ec 80       	ldd	r14, Y+4	; 0x04
     176:	fd 80       	ldd	r15, Y+5	; 0x05
     178:	0e 81       	ldd	r16, Y+6	; 0x06
     17a:	1f 81       	ldd	r17, Y+7	; 0x07
     17c:	91 01       	movw	r18, r2
     17e:	28 1b       	sub	r18, r24
     180:	39 0b       	sbc	r19, r25
     182:	b9 01       	movw	r22, r18
     184:	37 ff       	sbrs	r19, 7
     186:	04 c0       	rjmp	.+8      	; 0x190 <_fpadd_parts+0xb2>
     188:	66 27       	eor	r22, r22
     18a:	77 27       	eor	r23, r23
     18c:	62 1b       	sub	r22, r18
     18e:	73 0b       	sbc	r23, r19
     190:	60 32       	cpi	r22, 0x20	; 32
     192:	71 05       	cpc	r23, r1
     194:	0c f0       	brlt	.+2      	; 0x198 <_fpadd_parts+0xba>
     196:	61 c0       	rjmp	.+194    	; 0x25a <_fpadd_parts+0x17c>
     198:	12 16       	cp	r1, r18
     19a:	13 06       	cpc	r1, r19
     19c:	6c f5       	brge	.+90     	; 0x1f8 <_fpadd_parts+0x11a>
     19e:	37 01       	movw	r6, r14
     1a0:	48 01       	movw	r8, r16
     1a2:	06 2e       	mov	r0, r22
     1a4:	04 c0       	rjmp	.+8      	; 0x1ae <_fpadd_parts+0xd0>
     1a6:	96 94       	lsr	r9
     1a8:	87 94       	ror	r8
     1aa:	77 94       	ror	r7
     1ac:	67 94       	ror	r6
     1ae:	0a 94       	dec	r0
     1b0:	d2 f7       	brpl	.-12     	; 0x1a6 <_fpadd_parts+0xc8>
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0xe6>
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	6a 95       	dec	r22
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0xde>
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	30 40       	sbci	r19, 0x00	; 0
     1cc:	40 40       	sbci	r20, 0x00	; 0
     1ce:	50 40       	sbci	r21, 0x00	; 0
     1d0:	2e 21       	and	r18, r14
     1d2:	3f 21       	and	r19, r15
     1d4:	40 23       	and	r20, r16
     1d6:	51 23       	and	r21, r17
     1d8:	21 15       	cp	r18, r1
     1da:	31 05       	cpc	r19, r1
     1dc:	41 05       	cpc	r20, r1
     1de:	51 05       	cpc	r21, r1
     1e0:	21 f0       	breq	.+8      	; 0x1ea <_fpadd_parts+0x10c>
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	79 01       	movw	r14, r18
     1ec:	8a 01       	movw	r16, r20
     1ee:	e6 28       	or	r14, r6
     1f0:	f7 28       	or	r15, r7
     1f2:	08 29       	or	r16, r8
     1f4:	19 29       	or	r17, r9
     1f6:	3c c0       	rjmp	.+120    	; 0x270 <_fpadd_parts+0x192>
     1f8:	23 2b       	or	r18, r19
     1fa:	d1 f1       	breq	.+116    	; 0x270 <_fpadd_parts+0x192>
     1fc:	26 0e       	add	r2, r22
     1fe:	37 1e       	adc	r3, r23
     200:	35 01       	movw	r6, r10
     202:	46 01       	movw	r8, r12
     204:	06 2e       	mov	r0, r22
     206:	04 c0       	rjmp	.+8      	; 0x210 <_fpadd_parts+0x132>
     208:	96 94       	lsr	r9
     20a:	87 94       	ror	r8
     20c:	77 94       	ror	r7
     20e:	67 94       	ror	r6
     210:	0a 94       	dec	r0
     212:	d2 f7       	brpl	.-12     	; 0x208 <_fpadd_parts+0x12a>
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	04 c0       	rjmp	.+8      	; 0x226 <_fpadd_parts+0x148>
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	44 1f       	adc	r20, r20
     224:	55 1f       	adc	r21, r21
     226:	6a 95       	dec	r22
     228:	d2 f7       	brpl	.-12     	; 0x21e <_fpadd_parts+0x140>
     22a:	21 50       	subi	r18, 0x01	; 1
     22c:	30 40       	sbci	r19, 0x00	; 0
     22e:	40 40       	sbci	r20, 0x00	; 0
     230:	50 40       	sbci	r21, 0x00	; 0
     232:	2a 21       	and	r18, r10
     234:	3b 21       	and	r19, r11
     236:	4c 21       	and	r20, r12
     238:	5d 21       	and	r21, r13
     23a:	21 15       	cp	r18, r1
     23c:	31 05       	cpc	r19, r1
     23e:	41 05       	cpc	r20, r1
     240:	51 05       	cpc	r21, r1
     242:	21 f0       	breq	.+8      	; 0x24c <_fpadd_parts+0x16e>
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	59 01       	movw	r10, r18
     24e:	6a 01       	movw	r12, r20
     250:	a6 28       	or	r10, r6
     252:	b7 28       	or	r11, r7
     254:	c8 28       	or	r12, r8
     256:	d9 28       	or	r13, r9
     258:	0b c0       	rjmp	.+22     	; 0x270 <_fpadd_parts+0x192>
     25a:	82 15       	cp	r24, r2
     25c:	93 05       	cpc	r25, r3
     25e:	2c f0       	brlt	.+10     	; 0x26a <_fpadd_parts+0x18c>
     260:	1c 01       	movw	r2, r24
     262:	aa 24       	eor	r10, r10
     264:	bb 24       	eor	r11, r11
     266:	65 01       	movw	r12, r10
     268:	03 c0       	rjmp	.+6      	; 0x270 <_fpadd_parts+0x192>
     26a:	ee 24       	eor	r14, r14
     26c:	ff 24       	eor	r15, r15
     26e:	87 01       	movw	r16, r14
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 91       	ld	r25, X
     274:	d2 01       	movw	r26, r4
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	8c 91       	ld	r24, X
     27a:	98 17       	cp	r25, r24
     27c:	09 f4       	brne	.+2      	; 0x280 <_fpadd_parts+0x1a2>
     27e:	45 c0       	rjmp	.+138    	; 0x30a <_fpadd_parts+0x22c>
     280:	99 23       	and	r25, r25
     282:	39 f0       	breq	.+14     	; 0x292 <_fpadd_parts+0x1b4>
     284:	a8 01       	movw	r20, r16
     286:	97 01       	movw	r18, r14
     288:	2a 19       	sub	r18, r10
     28a:	3b 09       	sbc	r19, r11
     28c:	4c 09       	sbc	r20, r12
     28e:	5d 09       	sbc	r21, r13
     290:	06 c0       	rjmp	.+12     	; 0x29e <_fpadd_parts+0x1c0>
     292:	a6 01       	movw	r20, r12
     294:	95 01       	movw	r18, r10
     296:	2e 19       	sub	r18, r14
     298:	3f 09       	sbc	r19, r15
     29a:	40 0b       	sbc	r20, r16
     29c:	51 0b       	sbc	r21, r17
     29e:	57 fd       	sbrc	r21, 7
     2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <_fpadd_parts+0x1d4>
     2a2:	11 82       	std	Z+1, r1	; 0x01
     2a4:	33 82       	std	Z+3, r3	; 0x03
     2a6:	22 82       	std	Z+2, r2	; 0x02
     2a8:	24 83       	std	Z+4, r18	; 0x04
     2aa:	35 83       	std	Z+5, r19	; 0x05
     2ac:	46 83       	std	Z+6, r20	; 0x06
     2ae:	57 83       	std	Z+7, r21	; 0x07
     2b0:	1d c0       	rjmp	.+58     	; 0x2ec <_fpadd_parts+0x20e>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	81 83       	std	Z+1, r24	; 0x01
     2b6:	33 82       	std	Z+3, r3	; 0x03
     2b8:	22 82       	std	Z+2, r2	; 0x02
     2ba:	88 27       	eor	r24, r24
     2bc:	99 27       	eor	r25, r25
     2be:	dc 01       	movw	r26, r24
     2c0:	82 1b       	sub	r24, r18
     2c2:	93 0b       	sbc	r25, r19
     2c4:	a4 0b       	sbc	r26, r20
     2c6:	b5 0b       	sbc	r27, r21
     2c8:	84 83       	std	Z+4, r24	; 0x04
     2ca:	95 83       	std	Z+5, r25	; 0x05
     2cc:	a6 83       	std	Z+6, r26	; 0x06
     2ce:	b7 83       	std	Z+7, r27	; 0x07
     2d0:	0d c0       	rjmp	.+26     	; 0x2ec <_fpadd_parts+0x20e>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	24 83       	std	Z+4, r18	; 0x04
     2dc:	35 83       	std	Z+5, r19	; 0x05
     2de:	46 83       	std	Z+6, r20	; 0x06
     2e0:	57 83       	std	Z+7, r21	; 0x07
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	93 83       	std	Z+3, r25	; 0x03
     2ea:	82 83       	std	Z+2, r24	; 0x02
     2ec:	24 81       	ldd	r18, Z+4	; 0x04
     2ee:	35 81       	ldd	r19, Z+5	; 0x05
     2f0:	46 81       	ldd	r20, Z+6	; 0x06
     2f2:	57 81       	ldd	r21, Z+7	; 0x07
     2f4:	da 01       	movw	r26, r20
     2f6:	c9 01       	movw	r24, r18
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	a1 09       	sbc	r26, r1
     2fc:	b1 09       	sbc	r27, r1
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	9f 4f       	sbci	r25, 0xFF	; 255
     302:	af 4f       	sbci	r26, 0xFF	; 255
     304:	bf 43       	sbci	r27, 0x3F	; 63
     306:	28 f3       	brcs	.-54     	; 0x2d2 <_fpadd_parts+0x1f4>
     308:	0b c0       	rjmp	.+22     	; 0x320 <_fpadd_parts+0x242>
     30a:	91 83       	std	Z+1, r25	; 0x01
     30c:	33 82       	std	Z+3, r3	; 0x03
     30e:	22 82       	std	Z+2, r2	; 0x02
     310:	ea 0c       	add	r14, r10
     312:	fb 1c       	adc	r15, r11
     314:	0c 1d       	adc	r16, r12
     316:	1d 1d       	adc	r17, r13
     318:	e4 82       	std	Z+4, r14	; 0x04
     31a:	f5 82       	std	Z+5, r15	; 0x05
     31c:	06 83       	std	Z+6, r16	; 0x06
     31e:	17 83       	std	Z+7, r17	; 0x07
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	80 83       	st	Z, r24
     324:	24 81       	ldd	r18, Z+4	; 0x04
     326:	35 81       	ldd	r19, Z+5	; 0x05
     328:	46 81       	ldd	r20, Z+6	; 0x06
     32a:	57 81       	ldd	r21, Z+7	; 0x07
     32c:	57 ff       	sbrs	r21, 7
     32e:	1a c0       	rjmp	.+52     	; 0x364 <_fpadd_parts+0x286>
     330:	c9 01       	movw	r24, r18
     332:	aa 27       	eor	r26, r26
     334:	97 fd       	sbrc	r25, 7
     336:	a0 95       	com	r26
     338:	ba 2f       	mov	r27, r26
     33a:	81 70       	andi	r24, 0x01	; 1
     33c:	90 70       	andi	r25, 0x00	; 0
     33e:	a0 70       	andi	r26, 0x00	; 0
     340:	b0 70       	andi	r27, 0x00	; 0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	37 95       	ror	r19
     348:	27 95       	ror	r18
     34a:	82 2b       	or	r24, r18
     34c:	93 2b       	or	r25, r19
     34e:	a4 2b       	or	r26, r20
     350:	b5 2b       	or	r27, r21
     352:	84 83       	std	Z+4, r24	; 0x04
     354:	95 83       	std	Z+5, r25	; 0x05
     356:	a6 83       	std	Z+6, r26	; 0x06
     358:	b7 83       	std	Z+7, r27	; 0x07
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	93 83       	std	Z+3, r25	; 0x03
     362:	82 83       	std	Z+2, r24	; 0x02
     364:	df 01       	movw	r26, r30
     366:	01 c0       	rjmp	.+2      	; 0x36a <_fpadd_parts+0x28c>
     368:	d2 01       	movw	r26, r4
     36a:	cd 01       	movw	r24, r26
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	e2 e1       	ldi	r30, 0x12	; 18
     372:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__>

00000376 <__subsf3>:
     376:	a0 e2       	ldi	r26, 0x20	; 32
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e1 ec       	ldi	r30, 0xC1	; 193
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     382:	69 83       	std	Y+1, r22	; 0x01
     384:	7a 83       	std	Y+2, r23	; 0x02
     386:	8b 83       	std	Y+3, r24	; 0x03
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	2d 83       	std	Y+5, r18	; 0x05
     38c:	3e 83       	std	Y+6, r19	; 0x06
     38e:	4f 83       	std	Y+7, r20	; 0x07
     390:	58 87       	std	Y+8, r21	; 0x08
     392:	e9 e0       	ldi	r30, 0x09	; 9
     394:	ee 2e       	mov	r14, r30
     396:	f1 2c       	mov	r15, r1
     398:	ec 0e       	add	r14, r28
     39a:	fd 1e       	adc	r15, r29
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	b7 01       	movw	r22, r14
     3a2:	8e d3       	rcall	.+1820   	; 0xac0 <__unpack_f>
     3a4:	8e 01       	movw	r16, r28
     3a6:	0f 5e       	subi	r16, 0xEF	; 239
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	ce 01       	movw	r24, r28
     3ac:	05 96       	adiw	r24, 0x05	; 5
     3ae:	b8 01       	movw	r22, r16
     3b0:	87 d3       	rcall	.+1806   	; 0xac0 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	8c de       	rcall	.-744    	; 0xde <_fpadd_parts>
     3c6:	a7 d2       	rcall	.+1358   	; 0x916 <__pack_f>
     3c8:	a0 96       	adiw	r28, 0x20	; 32
     3ca:	e6 e0       	ldi	r30, 0x06	; 6
     3cc:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

000003d0 <__addsf3>:
     3d0:	a0 e2       	ldi	r26, 0x20	; 32
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	ee ee       	ldi	r30, 0xEE	; 238
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     3dc:	69 83       	std	Y+1, r22	; 0x01
     3de:	7a 83       	std	Y+2, r23	; 0x02
     3e0:	8b 83       	std	Y+3, r24	; 0x03
     3e2:	9c 83       	std	Y+4, r25	; 0x04
     3e4:	2d 83       	std	Y+5, r18	; 0x05
     3e6:	3e 83       	std	Y+6, r19	; 0x06
     3e8:	4f 83       	std	Y+7, r20	; 0x07
     3ea:	58 87       	std	Y+8, r21	; 0x08
     3ec:	f9 e0       	ldi	r31, 0x09	; 9
     3ee:	ef 2e       	mov	r14, r31
     3f0:	f1 2c       	mov	r15, r1
     3f2:	ec 0e       	add	r14, r28
     3f4:	fd 1e       	adc	r15, r29
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	b7 01       	movw	r22, r14
     3fc:	61 d3       	rcall	.+1730   	; 0xac0 <__unpack_f>
     3fe:	8e 01       	movw	r16, r28
     400:	0f 5e       	subi	r16, 0xEF	; 239
     402:	1f 4f       	sbci	r17, 0xFF	; 255
     404:	ce 01       	movw	r24, r28
     406:	05 96       	adiw	r24, 0x05	; 5
     408:	b8 01       	movw	r22, r16
     40a:	5a d3       	rcall	.+1716   	; 0xac0 <__unpack_f>
     40c:	c7 01       	movw	r24, r14
     40e:	b8 01       	movw	r22, r16
     410:	ae 01       	movw	r20, r28
     412:	47 5e       	subi	r20, 0xE7	; 231
     414:	5f 4f       	sbci	r21, 0xFF	; 255
     416:	63 de       	rcall	.-826    	; 0xde <_fpadd_parts>
     418:	7e d2       	rcall	.+1276   	; 0x916 <__pack_f>
     41a:	a0 96       	adiw	r28, 0x20	; 32
     41c:	e6 e0       	ldi	r30, 0x06	; 6
     41e:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

00000422 <__mulsf3>:
     422:	a0 e2       	ldi	r26, 0x20	; 32
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e7 e1       	ldi	r30, 0x17	; 23
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__>
     42e:	69 83       	std	Y+1, r22	; 0x01
     430:	7a 83       	std	Y+2, r23	; 0x02
     432:	8b 83       	std	Y+3, r24	; 0x03
     434:	9c 83       	std	Y+4, r25	; 0x04
     436:	2d 83       	std	Y+5, r18	; 0x05
     438:	3e 83       	std	Y+6, r19	; 0x06
     43a:	4f 83       	std	Y+7, r20	; 0x07
     43c:	58 87       	std	Y+8, r21	; 0x08
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	be 01       	movw	r22, r28
     444:	67 5f       	subi	r22, 0xF7	; 247
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	3b d3       	rcall	.+1654   	; 0xac0 <__unpack_f>
     44a:	ce 01       	movw	r24, r28
     44c:	05 96       	adiw	r24, 0x05	; 5
     44e:	be 01       	movw	r22, r28
     450:	6f 5e       	subi	r22, 0xEF	; 239
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	35 d3       	rcall	.+1642   	; 0xac0 <__unpack_f>
     456:	99 85       	ldd	r25, Y+9	; 0x09
     458:	92 30       	cpi	r25, 0x02	; 2
     45a:	88 f0       	brcs	.+34     	; 0x47e <__mulsf3+0x5c>
     45c:	89 89       	ldd	r24, Y+17	; 0x11
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	c8 f0       	brcs	.+50     	; 0x494 <__mulsf3+0x72>
     462:	94 30       	cpi	r25, 0x04	; 4
     464:	19 f4       	brne	.+6      	; 0x46c <__mulsf3+0x4a>
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	51 f4       	brne	.+20     	; 0x47e <__mulsf3+0x5c>
     46a:	04 c0       	rjmp	.+8      	; 0x474 <__mulsf3+0x52>
     46c:	84 30       	cpi	r24, 0x04	; 4
     46e:	29 f4       	brne	.+10     	; 0x47a <__mulsf3+0x58>
     470:	92 30       	cpi	r25, 0x02	; 2
     472:	81 f4       	brne	.+32     	; 0x494 <__mulsf3+0x72>
     474:	8a e6       	ldi	r24, 0x6A	; 106
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	c6 c0       	rjmp	.+396    	; 0x606 <__mulsf3+0x1e4>
     47a:	92 30       	cpi	r25, 0x02	; 2
     47c:	49 f4       	brne	.+18     	; 0x490 <__mulsf3+0x6e>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	9a 85       	ldd	r25, Y+10	; 0x0a
     482:	8a 89       	ldd	r24, Y+18	; 0x12
     484:	98 13       	cpse	r25, r24
     486:	21 e0       	ldi	r18, 0x01	; 1
     488:	2a 87       	std	Y+10, r18	; 0x0a
     48a:	ce 01       	movw	r24, r28
     48c:	09 96       	adiw	r24, 0x09	; 9
     48e:	bb c0       	rjmp	.+374    	; 0x606 <__mulsf3+0x1e4>
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	49 f4       	brne	.+18     	; 0x4a6 <__mulsf3+0x84>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	9a 85       	ldd	r25, Y+10	; 0x0a
     498:	8a 89       	ldd	r24, Y+18	; 0x12
     49a:	98 13       	cpse	r25, r24
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	2a 8b       	std	Y+18, r18	; 0x12
     4a0:	ce 01       	movw	r24, r28
     4a2:	41 96       	adiw	r24, 0x11	; 17
     4a4:	b0 c0       	rjmp	.+352    	; 0x606 <__mulsf3+0x1e4>
     4a6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4a8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4aa:	4f 84       	ldd	r4, Y+15	; 0x0f
     4ac:	58 88       	ldd	r5, Y+16	; 0x10
     4ae:	6d 88       	ldd	r6, Y+21	; 0x15
     4b0:	7e 88       	ldd	r7, Y+22	; 0x16
     4b2:	8f 88       	ldd	r8, Y+23	; 0x17
     4b4:	98 8c       	ldd	r9, Y+24	; 0x18
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	87 01       	movw	r16, r14
     4bc:	aa 24       	eor	r10, r10
     4be:	bb 24       	eor	r11, r11
     4c0:	65 01       	movw	r12, r10
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	e0 e0       	ldi	r30, 0x00	; 0
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	c1 01       	movw	r24, r2
     4d0:	81 70       	andi	r24, 0x01	; 1
     4d2:	90 70       	andi	r25, 0x00	; 0
     4d4:	89 2b       	or	r24, r25
     4d6:	e9 f0       	breq	.+58     	; 0x512 <__mulsf3+0xf0>
     4d8:	e6 0c       	add	r14, r6
     4da:	f7 1c       	adc	r15, r7
     4dc:	08 1d       	adc	r16, r8
     4de:	19 1d       	adc	r17, r9
     4e0:	9a 01       	movw	r18, r20
     4e2:	ab 01       	movw	r20, r22
     4e4:	2a 0d       	add	r18, r10
     4e6:	3b 1d       	adc	r19, r11
     4e8:	4c 1d       	adc	r20, r12
     4ea:	5d 1d       	adc	r21, r13
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	e6 14       	cp	r14, r6
     4f6:	f7 04       	cpc	r15, r7
     4f8:	08 05       	cpc	r16, r8
     4fa:	19 05       	cpc	r17, r9
     4fc:	20 f4       	brcc	.+8      	; 0x506 <__mulsf3+0xe4>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	a0 e0       	ldi	r26, 0x00	; 0
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	ba 01       	movw	r22, r20
     508:	a9 01       	movw	r20, r18
     50a:	48 0f       	add	r20, r24
     50c:	59 1f       	adc	r21, r25
     50e:	6a 1f       	adc	r22, r26
     510:	7b 1f       	adc	r23, r27
     512:	aa 0c       	add	r10, r10
     514:	bb 1c       	adc	r11, r11
     516:	cc 1c       	adc	r12, r12
     518:	dd 1c       	adc	r13, r13
     51a:	97 fe       	sbrs	r9, 7
     51c:	08 c0       	rjmp	.+16     	; 0x52e <__mulsf3+0x10c>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	a8 2a       	or	r10, r24
     528:	b9 2a       	or	r11, r25
     52a:	ca 2a       	or	r12, r26
     52c:	db 2a       	or	r13, r27
     52e:	31 96       	adiw	r30, 0x01	; 1
     530:	e0 32       	cpi	r30, 0x20	; 32
     532:	f1 05       	cpc	r31, r1
     534:	49 f0       	breq	.+18     	; 0x548 <__mulsf3+0x126>
     536:	66 0c       	add	r6, r6
     538:	77 1c       	adc	r7, r7
     53a:	88 1c       	adc	r8, r8
     53c:	99 1c       	adc	r9, r9
     53e:	56 94       	lsr	r5
     540:	47 94       	ror	r4
     542:	37 94       	ror	r3
     544:	27 94       	ror	r2
     546:	c3 cf       	rjmp	.-122    	; 0x4ce <__mulsf3+0xac>
     548:	fa 85       	ldd	r31, Y+10	; 0x0a
     54a:	ea 89       	ldd	r30, Y+18	; 0x12
     54c:	2b 89       	ldd	r18, Y+19	; 0x13
     54e:	3c 89       	ldd	r19, Y+20	; 0x14
     550:	8b 85       	ldd	r24, Y+11	; 0x0b
     552:	9c 85       	ldd	r25, Y+12	; 0x0c
     554:	28 0f       	add	r18, r24
     556:	39 1f       	adc	r19, r25
     558:	2e 5f       	subi	r18, 0xFE	; 254
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	17 c0       	rjmp	.+46     	; 0x58c <__mulsf3+0x16a>
     55e:	ca 01       	movw	r24, r20
     560:	81 70       	andi	r24, 0x01	; 1
     562:	90 70       	andi	r25, 0x00	; 0
     564:	89 2b       	or	r24, r25
     566:	61 f0       	breq	.+24     	; 0x580 <__mulsf3+0x15e>
     568:	16 95       	lsr	r17
     56a:	07 95       	ror	r16
     56c:	f7 94       	ror	r15
     56e:	e7 94       	ror	r14
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	b0 e8       	ldi	r27, 0x80	; 128
     578:	e8 2a       	or	r14, r24
     57a:	f9 2a       	or	r15, r25
     57c:	0a 2b       	or	r16, r26
     57e:	1b 2b       	or	r17, r27
     580:	76 95       	lsr	r23
     582:	67 95       	ror	r22
     584:	57 95       	ror	r21
     586:	47 95       	ror	r20
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	77 fd       	sbrc	r23, 7
     58e:	e7 cf       	rjmp	.-50     	; 0x55e <__mulsf3+0x13c>
     590:	0c c0       	rjmp	.+24     	; 0x5aa <__mulsf3+0x188>
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	66 1f       	adc	r22, r22
     598:	77 1f       	adc	r23, r23
     59a:	17 fd       	sbrc	r17, 7
     59c:	41 60       	ori	r20, 0x01	; 1
     59e:	ee 0c       	add	r14, r14
     5a0:	ff 1c       	adc	r15, r15
     5a2:	00 1f       	adc	r16, r16
     5a4:	11 1f       	adc	r17, r17
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	30 40       	sbci	r19, 0x00	; 0
     5aa:	40 30       	cpi	r20, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	59 07       	cpc	r21, r25
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	69 07       	cpc	r22, r25
     5b4:	90 e4       	ldi	r25, 0x40	; 64
     5b6:	79 07       	cpc	r23, r25
     5b8:	60 f3       	brcs	.-40     	; 0x592 <__mulsf3+0x170>
     5ba:	2b 8f       	std	Y+27, r18	; 0x1b
     5bc:	3c 8f       	std	Y+28, r19	; 0x1c
     5be:	db 01       	movw	r26, r22
     5c0:	ca 01       	movw	r24, r20
     5c2:	8f 77       	andi	r24, 0x7F	; 127
     5c4:	90 70       	andi	r25, 0x00	; 0
     5c6:	a0 70       	andi	r26, 0x00	; 0
     5c8:	b0 70       	andi	r27, 0x00	; 0
     5ca:	80 34       	cpi	r24, 0x40	; 64
     5cc:	91 05       	cpc	r25, r1
     5ce:	a1 05       	cpc	r26, r1
     5d0:	b1 05       	cpc	r27, r1
     5d2:	61 f4       	brne	.+24     	; 0x5ec <__mulsf3+0x1ca>
     5d4:	47 fd       	sbrc	r20, 7
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <__mulsf3+0x1ca>
     5d8:	e1 14       	cp	r14, r1
     5da:	f1 04       	cpc	r15, r1
     5dc:	01 05       	cpc	r16, r1
     5de:	11 05       	cpc	r17, r1
     5e0:	29 f0       	breq	.+10     	; 0x5ec <__mulsf3+0x1ca>
     5e2:	40 5c       	subi	r20, 0xC0	; 192
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	6f 4f       	sbci	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	40 78       	andi	r20, 0x80	; 128
     5ec:	1a 8e       	std	Y+26, r1	; 0x1a
     5ee:	fe 17       	cp	r31, r30
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <__mulsf3+0x1d4>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8a 8f       	std	Y+26, r24	; 0x1a
     5f6:	4d 8f       	std	Y+29, r20	; 0x1d
     5f8:	5e 8f       	std	Y+30, r21	; 0x1e
     5fa:	6f 8f       	std	Y+31, r22	; 0x1f
     5fc:	78 a3       	std	Y+32, r23	; 0x20
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	89 8f       	std	Y+25, r24	; 0x19
     602:	ce 01       	movw	r24, r28
     604:	49 96       	adiw	r24, 0x19	; 25
     606:	87 d1       	rcall	.+782    	; 0x916 <__pack_f>
     608:	a0 96       	adiw	r28, 0x20	; 32
     60a:	e2 e1       	ldi	r30, 0x12	; 18
     60c:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__>

00000610 <__divsf3>:
     610:	a8 e1       	ldi	r26, 0x18	; 24
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	ee e0       	ldi	r30, 0x0E	; 14
     616:	f3 e0       	ldi	r31, 0x03	; 3
     618:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x10>
     61c:	69 83       	std	Y+1, r22	; 0x01
     61e:	7a 83       	std	Y+2, r23	; 0x02
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	9c 83       	std	Y+4, r25	; 0x04
     624:	2d 83       	std	Y+5, r18	; 0x05
     626:	3e 83       	std	Y+6, r19	; 0x06
     628:	4f 83       	std	Y+7, r20	; 0x07
     62a:	58 87       	std	Y+8, r21	; 0x08
     62c:	b9 e0       	ldi	r27, 0x09	; 9
     62e:	eb 2e       	mov	r14, r27
     630:	f1 2c       	mov	r15, r1
     632:	ec 0e       	add	r14, r28
     634:	fd 1e       	adc	r15, r29
     636:	ce 01       	movw	r24, r28
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	b7 01       	movw	r22, r14
     63c:	41 d2       	rcall	.+1154   	; 0xac0 <__unpack_f>
     63e:	8e 01       	movw	r16, r28
     640:	0f 5e       	subi	r16, 0xEF	; 239
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	ce 01       	movw	r24, r28
     646:	05 96       	adiw	r24, 0x05	; 5
     648:	b8 01       	movw	r22, r16
     64a:	3a d2       	rcall	.+1140   	; 0xac0 <__unpack_f>
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	22 30       	cpi	r18, 0x02	; 2
     650:	08 f4       	brcc	.+2      	; 0x654 <__divsf3+0x44>
     652:	7e c0       	rjmp	.+252    	; 0x750 <__divsf3+0x140>
     654:	39 89       	ldd	r19, Y+17	; 0x11
     656:	32 30       	cpi	r19, 0x02	; 2
     658:	10 f4       	brcc	.+4      	; 0x65e <__divsf3+0x4e>
     65a:	b8 01       	movw	r22, r16
     65c:	7c c0       	rjmp	.+248    	; 0x756 <__divsf3+0x146>
     65e:	8a 85       	ldd	r24, Y+10	; 0x0a
     660:	9a 89       	ldd	r25, Y+18	; 0x12
     662:	89 27       	eor	r24, r25
     664:	8a 87       	std	Y+10, r24	; 0x0a
     666:	24 30       	cpi	r18, 0x04	; 4
     668:	11 f0       	breq	.+4      	; 0x66e <__divsf3+0x5e>
     66a:	22 30       	cpi	r18, 0x02	; 2
     66c:	31 f4       	brne	.+12     	; 0x67a <__divsf3+0x6a>
     66e:	23 17       	cp	r18, r19
     670:	09 f0       	breq	.+2      	; 0x674 <__divsf3+0x64>
     672:	6e c0       	rjmp	.+220    	; 0x750 <__divsf3+0x140>
     674:	6a e6       	ldi	r22, 0x6A	; 106
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	6e c0       	rjmp	.+220    	; 0x756 <__divsf3+0x146>
     67a:	34 30       	cpi	r19, 0x04	; 4
     67c:	39 f4       	brne	.+14     	; 0x68c <__divsf3+0x7c>
     67e:	1d 86       	std	Y+13, r1	; 0x0d
     680:	1e 86       	std	Y+14, r1	; 0x0e
     682:	1f 86       	std	Y+15, r1	; 0x0f
     684:	18 8a       	std	Y+16, r1	; 0x10
     686:	1c 86       	std	Y+12, r1	; 0x0c
     688:	1b 86       	std	Y+11, r1	; 0x0b
     68a:	04 c0       	rjmp	.+8      	; 0x694 <__divsf3+0x84>
     68c:	32 30       	cpi	r19, 0x02	; 2
     68e:	21 f4       	brne	.+8      	; 0x698 <__divsf3+0x88>
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	89 87       	std	Y+9, r24	; 0x09
     694:	b7 01       	movw	r22, r14
     696:	5f c0       	rjmp	.+190    	; 0x756 <__divsf3+0x146>
     698:	2b 85       	ldd	r18, Y+11	; 0x0b
     69a:	3c 85       	ldd	r19, Y+12	; 0x0c
     69c:	8b 89       	ldd	r24, Y+19	; 0x13
     69e:	9c 89       	ldd	r25, Y+20	; 0x14
     6a0:	28 1b       	sub	r18, r24
     6a2:	39 0b       	sbc	r19, r25
     6a4:	3c 87       	std	Y+12, r19	; 0x0c
     6a6:	2b 87       	std	Y+11, r18	; 0x0b
     6a8:	ed 84       	ldd	r14, Y+13	; 0x0d
     6aa:	fe 84       	ldd	r15, Y+14	; 0x0e
     6ac:	0f 85       	ldd	r16, Y+15	; 0x0f
     6ae:	18 89       	ldd	r17, Y+16	; 0x10
     6b0:	ad 88       	ldd	r10, Y+21	; 0x15
     6b2:	be 88       	ldd	r11, Y+22	; 0x16
     6b4:	cf 88       	ldd	r12, Y+23	; 0x17
     6b6:	d8 8c       	ldd	r13, Y+24	; 0x18
     6b8:	ea 14       	cp	r14, r10
     6ba:	fb 04       	cpc	r15, r11
     6bc:	0c 05       	cpc	r16, r12
     6be:	1d 05       	cpc	r17, r13
     6c0:	40 f4       	brcc	.+16     	; 0x6d2 <__divsf3+0xc2>
     6c2:	ee 0c       	add	r14, r14
     6c4:	ff 1c       	adc	r15, r15
     6c6:	00 1f       	adc	r16, r16
     6c8:	11 1f       	adc	r17, r17
     6ca:	21 50       	subi	r18, 0x01	; 1
     6cc:	30 40       	sbci	r19, 0x00	; 0
     6ce:	3c 87       	std	Y+12, r19	; 0x0c
     6d0:	2b 87       	std	Y+11, r18	; 0x0b
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	a0 e0       	ldi	r26, 0x00	; 0
     6e0:	b0 e4       	ldi	r27, 0x40	; 64
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	ea 14       	cp	r14, r10
     6e8:	fb 04       	cpc	r15, r11
     6ea:	0c 05       	cpc	r16, r12
     6ec:	1d 05       	cpc	r17, r13
     6ee:	40 f0       	brcs	.+16     	; 0x700 <__divsf3+0xf0>
     6f0:	28 2b       	or	r18, r24
     6f2:	39 2b       	or	r19, r25
     6f4:	4a 2b       	or	r20, r26
     6f6:	5b 2b       	or	r21, r27
     6f8:	ea 18       	sub	r14, r10
     6fa:	fb 08       	sbc	r15, r11
     6fc:	0c 09       	sbc	r16, r12
     6fe:	1d 09       	sbc	r17, r13
     700:	b6 95       	lsr	r27
     702:	a7 95       	ror	r26
     704:	97 95       	ror	r25
     706:	87 95       	ror	r24
     708:	ee 0c       	add	r14, r14
     70a:	ff 1c       	adc	r15, r15
     70c:	00 1f       	adc	r16, r16
     70e:	11 1f       	adc	r17, r17
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	6f 31       	cpi	r22, 0x1F	; 31
     716:	71 05       	cpc	r23, r1
     718:	31 f7       	brne	.-52     	; 0x6e6 <__divsf3+0xd6>
     71a:	da 01       	movw	r26, r20
     71c:	c9 01       	movw	r24, r18
     71e:	8f 77       	andi	r24, 0x7F	; 127
     720:	90 70       	andi	r25, 0x00	; 0
     722:	a0 70       	andi	r26, 0x00	; 0
     724:	b0 70       	andi	r27, 0x00	; 0
     726:	80 34       	cpi	r24, 0x40	; 64
     728:	91 05       	cpc	r25, r1
     72a:	a1 05       	cpc	r26, r1
     72c:	b1 05       	cpc	r27, r1
     72e:	61 f4       	brne	.+24     	; 0x748 <__divsf3+0x138>
     730:	27 fd       	sbrc	r18, 7
     732:	0a c0       	rjmp	.+20     	; 0x748 <__divsf3+0x138>
     734:	e1 14       	cp	r14, r1
     736:	f1 04       	cpc	r15, r1
     738:	01 05       	cpc	r16, r1
     73a:	11 05       	cpc	r17, r1
     73c:	29 f0       	breq	.+10     	; 0x748 <__divsf3+0x138>
     73e:	20 5c       	subi	r18, 0xC0	; 192
     740:	3f 4f       	sbci	r19, 0xFF	; 255
     742:	4f 4f       	sbci	r20, 0xFF	; 255
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	20 78       	andi	r18, 0x80	; 128
     748:	2d 87       	std	Y+13, r18	; 0x0d
     74a:	3e 87       	std	Y+14, r19	; 0x0e
     74c:	4f 87       	std	Y+15, r20	; 0x0f
     74e:	58 8b       	std	Y+16, r21	; 0x10
     750:	be 01       	movw	r22, r28
     752:	67 5f       	subi	r22, 0xF7	; 247
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	cb 01       	movw	r24, r22
     758:	de d0       	rcall	.+444    	; 0x916 <__pack_f>
     75a:	68 96       	adiw	r28, 0x18	; 24
     75c:	ea e0       	ldi	r30, 0x0A	; 10
     75e:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x10>

00000762 <__gtsf2>:
     762:	a8 e1       	ldi	r26, 0x18	; 24
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	e7 eb       	ldi	r30, 0xB7	; 183
     768:	f3 e0       	ldi	r31, 0x03	; 3
     76a:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     76e:	69 83       	std	Y+1, r22	; 0x01
     770:	7a 83       	std	Y+2, r23	; 0x02
     772:	8b 83       	std	Y+3, r24	; 0x03
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	2d 83       	std	Y+5, r18	; 0x05
     778:	3e 83       	std	Y+6, r19	; 0x06
     77a:	4f 83       	std	Y+7, r20	; 0x07
     77c:	58 87       	std	Y+8, r21	; 0x08
     77e:	89 e0       	ldi	r24, 0x09	; 9
     780:	e8 2e       	mov	r14, r24
     782:	f1 2c       	mov	r15, r1
     784:	ec 0e       	add	r14, r28
     786:	fd 1e       	adc	r15, r29
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	b7 01       	movw	r22, r14
     78e:	98 d1       	rcall	.+816    	; 0xac0 <__unpack_f>
     790:	8e 01       	movw	r16, r28
     792:	0f 5e       	subi	r16, 0xEF	; 239
     794:	1f 4f       	sbci	r17, 0xFF	; 255
     796:	ce 01       	movw	r24, r28
     798:	05 96       	adiw	r24, 0x05	; 5
     79a:	b8 01       	movw	r22, r16
     79c:	91 d1       	rcall	.+802    	; 0xac0 <__unpack_f>
     79e:	89 85       	ldd	r24, Y+9	; 0x09
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	38 f0       	brcs	.+14     	; 0x7b2 <__gtsf2+0x50>
     7a4:	89 89       	ldd	r24, Y+17	; 0x11
     7a6:	82 30       	cpi	r24, 0x02	; 2
     7a8:	20 f0       	brcs	.+8      	; 0x7b2 <__gtsf2+0x50>
     7aa:	c7 01       	movw	r24, r14
     7ac:	b8 01       	movw	r22, r16
     7ae:	00 d2       	rcall	.+1024   	; 0xbb0 <__fpcmp_parts_f>
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <__gtsf2+0x52>
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	68 96       	adiw	r28, 0x18	; 24
     7b6:	e6 e0       	ldi	r30, 0x06	; 6
     7b8:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

000007bc <__gesf2>:
     7bc:	a8 e1       	ldi	r26, 0x18	; 24
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	e4 ee       	ldi	r30, 0xE4	; 228
     7c2:	f3 e0       	ldi	r31, 0x03	; 3
     7c4:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     7c8:	69 83       	std	Y+1, r22	; 0x01
     7ca:	7a 83       	std	Y+2, r23	; 0x02
     7cc:	8b 83       	std	Y+3, r24	; 0x03
     7ce:	9c 83       	std	Y+4, r25	; 0x04
     7d0:	2d 83       	std	Y+5, r18	; 0x05
     7d2:	3e 83       	std	Y+6, r19	; 0x06
     7d4:	4f 83       	std	Y+7, r20	; 0x07
     7d6:	58 87       	std	Y+8, r21	; 0x08
     7d8:	89 e0       	ldi	r24, 0x09	; 9
     7da:	e8 2e       	mov	r14, r24
     7dc:	f1 2c       	mov	r15, r1
     7de:	ec 0e       	add	r14, r28
     7e0:	fd 1e       	adc	r15, r29
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	b7 01       	movw	r22, r14
     7e8:	6b d1       	rcall	.+726    	; 0xac0 <__unpack_f>
     7ea:	8e 01       	movw	r16, r28
     7ec:	0f 5e       	subi	r16, 0xEF	; 239
     7ee:	1f 4f       	sbci	r17, 0xFF	; 255
     7f0:	ce 01       	movw	r24, r28
     7f2:	05 96       	adiw	r24, 0x05	; 5
     7f4:	b8 01       	movw	r22, r16
     7f6:	64 d1       	rcall	.+712    	; 0xac0 <__unpack_f>
     7f8:	89 85       	ldd	r24, Y+9	; 0x09
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	38 f0       	brcs	.+14     	; 0x80c <__gesf2+0x50>
     7fe:	89 89       	ldd	r24, Y+17	; 0x11
     800:	82 30       	cpi	r24, 0x02	; 2
     802:	20 f0       	brcs	.+8      	; 0x80c <__gesf2+0x50>
     804:	c7 01       	movw	r24, r14
     806:	b8 01       	movw	r22, r16
     808:	d3 d1       	rcall	.+934    	; 0xbb0 <__fpcmp_parts_f>
     80a:	01 c0       	rjmp	.+2      	; 0x80e <__gesf2+0x52>
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	68 96       	adiw	r28, 0x18	; 24
     810:	e6 e0       	ldi	r30, 0x06	; 6
     812:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

00000816 <__ltsf2>:
     816:	a8 e1       	ldi	r26, 0x18	; 24
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e1 e1       	ldi	r30, 0x11	; 17
     81c:	f4 e0       	ldi	r31, 0x04	; 4
     81e:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     822:	69 83       	std	Y+1, r22	; 0x01
     824:	7a 83       	std	Y+2, r23	; 0x02
     826:	8b 83       	std	Y+3, r24	; 0x03
     828:	9c 83       	std	Y+4, r25	; 0x04
     82a:	2d 83       	std	Y+5, r18	; 0x05
     82c:	3e 83       	std	Y+6, r19	; 0x06
     82e:	4f 83       	std	Y+7, r20	; 0x07
     830:	58 87       	std	Y+8, r21	; 0x08
     832:	89 e0       	ldi	r24, 0x09	; 9
     834:	e8 2e       	mov	r14, r24
     836:	f1 2c       	mov	r15, r1
     838:	ec 0e       	add	r14, r28
     83a:	fd 1e       	adc	r15, r29
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	b7 01       	movw	r22, r14
     842:	3e d1       	rcall	.+636    	; 0xac0 <__unpack_f>
     844:	8e 01       	movw	r16, r28
     846:	0f 5e       	subi	r16, 0xEF	; 239
     848:	1f 4f       	sbci	r17, 0xFF	; 255
     84a:	ce 01       	movw	r24, r28
     84c:	05 96       	adiw	r24, 0x05	; 5
     84e:	b8 01       	movw	r22, r16
     850:	37 d1       	rcall	.+622    	; 0xac0 <__unpack_f>
     852:	89 85       	ldd	r24, Y+9	; 0x09
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	38 f0       	brcs	.+14     	; 0x866 <__stack+0x7>
     858:	89 89       	ldd	r24, Y+17	; 0x11
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	20 f0       	brcs	.+8      	; 0x866 <__stack+0x7>
     85e:	c7 01       	movw	r24, r14
     860:	b8 01       	movw	r22, r16
     862:	a6 d1       	rcall	.+844    	; 0xbb0 <__fpcmp_parts_f>
     864:	01 c0       	rjmp	.+2      	; 0x868 <__stack+0x9>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	68 96       	adiw	r28, 0x18	; 24
     86a:	e6 e0       	ldi	r30, 0x06	; 6
     86c:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

00000870 <__fixsfsi>:
     870:	ac e0       	ldi	r26, 0x0C	; 12
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	ee e3       	ldi	r30, 0x3E	; 62
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__prologue_saves__+0x20>
     87c:	69 83       	std	Y+1, r22	; 0x01
     87e:	7a 83       	std	Y+2, r23	; 0x02
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	9c 83       	std	Y+4, r25	; 0x04
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	be 01       	movw	r22, r28
     88a:	6b 5f       	subi	r22, 0xFB	; 251
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	18 d1       	rcall	.+560    	; 0xac0 <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x7e>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x7e>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x36>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x88>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x92>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x7e>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4c>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x88>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x92>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x66>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x5e>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9a>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9a>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9a>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9a>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 be 11 	jmp	0x237c	; 0x237c <__epilogue_restores__+0x20>

00000916 <__pack_f>:
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	fc 01       	movw	r30, r24
     922:	e4 80       	ldd	r14, Z+4	; 0x04
     924:	f5 80       	ldd	r15, Z+5	; 0x05
     926:	06 81       	ldd	r16, Z+6	; 0x06
     928:	17 81       	ldd	r17, Z+7	; 0x07
     92a:	d1 80       	ldd	r13, Z+1	; 0x01
     92c:	80 81       	ld	r24, Z
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	48 f4       	brcc	.+18     	; 0x944 <__pack_f+0x2e>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e1       	ldi	r26, 0x10	; 16
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e8 2a       	or	r14, r24
     93c:	f9 2a       	or	r15, r25
     93e:	0a 2b       	or	r16, r26
     940:	1b 2b       	or	r17, r27
     942:	a5 c0       	rjmp	.+330    	; 0xa8e <__pack_f+0x178>
     944:	84 30       	cpi	r24, 0x04	; 4
     946:	09 f4       	brne	.+2      	; 0x94a <__pack_f+0x34>
     948:	9f c0       	rjmp	.+318    	; 0xa88 <__pack_f+0x172>
     94a:	82 30       	cpi	r24, 0x02	; 2
     94c:	21 f4       	brne	.+8      	; 0x956 <__pack_f+0x40>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	05 c0       	rjmp	.+10     	; 0x960 <__pack_f+0x4a>
     956:	e1 14       	cp	r14, r1
     958:	f1 04       	cpc	r15, r1
     95a:	01 05       	cpc	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	19 f4       	brne	.+6      	; 0x966 <__pack_f+0x50>
     960:	e0 e0       	ldi	r30, 0x00	; 0
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	96 c0       	rjmp	.+300    	; 0xa92 <__pack_f+0x17c>
     966:	62 81       	ldd	r22, Z+2	; 0x02
     968:	73 81       	ldd	r23, Z+3	; 0x03
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	62 38       	cpi	r22, 0x82	; 130
     96e:	79 07       	cpc	r23, r25
     970:	0c f0       	brlt	.+2      	; 0x974 <__pack_f+0x5e>
     972:	5b c0       	rjmp	.+182    	; 0xa2a <__pack_f+0x114>
     974:	22 e8       	ldi	r18, 0x82	; 130
     976:	3f ef       	ldi	r19, 0xFF	; 255
     978:	26 1b       	sub	r18, r22
     97a:	37 0b       	sbc	r19, r23
     97c:	2a 31       	cpi	r18, 0x1A	; 26
     97e:	31 05       	cpc	r19, r1
     980:	2c f0       	brlt	.+10     	; 0x98c <__pack_f+0x76>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	2a c0       	rjmp	.+84     	; 0x9e0 <__pack_f+0xca>
     98c:	b8 01       	movw	r22, r16
     98e:	a7 01       	movw	r20, r14
     990:	02 2e       	mov	r0, r18
     992:	04 c0       	rjmp	.+8      	; 0x99c <__pack_f+0x86>
     994:	76 95       	lsr	r23
     996:	67 95       	ror	r22
     998:	57 95       	ror	r21
     99a:	47 95       	ror	r20
     99c:	0a 94       	dec	r0
     99e:	d2 f7       	brpl	.-12     	; 0x994 <__pack_f+0x7e>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__pack_f+0x9c>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	aa 1f       	adc	r26, r26
     9b0:	bb 1f       	adc	r27, r27
     9b2:	2a 95       	dec	r18
     9b4:	d2 f7       	brpl	.-12     	; 0x9aa <__pack_f+0x94>
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	a1 09       	sbc	r26, r1
     9ba:	b1 09       	sbc	r27, r1
     9bc:	8e 21       	and	r24, r14
     9be:	9f 21       	and	r25, r15
     9c0:	a0 23       	and	r26, r16
     9c2:	b1 23       	and	r27, r17
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	a1 05       	cpc	r26, r1
     9c8:	b1 05       	cpc	r27, r1
     9ca:	21 f0       	breq	.+8      	; 0x9d4 <__pack_f+0xbe>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	9a 01       	movw	r18, r20
     9d6:	ab 01       	movw	r20, r22
     9d8:	28 2b       	or	r18, r24
     9da:	39 2b       	or	r19, r25
     9dc:	4a 2b       	or	r20, r26
     9de:	5b 2b       	or	r21, r27
     9e0:	da 01       	movw	r26, r20
     9e2:	c9 01       	movw	r24, r18
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	90 70       	andi	r25, 0x00	; 0
     9e8:	a0 70       	andi	r26, 0x00	; 0
     9ea:	b0 70       	andi	r27, 0x00	; 0
     9ec:	80 34       	cpi	r24, 0x40	; 64
     9ee:	91 05       	cpc	r25, r1
     9f0:	a1 05       	cpc	r26, r1
     9f2:	b1 05       	cpc	r27, r1
     9f4:	39 f4       	brne	.+14     	; 0xa04 <__pack_f+0xee>
     9f6:	27 ff       	sbrs	r18, 7
     9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__pack_f+0xf6>
     9fa:	20 5c       	subi	r18, 0xC0	; 192
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	4f 4f       	sbci	r20, 0xFF	; 255
     a00:	5f 4f       	sbci	r21, 0xFF	; 255
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__pack_f+0xf6>
     a04:	21 5c       	subi	r18, 0xC1	; 193
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	4f 4f       	sbci	r20, 0xFF	; 255
     a0a:	5f 4f       	sbci	r21, 0xFF	; 255
     a0c:	e0 e0       	ldi	r30, 0x00	; 0
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	20 30       	cpi	r18, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	3a 07       	cpc	r19, r26
     a16:	a0 e0       	ldi	r26, 0x00	; 0
     a18:	4a 07       	cpc	r20, r26
     a1a:	a0 e4       	ldi	r26, 0x40	; 64
     a1c:	5a 07       	cpc	r21, r26
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <__pack_f+0x10e>
     a20:	e1 e0       	ldi	r30, 0x01	; 1
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	79 01       	movw	r14, r18
     a26:	8a 01       	movw	r16, r20
     a28:	27 c0       	rjmp	.+78     	; 0xa78 <__pack_f+0x162>
     a2a:	60 38       	cpi	r22, 0x80	; 128
     a2c:	71 05       	cpc	r23, r1
     a2e:	64 f5       	brge	.+88     	; 0xa88 <__pack_f+0x172>
     a30:	fb 01       	movw	r30, r22
     a32:	e1 58       	subi	r30, 0x81	; 129
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	d8 01       	movw	r26, r16
     a38:	c7 01       	movw	r24, r14
     a3a:	8f 77       	andi	r24, 0x7F	; 127
     a3c:	90 70       	andi	r25, 0x00	; 0
     a3e:	a0 70       	andi	r26, 0x00	; 0
     a40:	b0 70       	andi	r27, 0x00	; 0
     a42:	80 34       	cpi	r24, 0x40	; 64
     a44:	91 05       	cpc	r25, r1
     a46:	a1 05       	cpc	r26, r1
     a48:	b1 05       	cpc	r27, r1
     a4a:	39 f4       	brne	.+14     	; 0xa5a <__pack_f+0x144>
     a4c:	e7 fe       	sbrs	r14, 7
     a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__pack_f+0x154>
     a50:	80 e4       	ldi	r24, 0x40	; 64
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__pack_f+0x14c>
     a5a:	8f e3       	ldi	r24, 0x3F	; 63
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e8 0e       	add	r14, r24
     a64:	f9 1e       	adc	r15, r25
     a66:	0a 1f       	adc	r16, r26
     a68:	1b 1f       	adc	r17, r27
     a6a:	17 ff       	sbrs	r17, 7
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__pack_f+0x162>
     a6e:	16 95       	lsr	r17
     a70:	07 95       	ror	r16
     a72:	f7 94       	ror	r15
     a74:	e7 94       	ror	r14
     a76:	31 96       	adiw	r30, 0x01	; 1
     a78:	87 e0       	ldi	r24, 0x07	; 7
     a7a:	16 95       	lsr	r17
     a7c:	07 95       	ror	r16
     a7e:	f7 94       	ror	r15
     a80:	e7 94       	ror	r14
     a82:	8a 95       	dec	r24
     a84:	d1 f7       	brne	.-12     	; 0xa7a <__pack_f+0x164>
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <__pack_f+0x17c>
     a88:	ee 24       	eor	r14, r14
     a8a:	ff 24       	eor	r15, r15
     a8c:	87 01       	movw	r16, r14
     a8e:	ef ef       	ldi	r30, 0xFF	; 255
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	6e 2f       	mov	r22, r30
     a94:	67 95       	ror	r22
     a96:	66 27       	eor	r22, r22
     a98:	67 95       	ror	r22
     a9a:	90 2f       	mov	r25, r16
     a9c:	9f 77       	andi	r25, 0x7F	; 127
     a9e:	d7 94       	ror	r13
     aa0:	dd 24       	eor	r13, r13
     aa2:	d7 94       	ror	r13
     aa4:	8e 2f       	mov	r24, r30
     aa6:	86 95       	lsr	r24
     aa8:	49 2f       	mov	r20, r25
     aaa:	46 2b       	or	r20, r22
     aac:	58 2f       	mov	r21, r24
     aae:	5d 29       	or	r21, r13
     ab0:	b7 01       	movw	r22, r14
     ab2:	ca 01       	movw	r24, r20
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	08 95       	ret

00000ac0 <__unpack_f>:
     ac0:	fc 01       	movw	r30, r24
     ac2:	db 01       	movw	r26, r22
     ac4:	40 81       	ld	r20, Z
     ac6:	51 81       	ldd	r21, Z+1	; 0x01
     ac8:	22 81       	ldd	r18, Z+2	; 0x02
     aca:	62 2f       	mov	r22, r18
     acc:	6f 77       	andi	r22, 0x7F	; 127
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	22 1f       	adc	r18, r18
     ad2:	22 27       	eor	r18, r18
     ad4:	22 1f       	adc	r18, r18
     ad6:	93 81       	ldd	r25, Z+3	; 0x03
     ad8:	89 2f       	mov	r24, r25
     ada:	88 0f       	add	r24, r24
     adc:	82 2b       	or	r24, r18
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	99 1f       	adc	r25, r25
     ae4:	99 27       	eor	r25, r25
     ae6:	99 1f       	adc	r25, r25
     ae8:	11 96       	adiw	r26, 0x01	; 1
     aea:	9c 93       	st	X, r25
     aec:	11 97       	sbiw	r26, 0x01	; 1
     aee:	21 15       	cp	r18, r1
     af0:	31 05       	cpc	r19, r1
     af2:	a9 f5       	brne	.+106    	; 0xb5e <__unpack_f+0x9e>
     af4:	41 15       	cp	r20, r1
     af6:	51 05       	cpc	r21, r1
     af8:	61 05       	cpc	r22, r1
     afa:	71 05       	cpc	r23, r1
     afc:	11 f4       	brne	.+4      	; 0xb02 <__unpack_f+0x42>
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	37 c0       	rjmp	.+110    	; 0xb70 <__unpack_f+0xb0>
     b02:	82 e8       	ldi	r24, 0x82	; 130
     b04:	9f ef       	ldi	r25, 0xFF	; 255
     b06:	13 96       	adiw	r26, 0x03	; 3
     b08:	9c 93       	st	X, r25
     b0a:	8e 93       	st	-X, r24
     b0c:	12 97       	sbiw	r26, 0x02	; 2
     b0e:	9a 01       	movw	r18, r20
     b10:	ab 01       	movw	r20, r22
     b12:	67 e0       	ldi	r22, 0x07	; 7
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	44 1f       	adc	r20, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	6a 95       	dec	r22
     b1e:	d1 f7       	brne	.-12     	; 0xb14 <__unpack_f+0x54>
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	8c 93       	st	X, r24
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__unpack_f+0x80>
     b26:	22 0f       	add	r18, r18
     b28:	33 1f       	adc	r19, r19
     b2a:	44 1f       	adc	r20, r20
     b2c:	55 1f       	adc	r21, r21
     b2e:	12 96       	adiw	r26, 0x02	; 2
     b30:	8d 91       	ld	r24, X+
     b32:	9c 91       	ld	r25, X
     b34:	13 97       	sbiw	r26, 0x03	; 3
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	13 96       	adiw	r26, 0x03	; 3
     b3a:	9c 93       	st	X, r25
     b3c:	8e 93       	st	-X, r24
     b3e:	12 97       	sbiw	r26, 0x02	; 2
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	38 07       	cpc	r19, r24
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	48 07       	cpc	r20, r24
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	58 07       	cpc	r21, r24
     b4e:	58 f3       	brcs	.-42     	; 0xb26 <__unpack_f+0x66>
     b50:	14 96       	adiw	r26, 0x04	; 4
     b52:	2d 93       	st	X+, r18
     b54:	3d 93       	st	X+, r19
     b56:	4d 93       	st	X+, r20
     b58:	5c 93       	st	X, r21
     b5a:	17 97       	sbiw	r26, 0x07	; 7
     b5c:	08 95       	ret
     b5e:	2f 3f       	cpi	r18, 0xFF	; 255
     b60:	31 05       	cpc	r19, r1
     b62:	79 f4       	brne	.+30     	; 0xb82 <__unpack_f+0xc2>
     b64:	41 15       	cp	r20, r1
     b66:	51 05       	cpc	r21, r1
     b68:	61 05       	cpc	r22, r1
     b6a:	71 05       	cpc	r23, r1
     b6c:	19 f4       	brne	.+6      	; 0xb74 <__unpack_f+0xb4>
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	8c 93       	st	X, r24
     b72:	08 95       	ret
     b74:	64 ff       	sbrs	r22, 4
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <__unpack_f+0xbe>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	8c 93       	st	X, r24
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__unpack_f+0xe2>
     b7e:	1c 92       	st	X, r1
     b80:	10 c0       	rjmp	.+32     	; 0xba2 <__unpack_f+0xe2>
     b82:	2f 57       	subi	r18, 0x7F	; 127
     b84:	30 40       	sbci	r19, 0x00	; 0
     b86:	13 96       	adiw	r26, 0x03	; 3
     b88:	3c 93       	st	X, r19
     b8a:	2e 93       	st	-X, r18
     b8c:	12 97       	sbiw	r26, 0x02	; 2
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	8c 93       	st	X, r24
     b92:	87 e0       	ldi	r24, 0x07	; 7
     b94:	44 0f       	add	r20, r20
     b96:	55 1f       	adc	r21, r21
     b98:	66 1f       	adc	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	8a 95       	dec	r24
     b9e:	d1 f7       	brne	.-12     	; 0xb94 <__unpack_f+0xd4>
     ba0:	70 64       	ori	r23, 0x40	; 64
     ba2:	14 96       	adiw	r26, 0x04	; 4
     ba4:	4d 93       	st	X+, r20
     ba6:	5d 93       	st	X+, r21
     ba8:	6d 93       	st	X+, r22
     baa:	7c 93       	st	X, r23
     bac:	17 97       	sbiw	r26, 0x07	; 7
     bae:	08 95       	ret

00000bb0 <__fpcmp_parts_f>:
     bb0:	1f 93       	push	r17
     bb2:	dc 01       	movw	r26, r24
     bb4:	fb 01       	movw	r30, r22
     bb6:	9c 91       	ld	r25, X
     bb8:	92 30       	cpi	r25, 0x02	; 2
     bba:	08 f4       	brcc	.+2      	; 0xbbe <__fpcmp_parts_f+0xe>
     bbc:	47 c0       	rjmp	.+142    	; 0xc4c <__fpcmp_parts_f+0x9c>
     bbe:	80 81       	ld	r24, Z
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <__fpcmp_parts_f+0x16>
     bc4:	43 c0       	rjmp	.+134    	; 0xc4c <__fpcmp_parts_f+0x9c>
     bc6:	94 30       	cpi	r25, 0x04	; 4
     bc8:	51 f4       	brne	.+20     	; 0xbde <__fpcmp_parts_f+0x2e>
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	1c 91       	ld	r17, X
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	99 f5       	brne	.+102    	; 0xc38 <__fpcmp_parts_f+0x88>
     bd2:	81 81       	ldd	r24, Z+1	; 0x01
     bd4:	68 2f       	mov	r22, r24
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	61 1b       	sub	r22, r17
     bda:	71 09       	sbc	r23, r1
     bdc:	3f c0       	rjmp	.+126    	; 0xc5c <__fpcmp_parts_f+0xac>
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	21 f0       	breq	.+8      	; 0xbea <__fpcmp_parts_f+0x3a>
     be2:	92 30       	cpi	r25, 0x02	; 2
     be4:	31 f4       	brne	.+12     	; 0xbf2 <__fpcmp_parts_f+0x42>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	b9 f1       	breq	.+110    	; 0xc58 <__fpcmp_parts_f+0xa8>
     bea:	81 81       	ldd	r24, Z+1	; 0x01
     bec:	88 23       	and	r24, r24
     bee:	89 f1       	breq	.+98     	; 0xc52 <__fpcmp_parts_f+0xa2>
     bf0:	2d c0       	rjmp	.+90     	; 0xc4c <__fpcmp_parts_f+0x9c>
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	1c 91       	ld	r17, X
     bf6:	11 97       	sbiw	r26, 0x01	; 1
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	f1 f0       	breq	.+60     	; 0xc38 <__fpcmp_parts_f+0x88>
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	18 17       	cp	r17, r24
     c00:	d9 f4       	brne	.+54     	; 0xc38 <__fpcmp_parts_f+0x88>
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	2d 91       	ld	r18, X+
     c06:	3c 91       	ld	r19, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	82 17       	cp	r24, r18
     c10:	93 07       	cpc	r25, r19
     c12:	94 f0       	brlt	.+36     	; 0xc38 <__fpcmp_parts_f+0x88>
     c14:	28 17       	cp	r18, r24
     c16:	39 07       	cpc	r19, r25
     c18:	bc f0       	brlt	.+46     	; 0xc48 <__fpcmp_parts_f+0x98>
     c1a:	14 96       	adiw	r26, 0x04	; 4
     c1c:	8d 91       	ld	r24, X+
     c1e:	9d 91       	ld	r25, X+
     c20:	0d 90       	ld	r0, X+
     c22:	bc 91       	ld	r27, X
     c24:	a0 2d       	mov	r26, r0
     c26:	24 81       	ldd	r18, Z+4	; 0x04
     c28:	35 81       	ldd	r19, Z+5	; 0x05
     c2a:	46 81       	ldd	r20, Z+6	; 0x06
     c2c:	57 81       	ldd	r21, Z+7	; 0x07
     c2e:	28 17       	cp	r18, r24
     c30:	39 07       	cpc	r19, r25
     c32:	4a 07       	cpc	r20, r26
     c34:	5b 07       	cpc	r21, r27
     c36:	18 f4       	brcc	.+6      	; 0xc3e <__fpcmp_parts_f+0x8e>
     c38:	11 23       	and	r17, r17
     c3a:	41 f0       	breq	.+16     	; 0xc4c <__fpcmp_parts_f+0x9c>
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <__fpcmp_parts_f+0xa2>
     c3e:	82 17       	cp	r24, r18
     c40:	93 07       	cpc	r25, r19
     c42:	a4 07       	cpc	r26, r20
     c44:	b5 07       	cpc	r27, r21
     c46:	40 f4       	brcc	.+16     	; 0xc58 <__fpcmp_parts_f+0xa8>
     c48:	11 23       	and	r17, r17
     c4a:	19 f0       	breq	.+6      	; 0xc52 <__fpcmp_parts_f+0xa2>
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <__fpcmp_parts_f+0xac>
     c52:	6f ef       	ldi	r22, 0xFF	; 255
     c54:	7f ef       	ldi	r23, 0xFF	; 255
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <__fpcmp_parts_f+0xac>
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	cb 01       	movw	r24, r22
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <DIO_init_port_output>:
 *      Author: mh-sh
 */

#include "hal_DIO.h"

void DIO_init_port_output(enum_port_base_t port_base, u8 port_mask) {
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <DIO_init_port_output+0x6>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 1) |= port_mask;
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	dc 01       	movw	r26, r24
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	fc 01       	movw	r30, r24
     c84:	90 81       	ld	r25, Z
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	89 2b       	or	r24, r25
     c8a:	8c 93       	st	X, r24
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <DIO_write_port>:
void DIO_init_port_input(enum_port_base_t port_base, u8 port_mask) {
	*(volatile u8*) (port_base + 1) &= ~port_mask;
}

void DIO_write_port(enum_port_base_t port_base, u8 port_mask, u8 data) {
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <DIO_write_port+0x6>
     c9c:	0f 92       	push	r0
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	*(volatile u8*) (port_base + 2) &= ~(port_mask);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	88 2f       	mov	r24, r24
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 96       	adiw	r24, 0x02	; 2
     cb0:	dc 01       	movw	r26, r24
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 96       	adiw	r24, 0x02	; 2
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	98 2f       	mov	r25, r24
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	80 95       	com	r24
     cc4:	89 23       	and	r24, r25
     cc6:	8c 93       	st	X, r24
	*(volatile u8*) (port_base + 2) |= data & (port_mask);
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 96       	adiw	r24, 0x02	; 2
     cd0:	dc 01       	movw	r26, r24
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 96       	adiw	r24, 0x02	; 2
     cda:	fc 01       	movw	r30, r24
     cdc:	20 81       	ld	r18, Z
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	89 23       	and	r24, r25
     ce4:	82 2b       	or	r24, r18
     ce6:	8c 93       	st	X, r24
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <DIO_set_pin>:
	*(volatile u8*) (port_base + 2) |= port_mask;
}
void DIO_clear_port(enum_port_base_t port_base, u8 port_mask) {
	*(volatile u8*) (port_base + 2) &= ~port_mask;
}
void DIO_set_pin(enum_port_base_t port_base, u8 pin_no) {
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <DIO_set_pin+0x6>
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 2) |= 1 << pin_no;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	88 2f       	mov	r24, r24
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 96       	adiw	r24, 0x02	; 2
     d0a:	dc 01       	movw	r26, r24
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	88 2f       	mov	r24, r24
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 96       	adiw	r24, 0x02	; 2
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_set_pin+0x38>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_set_pin+0x34>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <DIO_clear_pin>:
void DIO_clear_pin(enum_port_base_t port_base, u8 pin_no) {
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <DIO_clear_pin+0x6>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 2) &= ~(1 << pin_no);
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 96       	adiw	r24, 0x02	; 2
     d54:	dc 01       	movw	r26, r24
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 96       	adiw	r24, 0x02	; 2
     d5e:	fc 01       	movw	r30, r24
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_clear_pin+0x38>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_clear_pin+0x34>
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	8c 93       	st	X, r24
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <__vector_10>:
#include "hal_timer.h"
void (*t0_isr)(), (*t1_isr)(), (*t2_isr)();

void TIMER0_COMP_vect() {
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
	if (t0_isr)
     d92:	80 91 74 00 	lds	r24, 0x0074
     d96:	90 91 75 00 	lds	r25, 0x0075
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	29 f0       	breq	.+10     	; 0xda8 <__vector_10+0x1e>
		t0_isr();
     d9e:	e0 91 74 00 	lds	r30, 0x0074
     da2:	f0 91 75 00 	lds	r31, 0x0075
     da6:	09 95       	icall
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <__vector_4>:
void TIMER2_COMP_vect() {
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	if (t2_isr)
     db6:	80 91 76 00 	lds	r24, 0x0076
     dba:	90 91 77 00 	lds	r25, 0x0077
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	29 f0       	breq	.+10     	; 0xdcc <__vector_4+0x1e>
		t2_isr();
     dc2:	e0 91 76 00 	lds	r30, 0x0076
     dc6:	f0 91 77 00 	lds	r31, 0x0077
     dca:	09 95       	icall
}
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <main>:
	seven_seg_display(minID1, currMin % 10);
	seven_seg_display(minID10, currMin++ / 10);

}

int main(void) {
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <main+0x6>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <main+0x8>
     dda:	00 d0       	rcall	.+0      	; 0xddc <main+0xa>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
//
//	TMU_addTimer(&obj1, 500, PERIODIC, function1);
//	TMU_addTimer(&obj2, 5000, PERIODIC, function2);
//	TMU_addTimer(&obj3, 10000, PERIODIC, function3);
	gcfg_lcd_t lcd;
	lcd.RS = 7;
     de0:	87 e0       	ldi	r24, 0x07	; 7
     de2:	8c 83       	std	Y+4, r24	; 0x04
	lcd.RW = 6;
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	8d 83       	std	Y+5, r24	; 0x05
	lcd.EN = 5;
     de8:	85 e0       	ldi	r24, 0x05	; 5
     dea:	8e 83       	std	Y+6, r24	; 0x06
	lcd.controlPort = BASE_A;
     dec:	89 e3       	ldi	r24, 0x39	; 57
     dee:	8a 83       	std	Y+2, r24	; 0x02
	lcd.dataPort = BASE_B;
     df0:	86 e3       	ldi	r24, 0x36	; 54
     df2:	8b 83       	std	Y+3, r24	; 0x03
	lcd.nbit = n4BIT_MODE;
     df4:	19 82       	std	Y+1, r1	; 0x01
	lcd_init(&lcd);
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	08 d0       	rcall	.+16     	; 0xe0c <lcd_init>
     dfc:	20 e6       	ldi	r18, 0x60	; 96
//	lcd_gotoxy(&lcd, 16, 2);
	lcd_print(&lcd, "test test");
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	ce 01       	movw	r24, r28
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	b9 01       	movw	r22, r18
     e06:	0e 94 63 11 	call	0x22c6	; 0x22c6 <lcd_print>
     e0a:	ff cf       	rjmp	.-2      	; 0xe0a <main+0x38>

00000e0c <lcd_init>:
 *      Author: mh-sh
 */

#include "lcd.h"

void lcd_init(gcfg_lcd_t * lcd) {
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	e2 97       	sbiw	r28, 0x32	; 50
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	9a ab       	std	Y+50, r25	; 0x32
     e22:	89 ab       	std	Y+49, r24	; 0x31

	if (lcd->nbit == n4BIT_MODE) {
     e24:	e9 a9       	ldd	r30, Y+49	; 0x31
     e26:	fa a9       	ldd	r31, Y+50	; 0x32
     e28:	80 81       	ld	r24, Z
     e2a:	88 23       	and	r24, r24
     e2c:	59 f4       	brne	.+22     	; 0xe44 <lcd_init+0x38>
		DIO_init_port_output(lcd->controlPort, 0xF0);
     e2e:	e9 a9       	ldd	r30, Y+49	; 0x31
     e30:	fa a9       	ldd	r31, Y+50	; 0x32
     e32:	81 81       	ldd	r24, Z+1	; 0x01
     e34:	60 ef       	ldi	r22, 0xF0	; 240
     e36:	15 df       	rcall	.-470    	; 0xc62 <DIO_init_port_output>
     e38:	e9 a9       	ldd	r30, Y+49	; 0x31
		DIO_init_port_output(lcd->dataPort, 0xF0);
     e3a:	fa a9       	ldd	r31, Y+50	; 0x32
     e3c:	82 81       	ldd	r24, Z+2	; 0x02
     e3e:	60 ef       	ldi	r22, 0xF0	; 240
     e40:	10 df       	rcall	.-480    	; 0xc62 <DIO_init_port_output>
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <lcd_init+0x56>
     e44:	e9 a9       	ldd	r30, Y+49	; 0x31
     e46:	fa a9       	ldd	r31, Y+50	; 0x32
	} else if (lcd->nbit == n8BIT_MODE) {
     e48:	80 81       	ld	r24, Z
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	51 f4       	brne	.+20     	; 0xe62 <lcd_init+0x56>
     e4e:	e9 a9       	ldd	r30, Y+49	; 0x31
     e50:	fa a9       	ldd	r31, Y+50	; 0x32
		DIO_init_port_output(lcd->controlPort, 0xFF);
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	6f ef       	ldi	r22, 0xFF	; 255
     e56:	05 df       	rcall	.-502    	; 0xc62 <DIO_init_port_output>
     e58:	e9 a9       	ldd	r30, Y+49	; 0x31
     e5a:	fa a9       	ldd	r31, Y+50	; 0x32
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
		DIO_init_port_output(lcd->dataPort, 0xFF);
     e5e:	6f ef       	ldi	r22, 0xFF	; 255
     e60:	00 df       	rcall	.-512    	; 0xc62 <DIO_init_port_output>
     e62:	e9 a9       	ldd	r30, Y+49	; 0x31
     e64:	fa a9       	ldd	r31, Y+50	; 0x32
     e66:	81 81       	ldd	r24, Z+1	; 0x01
     e68:	e9 a9       	ldd	r30, Y+49	; 0x31
	} else {
		// todo error
	}
	DIO_clear_pin(lcd->controlPort, (lcd->EN));
     e6a:	fa a9       	ldd	r31, Y+50	; 0x32
     e6c:	95 81       	ldd	r25, Z+5	; 0x05
     e6e:	69 2f       	mov	r22, r25
     e70:	66 df       	rcall	.-308    	; 0xd3e <DIO_clear_pin>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	aa ef       	ldi	r26, 0xFA	; 250
     e78:	b4 e4       	ldi	r27, 0x44	; 68
     e7a:	8d a7       	std	Y+45, r24	; 0x2d
     e7c:	9e a7       	std	Y+46, r25	; 0x2e
     e7e:	af a7       	std	Y+47, r26	; 0x2f
     e80:	b8 ab       	std	Y+48, r27	; 0x30
     e82:	6d a5       	ldd	r22, Y+45	; 0x2d
     e84:	7e a5       	ldd	r23, Y+46	; 0x2e
     e86:	8f a5       	ldd	r24, Y+47	; 0x2f
     e88:	98 a9       	ldd	r25, Y+48	; 0x30
     e8a:	2b ea       	ldi	r18, 0xAB	; 171
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e8c:	3a ea       	ldi	r19, 0xAA	; 170
     e8e:	4a ea       	ldi	r20, 0xAA	; 170
     e90:	5e e3       	ldi	r21, 0x3E	; 62
     e92:	c7 da       	rcall	.-2674   	; 0x422 <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	89 a7       	std	Y+41, r24	; 0x29
     e9a:	9a a7       	std	Y+42, r25	; 0x2a
     e9c:	ab a7       	std	Y+43, r26	; 0x2b
     e9e:	bc a7       	std	Y+44, r27	; 0x2c
     ea0:	69 a5       	ldd	r22, Y+41	; 0x29
     ea2:	7a a5       	ldd	r23, Y+42	; 0x2a
     ea4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ea6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	b2 dc       	rcall	.-1692   	; 0x816 <__ltsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	1c f4       	brge	.+6      	; 0xebc <lcd_init+0xb0>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	88 a7       	std	Y+40, r24	; 0x28
     eba:	88 c0       	rjmp	.+272    	; 0xfcc <lcd_init+0x1c0>
     ebc:	69 a5       	ldd	r22, Y+41	; 0x29
     ebe:	7a a5       	ldd	r23, Y+42	; 0x2a
     ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec2:	9c a5       	ldd	r25, Y+44	; 0x2c
		__ticks = 1;
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 255)
     eca:	53 e4       	ldi	r21, 0x43	; 67
     ecc:	4a dc       	rcall	.-1900   	; 0x762 <__gtsf2>
     ece:	18 16       	cp	r1, r24
     ed0:	0c f0       	brlt	.+2      	; 0xed4 <lcd_init+0xc8>
     ed2:	74 c0       	rjmp	.+232    	; 0xfbc <lcd_init+0x1b0>
     ed4:	6d a5       	ldd	r22, Y+45	; 0x2d
     ed6:	7e a5       	ldd	r23, Y+46	; 0x2e
     ed8:	8f a5       	ldd	r24, Y+47	; 0x2f
     eda:	98 a9       	ldd	r25, Y+48	; 0x30
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	4a e7       	ldi	r20, 0x7A	; 122
     ee2:	54 e4       	ldi	r21, 0x44	; 68
	{
		_delay_ms(__us / 1000.0);
     ee4:	95 db       	rcall	.-2262   	; 0x610 <__divsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	8c a3       	std	Y+36, r24	; 0x24
     eec:	9d a3       	std	Y+37, r25	; 0x25
     eee:	ae a3       	std	Y+38, r26	; 0x26
     ef0:	bf a3       	std	Y+39, r27	; 0x27
     ef2:	6c a1       	ldd	r22, Y+36	; 0x24
     ef4:	7d a1       	ldd	r23, Y+37	; 0x25
     ef6:	8e a1       	ldd	r24, Y+38	; 0x26
     ef8:	9f a1       	ldd	r25, Y+39	; 0x27
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a e7       	ldi	r20, 0x7A	; 122
     f00:	53 e4       	ldi	r21, 0x43	; 67
     f02:	8f da       	rcall	.-2786   	; 0x422 <__mulsf3>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	88 a3       	std	Y+32, r24	; 0x20
     f0a:	99 a3       	std	Y+33, r25	; 0x21
     f0c:	aa a3       	std	Y+34, r26	; 0x22
     f0e:	bb a3       	std	Y+35, r27	; 0x23
     f10:	68 a1       	ldd	r22, Y+32	; 0x20
     f12:	79 a1       	ldd	r23, Y+33	; 0x21
     f14:	8a a1       	ldd	r24, Y+34	; 0x22
     f16:	9b a1       	ldd	r25, Y+35	; 0x23
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	5f e3       	ldi	r21, 0x3F	; 63
     f20:	7a dc       	rcall	.-1804   	; 0x816 <__ltsf2>
     f22:	88 23       	and	r24, r24
	if (__tmp < 1.0)
     f24:	2c f4       	brge	.+10     	; 0xf30 <lcd_init+0x124>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9f 8f       	std	Y+31, r25	; 0x1f
     f2c:	8e 8f       	std	Y+30, r24	; 0x1e
     f2e:	3b c0       	rjmp	.+118    	; 0xfa6 <lcd_init+0x19a>
     f30:	68 a1       	ldd	r22, Y+32	; 0x20
     f32:	79 a1       	ldd	r23, Y+33	; 0x21
     f34:	8a a1       	ldd	r24, Y+34	; 0x22
     f36:	9b a1       	ldd	r25, Y+35	; 0x23
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
     f3c:	4f e7       	ldi	r20, 0x7F	; 127
     f3e:	57 e4       	ldi	r21, 0x47	; 71
     f40:	10 dc       	rcall	.-2016   	; 0x762 <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	3c f5       	brge	.+78     	; 0xf94 <lcd_init+0x188>
	else if (__tmp > 65535)
     f46:	6c a1       	ldd	r22, Y+36	; 0x24
     f48:	7d a1       	ldd	r23, Y+37	; 0x25
     f4a:	8e a1       	ldd	r24, Y+38	; 0x26
     f4c:	9f a1       	ldd	r25, Y+39	; 0x27
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	65 da       	rcall	.-2870   	; 0x422 <__mulsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	bc 01       	movw	r22, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5e:	cd 01       	movw	r24, r26
     f60:	96 d8       	rcall	.-3796   	; 0x8e <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9f 8f       	std	Y+31, r25	; 0x1f
     f68:	8e 8f       	std	Y+30, r24	; 0x1e
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <lcd_init+0x17e>
     f6c:	89 e1       	ldi	r24, 0x19	; 25
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9d 8f       	std	Y+29, r25	; 0x1d
     f72:	8c 8f       	std	Y+28, r24	; 0x1c
     f74:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f76:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <lcd_init+0x16c>
     f7c:	9d 8f       	std	Y+29, r25	; 0x1d
     f7e:	8c 8f       	std	Y+28, r24	; 0x1c
     f80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f82:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	9f 8f       	std	Y+31, r25	; 0x1f
     f88:	8e 8f       	std	Y+30, r24	; 0x1e
     f8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f8c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <lcd_init+0x160>
     f92:	22 c0       	rjmp	.+68     	; 0xfd8 <lcd_init+0x1cc>
     f94:	68 a1       	ldd	r22, Y+32	; 0x20
     f96:	79 a1       	ldd	r23, Y+33	; 0x21
     f98:	8a a1       	ldd	r24, Y+34	; 0x22
     f9a:	9b a1       	ldd	r25, Y+35	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	78 d8       	rcall	.-3856   	; 0x8e <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9f 8f       	std	Y+31, r25	; 0x1f
     fa4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     faa:	9b 8f       	std	Y+27, r25	; 0x1b
     fac:	8a 8f       	std	Y+26, r24	; 0x1a
     fae:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <lcd_init+0x1a6>
     fb6:	9b 8f       	std	Y+27, r25	; 0x1b
     fb8:	8a 8f       	std	Y+26, r24	; 0x1a
     fba:	0e c0       	rjmp	.+28     	; 0xfd8 <lcd_init+0x1cc>
     fbc:	69 a5       	ldd	r22, Y+41	; 0x29
     fbe:	7a a5       	ldd	r23, Y+42	; 0x2a
     fc0:	8b a5       	ldd	r24, Y+43	; 0x2b
     fc2:	9c a5       	ldd	r25, Y+44	; 0x2c
     fc4:	64 d8       	rcall	.-3896   	; 0x8e <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	88 a7       	std	Y+40, r24	; 0x28
     fcc:	88 a5       	ldd	r24, Y+40	; 0x28
     fce:	89 8f       	std	Y+25, r24	; 0x19
     fd0:	89 8d       	ldd	r24, Y+25	; 0x19
     fd2:	8a 95       	dec	r24
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <lcd_init+0x1c6>
     fd6:	89 8f       	std	Y+25, r24	; 0x19
     fd8:	e9 a9       	ldd	r30, Y+49	; 0x31
     fda:	fa a9       	ldd	r31, Y+50	; 0x32
     fdc:	80 81       	ld	r24, Z
     fde:	88 23       	and	r24, r24
     fe0:	69 f4       	brne	.+26     	; 0xffc <lcd_init+0x1f0>
     fe2:	89 a9       	ldd	r24, Y+49	; 0x31
     fe4:	9a a9       	ldd	r25, Y+50	; 0x32
     fe6:	63 e3       	ldi	r22, 0x33	; 51
     fe8:	dd d0       	rcall	.+442    	; 0x11a4 <lcd_send_command>
     fea:	89 a9       	ldd	r24, Y+49	; 0x31
     fec:	9a a9       	ldd	r25, Y+50	; 0x32
     fee:	62 e3       	ldi	r22, 0x32	; 50
     ff0:	d9 d0       	rcall	.+434    	; 0x11a4 <lcd_send_command>
     ff2:	89 a9       	ldd	r24, Y+49	; 0x31
     ff4:	9a a9       	ldd	r25, Y+50	; 0x32
     ff6:	6c e2       	ldi	r22, 0x2C	; 44
	_delay_us(2000);
	if (lcd->nbit == n4BIT_MODE) {
     ff8:	d5 d0       	rcall	.+426    	; 0x11a4 <lcd_send_command>
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <lcd_init+0x202>
     ffc:	e9 a9       	ldd	r30, Y+49	; 0x31
     ffe:	fa a9       	ldd	r31, Y+50	; 0x32
    1000:	80 81       	ld	r24, Z

		lcd_send_command(lcd, 0x33); //vodoo
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	21 f4       	brne	.+8      	; 0x100e <lcd_init+0x202>
    1006:	89 a9       	ldd	r24, Y+49	; 0x31
    1008:	9a a9       	ldd	r25, Y+50	; 0x32
    100a:	6c e3       	ldi	r22, 0x3C	; 60
		lcd_send_command(lcd, 0x32); //vodoo
    100c:	cb d0       	rcall	.+406    	; 0x11a4 <lcd_send_command>
    100e:	89 a9       	ldd	r24, Y+49	; 0x31
    1010:	9a a9       	ldd	r25, Y+50	; 0x32
    1012:	6e e0       	ldi	r22, 0x0E	; 14
    1014:	c7 d0       	rcall	.+398    	; 0x11a4 <lcd_send_command>
		lcd_send_command(lcd, 0x2C); //2 line , 5*11, 4bit
    1016:	89 a9       	ldd	r24, Y+49	; 0x31
    1018:	9a a9       	ldd	r25, Y+50	; 0x32
    101a:	66 e0       	ldi	r22, 0x06	; 6
    101c:	c3 d0       	rcall	.+390    	; 0x11a4 <lcd_send_command>
    101e:	89 a9       	ldd	r24, Y+49	; 0x31
    1020:	9a a9       	ldd	r25, Y+50	; 0x32
	} else if (lcd->nbit == n8BIT_MODE) {
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	bf d0       	rcall	.+382    	; 0x11a4 <lcd_send_command>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	aa ef       	ldi	r26, 0xFA	; 250
		lcd_send_command(lcd, 0x3C); //2 line , 5*11, 8bit
    102c:	b4 e4       	ldi	r27, 0x44	; 68
    102e:	8d 8b       	std	Y+21, r24	; 0x15
    1030:	9e 8b       	std	Y+22, r25	; 0x16
    1032:	af 8b       	std	Y+23, r26	; 0x17
    1034:	b8 8f       	std	Y+24, r27	; 0x18
	}

	lcd_send_command(lcd, 0x0E); //cursor on
    1036:	6d 89       	ldd	r22, Y+21	; 0x15
    1038:	7e 89       	ldd	r23, Y+22	; 0x16
    103a:	8f 89       	ldd	r24, Y+23	; 0x17
    103c:	98 8d       	ldd	r25, Y+24	; 0x18
    103e:	2b ea       	ldi	r18, 0xAB	; 171
	lcd_send_command(lcd, 0x06); //shift right
    1040:	3a ea       	ldi	r19, 0xAA	; 170
    1042:	4a ea       	ldi	r20, 0xAA	; 170
    1044:	5e e3       	ldi	r21, 0x3E	; 62
    1046:	ed d9       	rcall	.-3110   	; 0x422 <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	89 8b       	std	Y+17, r24	; 0x11
    104e:	9a 8b       	std	Y+18, r25	; 0x12
    1050:	ab 8b       	std	Y+19, r26	; 0x13
    1052:	bc 8b       	std	Y+20, r27	; 0x14
    1054:	69 89       	ldd	r22, Y+17	; 0x11
    1056:	7a 89       	ldd	r23, Y+18	; 0x12
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5f e3       	ldi	r21, 0x3F	; 63
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1064:	d8 db       	rcall	.-2128   	; 0x816 <__ltsf2>
    1066:	88 23       	and	r24, r24
    1068:	1c f4       	brge	.+6      	; 0x1070 <lcd_init+0x264>
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	88 8b       	std	Y+16, r24	; 0x10
    106e:	8b c0       	rjmp	.+278    	; 0x1186 <lcd_init+0x37a>
    1070:	69 89       	ldd	r22, Y+17	; 0x11
    1072:	7a 89       	ldd	r23, Y+18	; 0x12
    1074:	8b 89       	ldd	r24, Y+19	; 0x13
    1076:	9c 89       	ldd	r25, Y+20	; 0x14
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	4f e7       	ldi	r20, 0x7F	; 127
    107e:	53 e4       	ldi	r21, 0x43	; 67
    1080:	70 db       	rcall	.-2336   	; 0x762 <__gtsf2>
    1082:	18 16       	cp	r1, r24
	if (__tmp < 1.0)
    1084:	0c f0       	brlt	.+2      	; 0x1088 <lcd_init+0x27c>
    1086:	76 c0       	rjmp	.+236    	; 0x1174 <lcd_init+0x368>
    1088:	6d 89       	ldd	r22, Y+21	; 0x15
    108a:	7e 89       	ldd	r23, Y+22	; 0x16
    108c:	8f 89       	ldd	r24, Y+23	; 0x17
    108e:	98 8d       	ldd	r25, Y+24	; 0x18
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	4a e7       	ldi	r20, 0x7A	; 122
    1096:	54 e4       	ldi	r21, 0x44	; 68
    1098:	bb da       	rcall	.-2698   	; 0x610 <__divsf3>
    109a:	dc 01       	movw	r26, r24
		__ticks = 1;
    109c:	cb 01       	movw	r24, r22
    109e:	8c 87       	std	Y+12, r24	; 0x0c
    10a0:	9d 87       	std	Y+13, r25	; 0x0d
	else if (__tmp > 255)
    10a2:	ae 87       	std	Y+14, r26	; 0x0e
    10a4:	bf 87       	std	Y+15, r27	; 0x0f
    10a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    10a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    10aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4a e7       	ldi	r20, 0x7A	; 122
    10b4:	53 e4       	ldi	r21, 0x43	; 67
    10b6:	b5 d9       	rcall	.-3222   	; 0x422 <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
	{
		_delay_ms(__us / 1000.0);
    10bc:	88 87       	std	Y+8, r24	; 0x08
    10be:	99 87       	std	Y+9, r25	; 0x09
    10c0:	aa 87       	std	Y+10, r26	; 0x0a
    10c2:	bb 87       	std	Y+11, r27	; 0x0b
    10c4:	68 85       	ldd	r22, Y+8	; 0x08
    10c6:	79 85       	ldd	r23, Y+9	; 0x09
    10c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	a0 db       	rcall	.-2240   	; 0x816 <__ltsf2>
    10d6:	88 23       	and	r24, r24
    10d8:	2c f4       	brge	.+10     	; 0x10e4 <lcd_init+0x2d8>
    10da:	81 e0       	ldi	r24, 0x01	; 1
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9f 83       	std	Y+7, r25	; 0x07
    10e0:	8e 83       	std	Y+6, r24	; 0x06
    10e2:	3d c0       	rjmp	.+122    	; 0x115e <lcd_init+0x352>
    10e4:	68 85       	ldd	r22, Y+8	; 0x08
    10e6:	79 85       	ldd	r23, Y+9	; 0x09
    10e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	57 e4       	ldi	r21, 0x47	; 71
    10f4:	36 db       	rcall	.-2452   	; 0x762 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	44 f5       	brge	.+80     	; 0x114a <lcd_init+0x33e>
    10fa:	6c 85       	ldd	r22, Y+12	; 0x0c
	if (__tmp < 1.0)
    10fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    10fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1100:	9f 85       	ldd	r25, Y+15	; 0x0f
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	8b d9       	rcall	.-3306   	; 0x422 <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
		__ticks = 1;
    1114:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	9f 83       	std	Y+7, r25	; 0x07
	else if (__tmp > 65535)
    111e:	8e 83       	std	Y+6, r24	; 0x06
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <lcd_init+0x334>
    1122:	89 e1       	ldi	r24, 0x19	; 25
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9d 83       	std	Y+5, r25	; 0x05
    1128:	8c 83       	std	Y+4, r24	; 0x04
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <lcd_init+0x322>
    1132:	9d 83       	std	Y+5, r25	; 0x05
    1134:	8c 83       	std	Y+4, r24	; 0x04
    1136:	8e 81       	ldd	r24, Y+6	; 0x06
    1138:	9f 81       	ldd	r25, Y+7	; 0x07
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	9f 83       	std	Y+7, r25	; 0x07
    113e:	8e 83       	std	Y+6, r24	; 0x06
    1140:	8e 81       	ldd	r24, Y+6	; 0x06
    1142:	9f 81       	ldd	r25, Y+7	; 0x07
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	69 f7       	brne	.-38     	; 0x1122 <lcd_init+0x316>
    1148:	24 c0       	rjmp	.+72     	; 0x1192 <lcd_init+0x386>
    114a:	68 85       	ldd	r22, Y+8	; 0x08
    114c:	79 85       	ldd	r23, Y+9	; 0x09
    114e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1150:	9b 85       	ldd	r25, Y+11	; 0x0b
    1152:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	9f 83       	std	Y+7, r25	; 0x07
    115c:	8e 83       	std	Y+6, r24	; 0x06
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	9f 81       	ldd	r25, Y+7	; 0x07
    1162:	9b 83       	std	Y+3, r25	; 0x03
    1164:	8a 83       	std	Y+2, r24	; 0x02
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	9b 81       	ldd	r25, Y+3	; 0x03
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <lcd_init+0x35e>
    116e:	9b 83       	std	Y+3, r25	; 0x03
    1170:	8a 83       	std	Y+2, r24	; 0x02
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <lcd_init+0x386>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1174:	69 89       	ldd	r22, Y+17	; 0x11
    1176:	7a 89       	ldd	r23, Y+18	; 0x12
    1178:	8b 89       	ldd	r24, Y+19	; 0x13
    117a:	9c 89       	ldd	r25, Y+20	; 0x14
    117c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	88 8b       	std	Y+16, r24	; 0x10
    1186:	88 89       	ldd	r24, Y+16	; 0x10
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	8a 95       	dec	r24
    118e:	f1 f7       	brne	.-4      	; 0x118c <lcd_init+0x380>
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	e2 96       	adiw	r28, 0x32	; 50
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <lcd_send_command>:
	lcd_send_command(lcd, 0x01); //clear
	_delay_us(2000);

}
void lcd_send_command(gcfg_lcd_t * lcd, u8 cmd) {
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	c3 56       	subi	r28, 0x63	; 99
    11b2:	d0 40       	sbci	r29, 0x00	; 0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	fe 01       	movw	r30, r28
    11c0:	ef 59       	subi	r30, 0x9F	; 159
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	80 83       	st	Z, r24
    11c8:	fe 01       	movw	r30, r28
    11ca:	ed 59       	subi	r30, 0x9D	; 157
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	60 83       	st	Z, r22
	DIO_clear_pin(lcd->controlPort, (lcd->RS));
    11d0:	fe 01       	movw	r30, r28
    11d2:	ef 59       	subi	r30, 0x9F	; 159
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	01 90       	ld	r0, Z+
    11d8:	f0 81       	ld	r31, Z
    11da:	e0 2d       	mov	r30, r0
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	fe 01       	movw	r30, r28
    11e0:	ef 59       	subi	r30, 0x9F	; 159
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	01 90       	ld	r0, Z+
    11e6:	f0 81       	ld	r31, Z
    11e8:	e0 2d       	mov	r30, r0
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	69 2f       	mov	r22, r25
    11ee:	a7 dd       	rcall	.-1202   	; 0xd3e <DIO_clear_pin>
    11f0:	fe 01       	movw	r30, r28
	DIO_clear_pin(lcd->controlPort, (lcd->RW));
    11f2:	ef 59       	subi	r30, 0x9F	; 159
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	01 90       	ld	r0, Z+
    11f8:	f0 81       	ld	r31, Z
    11fa:	e0 2d       	mov	r30, r0
    11fc:	81 81       	ldd	r24, Z+1	; 0x01
    11fe:	fe 01       	movw	r30, r28
    1200:	ef 59       	subi	r30, 0x9F	; 159
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	01 90       	ld	r0, Z+
    1206:	f0 81       	ld	r31, Z
    1208:	e0 2d       	mov	r30, r0
    120a:	94 81       	ldd	r25, Z+4	; 0x04
    120c:	69 2f       	mov	r22, r25
    120e:	97 dd       	rcall	.-1234   	; 0xd3e <DIO_clear_pin>
    1210:	fe 01       	movw	r30, r28
    1212:	ef 59       	subi	r30, 0x9F	; 159

	if (lcd->nbit == n4BIT_MODE) {
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	01 90       	ld	r0, Z+
    1218:	f0 81       	ld	r31, Z
    121a:	e0 2d       	mov	r30, r0
    121c:	80 81       	ld	r24, Z
    121e:	88 23       	and	r24, r24
    1220:	09 f0       	breq	.+2      	; 0x1224 <lcd_send_command+0x80>
    1222:	43 c2       	rjmp	.+1158   	; 0x16aa <lcd_send_command+0x506>
    1224:	fe 01       	movw	r30, r28
    1226:	ef 59       	subi	r30, 0x9F	; 159
		DIO_write_port(lcd->dataPort, 0xF0, (cmd & 0xF0));
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	01 90       	ld	r0, Z+
    122c:	f0 81       	ld	r31, Z
    122e:	e0 2d       	mov	r30, r0
    1230:	22 81       	ldd	r18, Z+2	; 0x02
    1232:	fe 01       	movw	r30, r28
    1234:	ed 59       	subi	r30, 0x9D	; 157
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 81       	ld	r24, Z
    123a:	98 2f       	mov	r25, r24
    123c:	90 7f       	andi	r25, 0xF0	; 240
    123e:	82 2f       	mov	r24, r18
    1240:	60 ef       	ldi	r22, 0xF0	; 240
    1242:	49 2f       	mov	r20, r25
    1244:	28 dd       	rcall	.-1456   	; 0xc96 <DIO_write_port>
    1246:	fe 01       	movw	r30, r28
    1248:	ef 59       	subi	r30, 0x9F	; 159
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
		DIO_set_pin(lcd->controlPort, (lcd->EN));
    124c:	01 90       	ld	r0, Z+
    124e:	f0 81       	ld	r31, Z
    1250:	e0 2d       	mov	r30, r0
    1252:	81 81       	ldd	r24, Z+1	; 0x01
    1254:	fe 01       	movw	r30, r28
    1256:	ef 59       	subi	r30, 0x9F	; 159
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	01 90       	ld	r0, Z+
    125c:	f0 81       	ld	r31, Z
    125e:	e0 2d       	mov	r30, r0
    1260:	95 81       	ldd	r25, Z+5	; 0x05
    1262:	69 2f       	mov	r22, r25
    1264:	47 dd       	rcall	.-1394   	; 0xcf4 <DIO_set_pin>
    1266:	fe 01       	movw	r30, r28
    1268:	e3 5a       	subi	r30, 0xA3	; 163
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 e8       	ldi	r26, 0x80	; 128
    1272:	bf e3       	ldi	r27, 0x3F	; 63
    1274:	80 83       	st	Z, r24
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	a2 83       	std	Z+2, r26	; 0x02
    127a:	b3 83       	std	Z+3, r27	; 0x03
    127c:	8e 01       	movw	r16, r28
    127e:	07 5a       	subi	r16, 0xA7	; 167
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	fe 01       	movw	r30, r28
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1284:	e3 5a       	subi	r30, 0xA3	; 163
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	93 81       	ldd	r25, Z+3	; 0x03
    1290:	2b ea       	ldi	r18, 0xAB	; 171
    1292:	3a ea       	ldi	r19, 0xAA	; 170
    1294:	4a ea       	ldi	r20, 0xAA	; 170
    1296:	5e e3       	ldi	r21, 0x3E	; 62
    1298:	c4 d8       	rcall	.-3704   	; 0x422 <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	f8 01       	movw	r30, r16
    12a0:	80 83       	st	Z, r24
    12a2:	91 83       	std	Z+1, r25	; 0x01
    12a4:	a2 83       	std	Z+2, r26	; 0x02
    12a6:	b3 83       	std	Z+3, r27	; 0x03
    12a8:	fe 01       	movw	r30, r28
    12aa:	e7 5a       	subi	r30, 0xA7	; 167
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
	if (__tmp < 1.0)
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	ab da       	rcall	.-2730   	; 0x816 <__ltsf2>
    12c0:	88 23       	and	r24, r24
    12c2:	34 f4       	brge	.+12     	; 0x12d0 <lcd_send_command+0x12c>
    12c4:	fe 01       	movw	r30, r28
    12c6:	e8 5a       	subi	r30, 0xA8	; 168
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	80 83       	st	Z, r24
    12ce:	da c0       	rjmp	.+436    	; 0x1484 <lcd_send_command+0x2e0>
		__ticks = 1;
    12d0:	fe 01       	movw	r30, r28
    12d2:	e7 5a       	subi	r30, 0xA7	; 167
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	82 81       	ldd	r24, Z+2	; 0x02
	else if (__tmp > 255)
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	53 e4       	ldi	r21, 0x43	; 67
    12e6:	3d da       	rcall	.-2950   	; 0x762 <__gtsf2>
    12e8:	18 16       	cp	r1, r24
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <lcd_send_command+0x14a>
    12ec:	bb c0       	rjmp	.+374    	; 0x1464 <lcd_send_command+0x2c0>
    12ee:	fe 01       	movw	r30, r28
    12f0:	e3 5a       	subi	r30, 0xA3	; 163
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
	{
		_delay_ms(__us / 1000.0);
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	4a e7       	ldi	r20, 0x7A	; 122
    1302:	54 e4       	ldi	r21, 0x44	; 68
    1304:	85 d9       	rcall	.-3318   	; 0x610 <__divsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	fe 01       	movw	r30, r28
    130c:	ec 5a       	subi	r30, 0xAC	; 172
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	80 83       	st	Z, r24
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	a2 83       	std	Z+2, r26	; 0x02
    1316:	b3 83       	std	Z+3, r27	; 0x03
    1318:	8e 01       	movw	r16, r28
    131a:	00 5b       	subi	r16, 0xB0	; 176
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	ec 5a       	subi	r30, 0xAC	; 172
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a e7       	ldi	r20, 0x7A	; 122
    1332:	53 e4       	ldi	r21, 0x43	; 67
    1334:	76 d8       	rcall	.-3860   	; 0x422 <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	f8 01       	movw	r30, r16
    133c:	80 83       	st	Z, r24
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	a2 83       	std	Z+2, r26	; 0x02
    1342:	b3 83       	std	Z+3, r27	; 0x03
    1344:	fe 01       	movw	r30, r28
    1346:	e0 5b       	subi	r30, 0xB0	; 176
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	5d da       	rcall	.-2886   	; 0x816 <__ltsf2>
    135c:	88 23       	and	r24, r24
    135e:	44 f4       	brge	.+16     	; 0x1370 <lcd_send_command+0x1cc>
    1360:	fe 01       	movw	r30, r28
    1362:	e2 5b       	subi	r30, 0xB2	; 178
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    136e:	62 c0       	rjmp	.+196    	; 0x1434 <lcd_send_command+0x290>
    1370:	fe 01       	movw	r30, r28
    1372:	e0 5b       	subi	r30, 0xB0	; 176
		__ticks = 1;
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	3f ef       	ldi	r19, 0xFF	; 255
    1382:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
    1384:	57 e4       	ldi	r21, 0x47	; 71
    1386:	ed d9       	rcall	.-3110   	; 0x762 <__gtsf2>
    1388:	18 16       	cp	r1, r24
    138a:	0c f0       	brlt	.+2      	; 0x138e <lcd_send_command+0x1ea>
    138c:	42 c0       	rjmp	.+132    	; 0x1412 <lcd_send_command+0x26e>
    138e:	fe 01       	movw	r30, r28
    1390:	ec 5a       	subi	r30, 0xAC	; 172
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e2       	ldi	r20, 0x20	; 32
    13a2:	51 e4       	ldi	r21, 0x41	; 65
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a4:	3e d8       	rcall	.-3972   	; 0x422 <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	8e 01       	movw	r16, r28
    13ac:	02 5b       	subi	r16, 0xB2	; 178
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	f8 01       	movw	r30, r16
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	80 83       	st	Z, r24
    13c2:	1f c0       	rjmp	.+62     	; 0x1402 <lcd_send_command+0x25e>
    13c4:	fe 01       	movw	r30, r28
    13c6:	e4 5b       	subi	r30, 0xB4	; 180
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	89 e1       	ldi	r24, 0x19	; 25
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
    13d2:	fe 01       	movw	r30, r28
    13d4:	e4 5b       	subi	r30, 0xB4	; 180
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <lcd_send_command+0x238>
    13e0:	fe 01       	movw	r30, r28
    13e2:	e4 5b       	subi	r30, 0xB4	; 180
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
    13ea:	de 01       	movw	r26, r28
    13ec:	a2 5b       	subi	r26, 0xB2	; 178
    13ee:	bf 4f       	sbci	r27, 0xFF	; 255
    13f0:	fe 01       	movw	r30, r28
    13f2:	e2 5b       	subi	r30, 0xB2	; 178
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	9c 93       	st	X, r25
    1400:	8e 93       	st	-X, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1402:	fe 01       	movw	r30, r28
    1404:	e2 5b       	subi	r30, 0xB2	; 178
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	d1 f6       	brne	.-76     	; 0x13c4 <lcd_send_command+0x220>
    1410:	4b c0       	rjmp	.+150    	; 0x14a8 <lcd_send_command+0x304>
    1412:	8e 01       	movw	r16, r28
    1414:	02 5b       	subi	r16, 0xB2	; 178
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	fe 01       	movw	r30, r28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	e0 5b       	subi	r30, 0xB0	; 176
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	f8 01       	movw	r30, r16
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	80 83       	st	Z, r24
    1434:	de 01       	movw	r26, r28
    1436:	a6 5b       	subi	r26, 0xB6	; 182
    1438:	bf 4f       	sbci	r27, 0xFF	; 255
    143a:	fe 01       	movw	r30, r28
    143c:	e2 5b       	subi	r30, 0xB2	; 178
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	9c 93       	st	X, r25
    1448:	8e 93       	st	-X, r24
    144a:	fe 01       	movw	r30, r28
    144c:	e6 5b       	subi	r30, 0xB6	; 182
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <lcd_send_command+0x2b0>
    1458:	fe 01       	movw	r30, r28
    145a:	e6 5b       	subi	r30, 0xB6	; 182
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1462:	22 c0       	rjmp	.+68     	; 0x14a8 <lcd_send_command+0x304>
    1464:	8e 01       	movw	r16, r28
    1466:	08 5a       	subi	r16, 0xA8	; 168
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
    146a:	fe 01       	movw	r30, r28
    146c:	e7 5a       	subi	r30, 0xA7	; 167
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	93 81       	ldd	r25, Z+3	; 0x03
    1478:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	f8 01       	movw	r30, r16
    1482:	80 83       	st	Z, r24
    1484:	de 01       	movw	r26, r28
    1486:	a7 5b       	subi	r26, 0xB7	; 183
    1488:	bf 4f       	sbci	r27, 0xFF	; 255
    148a:	fe 01       	movw	r30, r28
    148c:	e8 5a       	subi	r30, 0xA8	; 168
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	8c 93       	st	X, r24
    1494:	fe 01       	movw	r30, r28
    1496:	e7 5b       	subi	r30, 0xB7	; 183
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 81       	ld	r24, Z
    149c:	8a 95       	dec	r24
    149e:	f1 f7       	brne	.-4      	; 0x149c <lcd_send_command+0x2f8>
    14a0:	fe 01       	movw	r30, r28
    14a2:	e7 5b       	subi	r30, 0xB7	; 183
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	80 83       	st	Z, r24
    14a8:	fe 01       	movw	r30, r28
    14aa:	ef 59       	subi	r30, 0x9F	; 159
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	01 90       	ld	r0, Z+
    14b0:	f0 81       	ld	r31, Z
    14b2:	e0 2d       	mov	r30, r0
    14b4:	81 81       	ldd	r24, Z+1	; 0x01
    14b6:	fe 01       	movw	r30, r28
    14b8:	ef 59       	subi	r30, 0x9F	; 159
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	01 90       	ld	r0, Z+
    14be:	f0 81       	ld	r31, Z
		_delay_us(1);
		DIO_clear_pin(lcd->controlPort, (lcd->EN));
    14c0:	e0 2d       	mov	r30, r0
    14c2:	95 81       	ldd	r25, Z+5	; 0x05
    14c4:	69 2f       	mov	r22, r25
    14c6:	3b dc       	rcall	.-1930   	; 0xd3e <DIO_clear_pin>
    14c8:	fe 01       	movw	r30, r28
    14ca:	eb 5b       	subi	r30, 0xBB	; 187
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a8 ec       	ldi	r26, 0xC8	; 200
    14d4:	b2 e4       	ldi	r27, 0x42	; 66
    14d6:	80 83       	st	Z, r24
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	a2 83       	std	Z+2, r26	; 0x02
    14dc:	b3 83       	std	Z+3, r27	; 0x03
    14de:	8e 01       	movw	r16, r28
    14e0:	0f 5b       	subi	r16, 0xBF	; 191
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	fe 01       	movw	r30, r28
    14e6:	eb 5b       	subi	r30, 0xBB	; 187
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	2b ea       	ldi	r18, 0xAB	; 171
    14f4:	3a ea       	ldi	r19, 0xAA	; 170
    14f6:	4a ea       	ldi	r20, 0xAA	; 170
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14f8:	5e e3       	ldi	r21, 0x3E	; 62
    14fa:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	f8 01       	movw	r30, r16
    1504:	80 83       	st	Z, r24
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	a2 83       	std	Z+2, r26	; 0x02
    150a:	b3 83       	std	Z+3, r27	; 0x03
    150c:	fe 01       	movw	r30, r28
    150e:	ef 5b       	subi	r30, 0xBF	; 191
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	79 d9       	rcall	.-3342   	; 0x816 <__ltsf2>
    1524:	88 23       	and	r24, r24
	if (__tmp < 1.0)
    1526:	34 f4       	brge	.+12     	; 0x1534 <lcd_send_command+0x390>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	fe 01       	movw	r30, r28
    152c:	e0 5c       	subi	r30, 0xC0	; 192
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 83       	st	Z, r24
    1532:	99 c0       	rjmp	.+306    	; 0x1666 <lcd_send_command+0x4c2>
    1534:	fe 01       	movw	r30, r28
    1536:	ef 5b       	subi	r30, 0xBF	; 191
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	53 e4       	ldi	r21, 0x43	; 67
    154a:	0b d9       	rcall	.-3562   	; 0x762 <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	0c f0       	brlt	.+2      	; 0x1552 <lcd_send_command+0x3ae>
	else if (__tmp > 255)
    1550:	7b c0       	rjmp	.+246    	; 0x1648 <lcd_send_command+0x4a4>
    1552:	fe 01       	movw	r30, r28
    1554:	eb 5b       	subi	r30, 0xBB	; 187
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	60 81       	ld	r22, Z
    155a:	71 81       	ldd	r23, Z+1	; 0x01
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	93 81       	ldd	r25, Z+3	; 0x03
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a e7       	ldi	r20, 0x7A	; 122
    1566:	54 e4       	ldi	r21, 0x44	; 68
    1568:	53 d8       	rcall	.-3930   	; 0x610 <__divsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	8c af       	std	Y+60, r24	; 0x3c
	{
		_delay_ms(__us / 1000.0);
    1570:	9d af       	std	Y+61, r25	; 0x3d
    1572:	ae af       	std	Y+62, r26	; 0x3e
    1574:	bf af       	std	Y+63, r27	; 0x3f
    1576:	6c ad       	ldd	r22, Y+60	; 0x3c
    1578:	7d ad       	ldd	r23, Y+61	; 0x3d
    157a:	8e ad       	ldd	r24, Y+62	; 0x3e
    157c:	9f ad       	ldd	r25, Y+63	; 0x3f
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a e7       	ldi	r20, 0x7A	; 122
    1584:	53 e4       	ldi	r21, 0x43	; 67
    1586:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	88 af       	std	Y+56, r24	; 0x38
    1590:	99 af       	std	Y+57, r25	; 0x39
    1592:	aa af       	std	Y+58, r26	; 0x3a
    1594:	bb af       	std	Y+59, r27	; 0x3b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1596:	68 ad       	ldd	r22, Y+56	; 0x38
    1598:	79 ad       	ldd	r23, Y+57	; 0x39
    159a:	8a ad       	ldd	r24, Y+58	; 0x3a
    159c:	9b ad       	ldd	r25, Y+59	; 0x3b
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	37 d9       	rcall	.-3474   	; 0x816 <__ltsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <lcd_send_command+0x412>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9f ab       	std	Y+55, r25	; 0x37
    15b2:	8e ab       	std	Y+54, r24	; 0x36
    15b4:	3e c0       	rjmp	.+124    	; 0x1632 <lcd_send_command+0x48e>
	if (__tmp < 1.0)
    15b6:	68 ad       	ldd	r22, Y+56	; 0x38
    15b8:	79 ad       	ldd	r23, Y+57	; 0x39
    15ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    15bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	cd d8       	rcall	.-3686   	; 0x762 <__gtsf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <lcd_send_command+0x47a>
    15cc:	6c ad       	ldd	r22, Y+60	; 0x3c
		__ticks = 1;
    15ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    15d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    15d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
	else if (__tmp > 65535)
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f0:	9f ab       	std	Y+55, r25	; 0x37
    15f2:	8e ab       	std	Y+54, r24	; 0x36
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <lcd_send_command+0x470>
    15f6:	89 e1       	ldi	r24, 0x19	; 25
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9d ab       	std	Y+53, r25	; 0x35
    15fc:	8c ab       	std	Y+52, r24	; 0x34
    15fe:	8c a9       	ldd	r24, Y+52	; 0x34
    1600:	9d a9       	ldd	r25, Y+53	; 0x35
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <lcd_send_command+0x45e>
    1606:	9d ab       	std	Y+53, r25	; 0x35
    1608:	8c ab       	std	Y+52, r24	; 0x34
    160a:	8e a9       	ldd	r24, Y+54	; 0x36
    160c:	9f a9       	ldd	r25, Y+55	; 0x37
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	9f ab       	std	Y+55, r25	; 0x37
    1612:	8e ab       	std	Y+54, r24	; 0x36
    1614:	8e a9       	ldd	r24, Y+54	; 0x36
    1616:	9f a9       	ldd	r25, Y+55	; 0x37
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	69 f7       	brne	.-38     	; 0x15f6 <lcd_send_command+0x452>
    161c:	2d c0       	rjmp	.+90     	; 0x1678 <lcd_send_command+0x4d4>
    161e:	68 ad       	ldd	r22, Y+56	; 0x38
    1620:	79 ad       	ldd	r23, Y+57	; 0x39
    1622:	8a ad       	ldd	r24, Y+58	; 0x3a
    1624:	9b ad       	ldd	r25, Y+59	; 0x3b
    1626:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	9f ab       	std	Y+55, r25	; 0x37
    1630:	8e ab       	std	Y+54, r24	; 0x36
    1632:	8e a9       	ldd	r24, Y+54	; 0x36
    1634:	9f a9       	ldd	r25, Y+55	; 0x37
    1636:	9b ab       	std	Y+51, r25	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	8a ab       	std	Y+50, r24	; 0x32
    163a:	8a a9       	ldd	r24, Y+50	; 0x32
    163c:	9b a9       	ldd	r25, Y+51	; 0x33
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <lcd_send_command+0x49a>
    1642:	9b ab       	std	Y+51, r25	; 0x33
    1644:	8a ab       	std	Y+50, r24	; 0x32
    1646:	18 c0       	rjmp	.+48     	; 0x1678 <lcd_send_command+0x4d4>
    1648:	fe 01       	movw	r30, r28
    164a:	ef 5b       	subi	r30, 0xBF	; 191
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	fe 01       	movw	r30, r28
    1660:	e0 5c       	subi	r30, 0xC0	; 192
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 83       	st	Z, r24
    1666:	fe 01       	movw	r30, r28
    1668:	e0 5c       	subi	r30, 0xC0	; 192
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    166c:	80 81       	ld	r24, Z
    166e:	89 ab       	std	Y+49, r24	; 0x31
    1670:	89 a9       	ldd	r24, Y+49	; 0x31
    1672:	8a 95       	dec	r24
    1674:	f1 f7       	brne	.-4      	; 0x1672 <lcd_send_command+0x4ce>
    1676:	89 ab       	std	Y+49, r24	; 0x31
    1678:	fe 01       	movw	r30, r28
    167a:	ef 59       	subi	r30, 0x9F	; 159
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	01 90       	ld	r0, Z+
    1680:	f0 81       	ld	r31, Z
    1682:	e0 2d       	mov	r30, r0
    1684:	22 81       	ldd	r18, Z+2	; 0x02
    1686:	fe 01       	movw	r30, r28
    1688:	ed 59       	subi	r30, 0x9D	; 157
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	80 81       	ld	r24, Z
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	82 95       	swap	r24
    1694:	92 95       	swap	r25
    1696:	90 7f       	andi	r25, 0xF0	; 240
    1698:	98 27       	eor	r25, r24
    169a:	80 7f       	andi	r24, 0xF0	; 240
		_delay_us(100);
		DIO_write_port(lcd->dataPort, 0xF0, (cmd & 0xF) << 4);
    169c:	98 27       	eor	r25, r24
    169e:	98 2f       	mov	r25, r24
    16a0:	82 2f       	mov	r24, r18
    16a2:	60 ef       	ldi	r22, 0xF0	; 240
    16a4:	49 2f       	mov	r20, r25
    16a6:	f7 da       	rcall	.-2578   	; 0xc96 <DIO_write_port>
    16a8:	16 c0       	rjmp	.+44     	; 0x16d6 <lcd_send_command+0x532>
    16aa:	fe 01       	movw	r30, r28
    16ac:	ef 59       	subi	r30, 0x9F	; 159
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	01 90       	ld	r0, Z+
    16b2:	f0 81       	ld	r31, Z
    16b4:	e0 2d       	mov	r30, r0
    16b6:	80 81       	ld	r24, Z
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	69 f4       	brne	.+26     	; 0x16d6 <lcd_send_command+0x532>
    16bc:	fe 01       	movw	r30, r28
    16be:	ef 59       	subi	r30, 0x9F	; 159
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	01 90       	ld	r0, Z+
    16c4:	f0 81       	ld	r31, Z
    16c6:	e0 2d       	mov	r30, r0
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	fe 01       	movw	r30, r28
    16cc:	ed 59       	subi	r30, 0x9D	; 157
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
	} else if (lcd->nbit == n8BIT_MODE) {
    16d0:	6f ef       	ldi	r22, 0xFF	; 255
    16d2:	40 81       	ld	r20, Z
    16d4:	e0 da       	rcall	.-2624   	; 0xc96 <DIO_write_port>
    16d6:	fe 01       	movw	r30, r28
    16d8:	ef 59       	subi	r30, 0x9F	; 159
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	01 90       	ld	r0, Z+
    16de:	f0 81       	ld	r31, Z
    16e0:	e0 2d       	mov	r30, r0
		DIO_write_port(lcd->dataPort, 0xFF, cmd);
    16e2:	81 81       	ldd	r24, Z+1	; 0x01
    16e4:	fe 01       	movw	r30, r28
    16e6:	ef 59       	subi	r30, 0x9F	; 159
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	01 90       	ld	r0, Z+
    16ec:	f0 81       	ld	r31, Z
    16ee:	e0 2d       	mov	r30, r0
    16f0:	95 81       	ldd	r25, Z+5	; 0x05
    16f2:	69 2f       	mov	r22, r25
    16f4:	ff da       	rcall	.-2562   	; 0xcf4 <DIO_set_pin>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 e8       	ldi	r26, 0x80	; 128
    16fc:	bf e3       	ldi	r27, 0x3F	; 63
	} else {
		// todo error
	}
	DIO_set_pin(lcd->controlPort, (lcd->EN));
    16fe:	8d a7       	std	Y+45, r24	; 0x2d
    1700:	9e a7       	std	Y+46, r25	; 0x2e
    1702:	af a7       	std	Y+47, r26	; 0x2f
    1704:	b8 ab       	std	Y+48, r27	; 0x30
    1706:	6d a5       	ldd	r22, Y+45	; 0x2d
    1708:	7e a5       	ldd	r23, Y+46	; 0x2e
    170a:	8f a5       	ldd	r24, Y+47	; 0x2f
    170c:	98 a9       	ldd	r25, Y+48	; 0x30
    170e:	2b ea       	ldi	r18, 0xAB	; 171
    1710:	3a ea       	ldi	r19, 0xAA	; 170
    1712:	4a ea       	ldi	r20, 0xAA	; 170
    1714:	5e e3       	ldi	r21, 0x3E	; 62
    1716:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	89 a7       	std	Y+41, r24	; 0x29
    1720:	9a a7       	std	Y+42, r25	; 0x2a
    1722:	ab a7       	std	Y+43, r26	; 0x2b
    1724:	bc a7       	std	Y+44, r27	; 0x2c
    1726:	69 a5       	ldd	r22, Y+41	; 0x29
    1728:	7a a5       	ldd	r23, Y+42	; 0x2a
    172a:	8b a5       	ldd	r24, Y+43	; 0x2b
    172c:	9c a5       	ldd	r25, Y+44	; 0x2c
    172e:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	6f d8       	rcall	.-3874   	; 0x816 <__ltsf2>
    1738:	88 23       	and	r24, r24
    173a:	1c f4       	brge	.+6      	; 0x1742 <lcd_send_command+0x59e>
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	88 a7       	std	Y+40, r24	; 0x28
    1740:	8f c0       	rjmp	.+286    	; 0x1860 <lcd_send_command+0x6bc>
    1742:	69 a5       	ldd	r22, Y+41	; 0x29
    1744:	7a a5       	ldd	r23, Y+42	; 0x2a
    1746:	8b a5       	ldd	r24, Y+43	; 0x2b
    1748:	9c a5       	ldd	r25, Y+44	; 0x2c
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4f e7       	ldi	r20, 0x7F	; 127
	if (__tmp < 1.0)
    1750:	53 e4       	ldi	r21, 0x43	; 67
    1752:	07 d8       	rcall	.-4082   	; 0x762 <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	0c f0       	brlt	.+2      	; 0x175a <lcd_send_command+0x5b6>
    1758:	7a c0       	rjmp	.+244    	; 0x184e <lcd_send_command+0x6aa>
    175a:	6d a5       	ldd	r22, Y+45	; 0x2d
    175c:	7e a5       	ldd	r23, Y+46	; 0x2e
    175e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1760:	98 a9       	ldd	r25, Y+48	; 0x30
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	4a e7       	ldi	r20, 0x7A	; 122
		__ticks = 1;
    1768:	54 e4       	ldi	r21, 0x44	; 68
    176a:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
	else if (__tmp > 255)
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8c a3       	std	Y+36, r24	; 0x24
    1774:	9d a3       	std	Y+37, r25	; 0x25
    1776:	ae a3       	std	Y+38, r26	; 0x26
    1778:	bf a3       	std	Y+39, r27	; 0x27
    177a:	6c a1       	ldd	r22, Y+36	; 0x24
    177c:	7d a1       	ldd	r23, Y+37	; 0x25
    177e:	8e a1       	ldd	r24, Y+38	; 0x26
    1780:	9f a1       	ldd	r25, Y+39	; 0x27
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a e7       	ldi	r20, 0x7A	; 122
	{
		_delay_ms(__us / 1000.0);
    1788:	53 e4       	ldi	r21, 0x43	; 67
    178a:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	88 a3       	std	Y+32, r24	; 0x20
    1794:	99 a3       	std	Y+33, r25	; 0x21
    1796:	aa a3       	std	Y+34, r26	; 0x22
    1798:	bb a3       	std	Y+35, r27	; 0x23
    179a:	68 a1       	ldd	r22, Y+32	; 0x20
    179c:	79 a1       	ldd	r23, Y+33	; 0x21
    179e:	8a a1       	ldd	r24, Y+34	; 0x22
    17a0:	9b a1       	ldd	r25, Y+35	; 0x23
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e8       	ldi	r20, 0x80	; 128
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	5f e3       	ldi	r21, 0x3F	; 63
    17aa:	35 d8       	rcall	.-3990   	; 0x816 <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <lcd_send_command+0x616>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9f 8f       	std	Y+31, r25	; 0x1f
    17b6:	8e 8f       	std	Y+30, r24	; 0x1e
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <lcd_send_command+0x694>
    17ba:	68 a1       	ldd	r22, Y+32	; 0x20
    17bc:	79 a1       	ldd	r23, Y+33	; 0x21
    17be:	8a a1       	ldd	r24, Y+34	; 0x22
    17c0:	9b a1       	ldd	r25, Y+35	; 0x23
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
	if (__tmp < 1.0)
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <lcd_send_command+0x680>
    17d2:	6c a1       	ldd	r22, Y+36	; 0x24
    17d4:	7d a1       	ldd	r23, Y+37	; 0x25
    17d6:	8e a1       	ldd	r24, Y+38	; 0x26
    17d8:	9f a1       	ldd	r25, Y+39	; 0x27
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
		__ticks = 1;
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
	else if (__tmp > 65535)
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9f 8f       	std	Y+31, r25	; 0x1f
    17f8:	8e 8f       	std	Y+30, r24	; 0x1e
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <lcd_send_command+0x676>
    17fc:	89 e1       	ldi	r24, 0x19	; 25
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9d 8f       	std	Y+29, r25	; 0x1d
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	8c 8f       	std	Y+28, r24	; 0x1c
    1804:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1806:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <lcd_send_command+0x664>
    180c:	9d 8f       	std	Y+29, r25	; 0x1d
    180e:	8c 8f       	std	Y+28, r24	; 0x1c
    1810:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1812:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9f 8f       	std	Y+31, r25	; 0x1f
    1818:	8e 8f       	std	Y+30, r24	; 0x1e
    181a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    181c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <lcd_send_command+0x658>
    1822:	24 c0       	rjmp	.+72     	; 0x186c <lcd_send_command+0x6c8>
    1824:	68 a1       	ldd	r22, Y+32	; 0x20
    1826:	79 a1       	ldd	r23, Y+33	; 0x21
    1828:	8a a1       	ldd	r24, Y+34	; 0x22
    182a:	9b a1       	ldd	r25, Y+35	; 0x23
    182c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9f 8f       	std	Y+31, r25	; 0x1f
    1836:	8e 8f       	std	Y+30, r24	; 0x1e
    1838:	8e 8d       	ldd	r24, Y+30	; 0x1e
    183a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    183c:	9b 8f       	std	Y+27, r25	; 0x1b
    183e:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1842:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <lcd_send_command+0x6a0>
    1848:	9b 8f       	std	Y+27, r25	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	8a 8f       	std	Y+26, r24	; 0x1a
    184c:	0f c0       	rjmp	.+30     	; 0x186c <lcd_send_command+0x6c8>
    184e:	69 a5       	ldd	r22, Y+41	; 0x29
    1850:	7a a5       	ldd	r23, Y+42	; 0x2a
    1852:	8b a5       	ldd	r24, Y+43	; 0x2b
    1854:	9c a5       	ldd	r25, Y+44	; 0x2c
    1856:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	88 a7       	std	Y+40, r24	; 0x28
    1860:	88 a5       	ldd	r24, Y+40	; 0x28
    1862:	89 8f       	std	Y+25, r24	; 0x19
    1864:	89 8d       	ldd	r24, Y+25	; 0x19
    1866:	8a 95       	dec	r24
    1868:	f1 f7       	brne	.-4      	; 0x1866 <lcd_send_command+0x6c2>
    186a:	89 8f       	std	Y+25, r24	; 0x19
    186c:	fe 01       	movw	r30, r28
    186e:	ef 59       	subi	r30, 0x9F	; 159
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	01 90       	ld	r0, Z+
    1874:	f0 81       	ld	r31, Z
    1876:	e0 2d       	mov	r30, r0
    1878:	81 81       	ldd	r24, Z+1	; 0x01
    187a:	fe 01       	movw	r30, r28
    187c:	ef 59       	subi	r30, 0x9F	; 159
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	01 90       	ld	r0, Z+
    1882:	f0 81       	ld	r31, Z
    1884:	e0 2d       	mov	r30, r0
    1886:	95 81       	ldd	r25, Z+5	; 0x05
    1888:	69 2f       	mov	r22, r25
    188a:	59 da       	rcall	.-2894   	; 0xd3e <DIO_clear_pin>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a8 ec       	ldi	r26, 0xC8	; 200
    1892:	b2 e4       	ldi	r27, 0x42	; 66
    1894:	8d 8b       	std	Y+21, r24	; 0x15
    1896:	9e 8b       	std	Y+22, r25	; 0x16
    1898:	af 8b       	std	Y+23, r26	; 0x17
    189a:	b8 8f       	std	Y+24, r27	; 0x18
    189c:	6d 89       	ldd	r22, Y+21	; 0x15
    189e:	7e 89       	ldd	r23, Y+22	; 0x16
    18a0:	8f 89       	ldd	r24, Y+23	; 0x17
    18a2:	98 8d       	ldd	r25, Y+24	; 0x18
    18a4:	2b ea       	ldi	r18, 0xAB	; 171
    18a6:	3a ea       	ldi	r19, 0xAA	; 170
    18a8:	4a ea       	ldi	r20, 0xAA	; 170
    18aa:	5e e3       	ldi	r21, 0x3E	; 62
    18ac:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	89 8b       	std	Y+17, r24	; 0x11
    18b6:	9a 8b       	std	Y+18, r25	; 0x12
    18b8:	ab 8b       	std	Y+19, r26	; 0x13
    18ba:	bc 8b       	std	Y+20, r27	; 0x14
    18bc:	69 89       	ldd	r22, Y+17	; 0x11
    18be:	7a 89       	ldd	r23, Y+18	; 0x12
    18c0:	8b 89       	ldd	r24, Y+19	; 0x13
    18c2:	9c 89       	ldd	r25, Y+20	; 0x14
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18d0:	88 23       	and	r24, r24
    18d2:	1c f4       	brge	.+6      	; 0x18da <lcd_send_command+0x736>
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	88 8b       	std	Y+16, r24	; 0x10
    18d8:	91 c0       	rjmp	.+290    	; 0x19fc <lcd_send_command+0x858>
    18da:	69 89       	ldd	r22, Y+17	; 0x11
    18dc:	7a 89       	ldd	r23, Y+18	; 0x12
    18de:	8b 89       	ldd	r24, Y+19	; 0x13
    18e0:	9c 89       	ldd	r25, Y+20	; 0x14
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	53 e4       	ldi	r21, 0x43	; 67
    18ea:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
	if (__tmp < 1.0)
    18ee:	18 16       	cp	r1, r24
    18f0:	0c f0       	brlt	.+2      	; 0x18f4 <lcd_send_command+0x750>
    18f2:	7b c0       	rjmp	.+246    	; 0x19ea <lcd_send_command+0x846>
    18f4:	6d 89       	ldd	r22, Y+21	; 0x15
    18f6:	7e 89       	ldd	r23, Y+22	; 0x16
    18f8:	8f 89       	ldd	r24, Y+23	; 0x17
    18fa:	98 8d       	ldd	r25, Y+24	; 0x18
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a e7       	ldi	r20, 0x7A	; 122
    1902:	54 e4       	ldi	r21, 0x44	; 68
    1904:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
		__ticks = 1;
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
	else if (__tmp > 255)
    190c:	8c 87       	std	Y+12, r24	; 0x0c
    190e:	9d 87       	std	Y+13, r25	; 0x0d
    1910:	ae 87       	std	Y+14, r26	; 0x0e
    1912:	bf 87       	std	Y+15, r27	; 0x0f
    1914:	6c 85       	ldd	r22, Y+12	; 0x0c
    1916:	7d 85       	ldd	r23, Y+13	; 0x0d
    1918:	8e 85       	ldd	r24, Y+14	; 0x0e
    191a:	9f 85       	ldd	r25, Y+15	; 0x0f
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a e7       	ldi	r20, 0x7A	; 122
    1922:	53 e4       	ldi	r21, 0x43	; 67
    1924:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
	{
		_delay_ms(__us / 1000.0);
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	88 87       	std	Y+8, r24	; 0x08
    192e:	99 87       	std	Y+9, r25	; 0x09
    1930:	aa 87       	std	Y+10, r26	; 0x0a
    1932:	bb 87       	std	Y+11, r27	; 0x0b
    1934:	68 85       	ldd	r22, Y+8	; 0x08
    1936:	79 85       	ldd	r23, Y+9	; 0x09
    1938:	8a 85       	ldd	r24, Y+10	; 0x0a
    193a:	9b 85       	ldd	r25, Y+11	; 0x0b
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <lcd_send_command+0x7b2>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9f 83       	std	Y+7, r25	; 0x07
    1952:	8e 83       	std	Y+6, r24	; 0x06
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <lcd_send_command+0x830>
    1956:	68 85       	ldd	r22, Y+8	; 0x08
    1958:	79 85       	ldd	r23, Y+9	; 0x09
    195a:	8a 85       	ldd	r24, Y+10	; 0x0a
    195c:	9b 85       	ldd	r25, Y+11	; 0x0b
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
	if (__tmp < 1.0)
    1966:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <lcd_send_command+0x81c>
    196e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1970:	7d 85       	ldd	r23, Y+13	; 0x0d
    1972:	8e 85       	ldd	r24, Y+14	; 0x0e
    1974:	9f 85       	ldd	r25, Y+15	; 0x0f
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
		__ticks = 1;
    197e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
	else if (__tmp > 65535)
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9f 83       	std	Y+7, r25	; 0x07
    1994:	8e 83       	std	Y+6, r24	; 0x06
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <lcd_send_command+0x812>
    1998:	89 e1       	ldi	r24, 0x19	; 25
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9d 83       	std	Y+5, r25	; 0x05
    199e:	8c 83       	std	Y+4, r24	; 0x04
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	9d 81       	ldd	r25, Y+5	; 0x05
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <lcd_send_command+0x800>
    19a8:	9d 83       	std	Y+5, r25	; 0x05
    19aa:	8c 83       	std	Y+4, r24	; 0x04
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	9f 81       	ldd	r25, Y+7	; 0x07
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9f 83       	std	Y+7, r25	; 0x07
    19b4:	8e 83       	std	Y+6, r24	; 0x06
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <lcd_send_command+0x7f4>
    19be:	24 c0       	rjmp	.+72     	; 0x1a08 <lcd_send_command+0x864>
    19c0:	68 85       	ldd	r22, Y+8	; 0x08
    19c2:	79 85       	ldd	r23, Y+9	; 0x09
    19c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    19c8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9f 83       	std	Y+7, r25	; 0x07
    19d2:	8e 83       	std	Y+6, r24	; 0x06
    19d4:	8e 81       	ldd	r24, Y+6	; 0x06
    19d6:	9f 81       	ldd	r25, Y+7	; 0x07
    19d8:	9b 83       	std	Y+3, r25	; 0x03
    19da:	8a 83       	std	Y+2, r24	; 0x02
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <lcd_send_command+0x83c>
    19e4:	9b 83       	std	Y+3, r25	; 0x03
    19e6:	8a 83       	std	Y+2, r24	; 0x02
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <lcd_send_command+0x864>
    19ea:	69 89       	ldd	r22, Y+17	; 0x11
    19ec:	7a 89       	ldd	r23, Y+18	; 0x12
    19ee:	8b 89       	ldd	r24, Y+19	; 0x13
    19f0:	9c 89       	ldd	r25, Y+20	; 0x14
    19f2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	88 8b       	std	Y+16, r24	; 0x10
    19fc:	88 89       	ldd	r24, Y+16	; 0x10
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	8a 95       	dec	r24
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <lcd_send_command+0x85e>
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	cd 59       	subi	r28, 0x9D	; 157
    1a0a:	df 4f       	sbci	r29, 0xFF	; 255
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	08 95       	ret

00001a20 <lcd_send_data>:
	_delay_us(1);
	DIO_clear_pin(lcd->controlPort, (lcd->EN));
	_delay_us(100);
}
void lcd_send_data(gcfg_lcd_t * lcd, u8 data) {
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	c3 56       	subi	r28, 0x63	; 99
    1a2e:	d0 40       	sbci	r29, 0x00	; 0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ef 59       	subi	r30, 0x9F	; 159
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
    1a44:	fe 01       	movw	r30, r28
    1a46:	ed 59       	subi	r30, 0x9D	; 157
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 83       	st	Z, r22
	DIO_set_pin(lcd->controlPort, (lcd->RS));
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	ef 59       	subi	r30, 0x9F	; 159
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	01 90       	ld	r0, Z+
    1a54:	f0 81       	ld	r31, Z
    1a56:	e0 2d       	mov	r30, r0
    1a58:	81 81       	ldd	r24, Z+1	; 0x01
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ef 59       	subi	r30, 0x9F	; 159
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	01 90       	ld	r0, Z+
    1a62:	f0 81       	ld	r31, Z
    1a64:	e0 2d       	mov	r30, r0
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	69 2f       	mov	r22, r25
    1a6a:	44 d9       	rcall	.-3448   	; 0xcf4 <DIO_set_pin>
    1a6c:	fe 01       	movw	r30, r28
	DIO_clear_pin(lcd->controlPort, (lcd->RW));
    1a6e:	ef 59       	subi	r30, 0x9F	; 159
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	01 90       	ld	r0, Z+
    1a74:	f0 81       	ld	r31, Z
    1a76:	e0 2d       	mov	r30, r0
    1a78:	81 81       	ldd	r24, Z+1	; 0x01
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	ef 59       	subi	r30, 0x9F	; 159
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	01 90       	ld	r0, Z+
    1a82:	f0 81       	ld	r31, Z
    1a84:	e0 2d       	mov	r30, r0
    1a86:	94 81       	ldd	r25, Z+4	; 0x04
    1a88:	69 2f       	mov	r22, r25
    1a8a:	59 d9       	rcall	.-3406   	; 0xd3e <DIO_clear_pin>
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	ef 59       	subi	r30, 0x9F	; 159

	if (lcd->nbit == n4BIT_MODE) {
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	01 90       	ld	r0, Z+
    1a94:	f0 81       	ld	r31, Z
    1a96:	e0 2d       	mov	r30, r0
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 23       	and	r24, r24
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <lcd_send_data+0x80>
    1a9e:	52 c2       	rjmp	.+1188   	; 0x1f44 <lcd_send_data+0x524>
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	ef 59       	subi	r30, 0x9F	; 159
		DIO_write_port(lcd->dataPort, 0xF0, (data & 0xF0));
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	01 90       	ld	r0, Z+
    1aa8:	f0 81       	ld	r31, Z
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	22 81       	ldd	r18, Z+2	; 0x02
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ed 59       	subi	r30, 0x9D	; 157
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	90 7f       	andi	r25, 0xF0	; 240
    1aba:	82 2f       	mov	r24, r18
    1abc:	60 ef       	ldi	r22, 0xF0	; 240
    1abe:	49 2f       	mov	r20, r25
    1ac0:	ea d8       	rcall	.-3628   	; 0xc96 <DIO_write_port>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ef 59       	subi	r30, 0x9F	; 159
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
		DIO_set_pin(lcd->controlPort, (lcd->EN));
    1ac8:	01 90       	ld	r0, Z+
    1aca:	f0 81       	ld	r31, Z
    1acc:	e0 2d       	mov	r30, r0
    1ace:	81 81       	ldd	r24, Z+1	; 0x01
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ef 59       	subi	r30, 0x9F	; 159
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	01 90       	ld	r0, Z+
    1ad8:	f0 81       	ld	r31, Z
    1ada:	e0 2d       	mov	r30, r0
    1adc:	95 81       	ldd	r25, Z+5	; 0x05
    1ade:	69 2f       	mov	r22, r25
    1ae0:	09 d9       	rcall	.-3566   	; 0xcf4 <DIO_set_pin>
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e3 5a       	subi	r30, 0xA3	; 163
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e8       	ldi	r26, 0x80	; 128
    1aee:	bf e3       	ldi	r27, 0x3F	; 63
    1af0:	80 83       	st	Z, r24
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	a2 83       	std	Z+2, r26	; 0x02
    1af6:	b3 83       	std	Z+3, r27	; 0x03
    1af8:	8e 01       	movw	r16, r28
    1afa:	07 5a       	subi	r16, 0xA7	; 167
    1afc:	1f 4f       	sbci	r17, 0xFF	; 255
    1afe:	fe 01       	movw	r30, r28
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b00:	e3 5a       	subi	r30, 0xA3	; 163
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	2b ea       	ldi	r18, 0xAB	; 171
    1b0e:	3a ea       	ldi	r19, 0xAA	; 170
    1b10:	4a ea       	ldi	r20, 0xAA	; 170
    1b12:	5e e3       	ldi	r21, 0x3E	; 62
    1b14:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	80 83       	st	Z, r24
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	a2 83       	std	Z+2, r26	; 0x02
    1b24:	b3 83       	std	Z+3, r27	; 0x03
    1b26:	fe 01       	movw	r30, r28
    1b28:	e7 5a       	subi	r30, 0xA7	; 167
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
	if (__tmp < 1.0)
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	34 f4       	brge	.+12     	; 0x1b50 <lcd_send_data+0x130>
    1b44:	fe 01       	movw	r30, r28
    1b46:	e8 5a       	subi	r30, 0xA8	; 168
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1b4c:	80 83       	st	Z, r24
    1b4e:	e0 c0       	rjmp	.+448    	; 0x1d10 <lcd_send_data+0x2f0>
    1b50:	fe 01       	movw	r30, r28
    1b52:	e7 5a       	subi	r30, 0xA7	; 167
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	60 81       	ld	r22, Z
	else if (__tmp > 255)
    1b58:	71 81       	ldd	r23, Z+1	; 0x01
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	53 e4       	ldi	r21, 0x43	; 67
    1b66:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	0c f0       	brlt	.+2      	; 0x1b70 <lcd_send_data+0x150>
    1b6e:	c0 c0       	rjmp	.+384    	; 0x1cf0 <lcd_send_data+0x2d0>
    1b70:	fe 01       	movw	r30, r28
    1b72:	e3 5a       	subi	r30, 0xA3	; 163
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
	{
		_delay_ms(__us / 1000.0);
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a e7       	ldi	r20, 0x7A	; 122
    1b84:	54 e4       	ldi	r21, 0x44	; 68
    1b86:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ec 5a       	subi	r30, 0xAC	; 172
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 83       	st	Z, r24
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	a2 83       	std	Z+2, r26	; 0x02
    1b9a:	b3 83       	std	Z+3, r27	; 0x03
    1b9c:	8e 01       	movw	r16, r28
    1b9e:	00 5b       	subi	r16, 0xB0	; 176
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	fe 01       	movw	r30, r28
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	ec 5a       	subi	r30, 0xAC	; 172
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a e7       	ldi	r20, 0x7A	; 122
    1bb6:	53 e4       	ldi	r21, 0x43	; 67
    1bb8:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	80 83       	st	Z, r24
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	a2 83       	std	Z+2, r26	; 0x02
    1bc8:	b3 83       	std	Z+3, r27	; 0x03
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e0 5b       	subi	r30, 0xB0	; 176
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
	if (__tmp < 1.0)
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	44 f4       	brge	.+16     	; 0x1bf8 <lcd_send_data+0x1d8>
    1be8:	fe 01       	movw	r30, r28
    1bea:	e2 5b       	subi	r30, 0xB2	; 178
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
    1bf6:	64 c0       	rjmp	.+200    	; 0x1cc0 <lcd_send_data+0x2a0>
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e0 5b       	subi	r30, 0xB0	; 176
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	60 81       	ld	r22, Z
	else if (__tmp > 65535)
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	0c f0       	brlt	.+2      	; 0x1c18 <lcd_send_data+0x1f8>
    1c16:	43 c0       	rjmp	.+134    	; 0x1c9e <lcd_send_data+0x27e>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ec 5a       	subi	r30, 0xAC	; 172
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8e 01       	movw	r16, r28
    1c38:	02 5b       	subi	r16, 0xB2	; 178
    1c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	f8 01       	movw	r30, r16
    1c4a:	91 83       	std	Z+1, r25	; 0x01
    1c4c:	80 83       	st	Z, r24
    1c4e:	1f c0       	rjmp	.+62     	; 0x1c8e <lcd_send_data+0x26e>
    1c50:	fe 01       	movw	r30, r28
    1c52:	e4 5b       	subi	r30, 0xB4	; 180
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	89 e1       	ldi	r24, 0x19	; 25
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	80 83       	st	Z, r24
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e4 5b       	subi	r30, 0xB4	; 180
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <lcd_send_data+0x248>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e4 5b       	subi	r30, 0xB4	; 180
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
    1c76:	de 01       	movw	r26, r28
    1c78:	a2 5b       	subi	r26, 0xB2	; 178
    1c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c7c:	fe 01       	movw	r30, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	e2 5b       	subi	r30, 0xB2	; 178
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 81       	ld	r24, Z
    1c84:	91 81       	ldd	r25, Z+1	; 0x01
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	11 96       	adiw	r26, 0x01	; 1
    1c8a:	9c 93       	st	X, r25
    1c8c:	8e 93       	st	-X, r24
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e2 5b       	subi	r30, 0xB2	; 178
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	d1 f6       	brne	.-76     	; 0x1c50 <lcd_send_data+0x230>
    1c9c:	4b c0       	rjmp	.+150    	; 0x1d34 <lcd_send_data+0x314>
    1c9e:	8e 01       	movw	r16, r28
    1ca0:	02 5b       	subi	r16, 0xB2	; 178
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	fe 01       	movw	r30, r28
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	e0 5b       	subi	r30, 0xB0	; 176
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	f8 01       	movw	r30, r16
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	80 83       	st	Z, r24
    1cc0:	de 01       	movw	r26, r28
    1cc2:	a6 5b       	subi	r26, 0xB6	; 182
    1cc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e2 5b       	subi	r30, 0xB2	; 178
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 81       	ld	r24, Z
    1cce:	91 81       	ldd	r25, Z+1	; 0x01
    1cd0:	11 96       	adiw	r26, 0x01	; 1
    1cd2:	9c 93       	st	X, r25
    1cd4:	8e 93       	st	-X, r24
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e6 5b       	subi	r30, 0xB6	; 182
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <lcd_send_data+0x2c0>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e6 5b       	subi	r30, 0xB6	; 182
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	22 c0       	rjmp	.+68     	; 0x1d34 <lcd_send_data+0x314>
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	08 5a       	subi	r16, 0xA8	; 168
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cf8:	e7 5a       	subi	r30, 0xA7	; 167
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	80 83       	st	Z, r24
    1d10:	de 01       	movw	r26, r28
    1d12:	a7 5b       	subi	r26, 0xB7	; 183
    1d14:	bf 4f       	sbci	r27, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	e8 5a       	subi	r30, 0xA8	; 168
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8c 93       	st	X, r24
    1d20:	fe 01       	movw	r30, r28
    1d22:	e7 5b       	subi	r30, 0xB7	; 183
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d28:	8a 95       	dec	r24
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <lcd_send_data+0x308>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e7 5b       	subi	r30, 0xB7	; 183
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 83       	st	Z, r24
    1d34:	fe 01       	movw	r30, r28
    1d36:	ef 59       	subi	r30, 0x9F	; 159
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	01 90       	ld	r0, Z+
		_delay_us(1);
		DIO_clear_pin(lcd->controlPort, (lcd->EN));
    1d3c:	f0 81       	ld	r31, Z
    1d3e:	e0 2d       	mov	r30, r0
    1d40:	81 81       	ldd	r24, Z+1	; 0x01
    1d42:	fe 01       	movw	r30, r28
    1d44:	ef 59       	subi	r30, 0x9F	; 159
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	01 90       	ld	r0, Z+
    1d4a:	f0 81       	ld	r31, Z
    1d4c:	e0 2d       	mov	r30, r0
    1d4e:	95 81       	ldd	r25, Z+5	; 0x05
    1d50:	69 2f       	mov	r22, r25
    1d52:	0e 94 9f 06 	call	0xd3e	; 0xd3e <DIO_clear_pin>
    1d56:	fe 01       	movw	r30, r28
    1d58:	eb 5b       	subi	r30, 0xBB	; 187
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a8 ec       	ldi	r26, 0xC8	; 200
    1d62:	b2 e4       	ldi	r27, 0x42	; 66
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	a2 83       	std	Z+2, r26	; 0x02
    1d6a:	b3 83       	std	Z+3, r27	; 0x03
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	0f 5b       	subi	r16, 0xBF	; 191
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	fe 01       	movw	r30, r28
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d74:	eb 5b       	subi	r30, 0xBB	; 187
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	2b ea       	ldi	r18, 0xAB	; 171
    1d82:	3a ea       	ldi	r19, 0xAA	; 170
    1d84:	4a ea       	ldi	r20, 0xAA	; 170
    1d86:	5e e3       	ldi	r21, 0x3E	; 62
    1d88:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	f8 01       	movw	r30, r16
    1d92:	80 83       	st	Z, r24
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	a2 83       	std	Z+2, r26	; 0x02
    1d98:	b3 83       	std	Z+3, r27	; 0x03
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	ef 5b       	subi	r30, 0xBF	; 191
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	60 81       	ld	r22, Z
	if (__tmp < 1.0)
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	34 f4       	brge	.+12     	; 0x1dc4 <lcd_send_data+0x3a4>
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e0 5c       	subi	r30, 0xC0	; 192
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
		__ticks = 1;
    1dc0:	80 83       	st	Z, r24
    1dc2:	9d c0       	rjmp	.+314    	; 0x1efe <lcd_send_data+0x4de>
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ef 5b       	subi	r30, 0xBF	; 191
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
	else if (__tmp > 255)
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	53 e4       	ldi	r21, 0x43	; 67
    1dda:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	0c f0       	brlt	.+2      	; 0x1de4 <lcd_send_data+0x3c4>
    1de2:	7e c0       	rjmp	.+252    	; 0x1ee0 <lcd_send_data+0x4c0>
    1de4:	fe 01       	movw	r30, r28
    1de6:	eb 5b       	subi	r30, 0xBB	; 187
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
	{
		_delay_ms(__us / 1000.0);
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a e7       	ldi	r20, 0x7A	; 122
    1df8:	54 e4       	ldi	r21, 0x44	; 68
    1dfa:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	8c af       	std	Y+60, r24	; 0x3c
    1e04:	9d af       	std	Y+61, r25	; 0x3d
    1e06:	ae af       	std	Y+62, r26	; 0x3e
    1e08:	bf af       	std	Y+63, r27	; 0x3f
    1e0a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e0c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e10:	9f ad       	ldd	r25, Y+63	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4a e7       	ldi	r20, 0x7A	; 122
    1e18:	53 e4       	ldi	r21, 0x43	; 67
    1e1a:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	88 af       	std	Y+56, r24	; 0x38
    1e24:	99 af       	std	Y+57, r25	; 0x39
    1e26:	aa af       	std	Y+58, r26	; 0x3a
    1e28:	bb af       	std	Y+59, r27	; 0x3b
    1e2a:	68 ad       	ldd	r22, Y+56	; 0x38
    1e2c:	79 ad       	ldd	r23, Y+57	; 0x39
    1e2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e30:	9b ad       	ldd	r25, Y+59	; 0x3b
	if (__tmp < 1.0)
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <lcd_send_data+0x42c>
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9f ab       	std	Y+55, r25	; 0x37
    1e48:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
    1e4a:	3f c0       	rjmp	.+126    	; 0x1eca <lcd_send_data+0x4aa>
    1e4c:	68 ad       	ldd	r22, Y+56	; 0x38
    1e4e:	79 ad       	ldd	r23, Y+57	; 0x39
    1e50:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e52:	9b ad       	ldd	r25, Y+59	; 0x3b
	else if (__tmp > 65535)
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	4c f5       	brge	.+82     	; 0x1eb6 <lcd_send_data+0x496>
    1e64:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e66:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e68:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e6a:	9f ad       	ldd	r25, Y+63	; 0x3f
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e2       	ldi	r20, 0x20	; 32
    1e72:	51 e4       	ldi	r21, 0x41	; 65
    1e74:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9f ab       	std	Y+55, r25	; 0x37
    1e8a:	8e ab       	std	Y+54, r24	; 0x36
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <lcd_send_data+0x48c>
    1e8e:	89 e1       	ldi	r24, 0x19	; 25
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9d ab       	std	Y+53, r25	; 0x35
    1e94:	8c ab       	std	Y+52, r24	; 0x34
    1e96:	8c a9       	ldd	r24, Y+52	; 0x34
    1e98:	9d a9       	ldd	r25, Y+53	; 0x35
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <lcd_send_data+0x47a>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e9e:	9d ab       	std	Y+53, r25	; 0x35
    1ea0:	8c ab       	std	Y+52, r24	; 0x34
    1ea2:	8e a9       	ldd	r24, Y+54	; 0x36
    1ea4:	9f a9       	ldd	r25, Y+55	; 0x37
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	9f ab       	std	Y+55, r25	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	8e ab       	std	Y+54, r24	; 0x36
    1eac:	8e a9       	ldd	r24, Y+54	; 0x36
    1eae:	9f a9       	ldd	r25, Y+55	; 0x37
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	69 f7       	brne	.-38     	; 0x1e8e <lcd_send_data+0x46e>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	2d c0       	rjmp	.+90     	; 0x1f10 <lcd_send_data+0x4f0>
    1eb6:	68 ad       	ldd	r22, Y+56	; 0x38
    1eb8:	79 ad       	ldd	r23, Y+57	; 0x39
    1eba:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ebc:	9b ad       	ldd	r25, Y+59	; 0x3b
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9f ab       	std	Y+55, r25	; 0x37
    1ec8:	8e ab       	std	Y+54, r24	; 0x36
    1eca:	8e a9       	ldd	r24, Y+54	; 0x36
    1ecc:	9f a9       	ldd	r25, Y+55	; 0x37
    1ece:	9b ab       	std	Y+51, r25	; 0x33
    1ed0:	8a ab       	std	Y+50, r24	; 0x32
    1ed2:	8a a9       	ldd	r24, Y+50	; 0x32
    1ed4:	9b a9       	ldd	r25, Y+51	; 0x33
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <lcd_send_data+0x4b6>
    1eda:	9b ab       	std	Y+51, r25	; 0x33
    1edc:	8a ab       	std	Y+50, r24	; 0x32
    1ede:	18 c0       	rjmp	.+48     	; 0x1f10 <lcd_send_data+0x4f0>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	ef 5b       	subi	r30, 0xBF	; 191
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	60 81       	ld	r22, Z
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ee8:	71 81       	ldd	r23, Z+1	; 0x01
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e0 5c       	subi	r30, 0xC0	; 192
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 83       	st	Z, r24
    1efe:	fe 01       	movw	r30, r28
    1f00:	e0 5c       	subi	r30, 0xC0	; 192
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	89 ab       	std	Y+49, r24	; 0x31
    1f08:	89 a9       	ldd	r24, Y+49	; 0x31
    1f0a:	8a 95       	dec	r24
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <lcd_send_data+0x4ea>
    1f0e:	89 ab       	std	Y+49, r24	; 0x31
    1f10:	fe 01       	movw	r30, r28
    1f12:	ef 59       	subi	r30, 0x9F	; 159
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	01 90       	ld	r0, Z+
		_delay_us(100);
		DIO_write_port(lcd->dataPort, 0xF0, (data & 0xF) << 4);
    1f18:	f0 81       	ld	r31, Z
    1f1a:	e0 2d       	mov	r30, r0
    1f1c:	22 81       	ldd	r18, Z+2	; 0x02
    1f1e:	fe 01       	movw	r30, r28
    1f20:	ed 59       	subi	r30, 0x9D	; 157
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	88 2f       	mov	r24, r24
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	82 95       	swap	r24
    1f2c:	92 95       	swap	r25
    1f2e:	90 7f       	andi	r25, 0xF0	; 240
    1f30:	98 27       	eor	r25, r24
    1f32:	80 7f       	andi	r24, 0xF0	; 240
    1f34:	98 27       	eor	r25, r24
    1f36:	98 2f       	mov	r25, r24
    1f38:	82 2f       	mov	r24, r18
    1f3a:	60 ef       	ldi	r22, 0xF0	; 240
    1f3c:	49 2f       	mov	r20, r25
    1f3e:	0e 94 4b 06 	call	0xc96	; 0xc96 <DIO_write_port>
    1f42:	17 c0       	rjmp	.+46     	; 0x1f72 <lcd_send_data+0x552>
    1f44:	fe 01       	movw	r30, r28
    1f46:	ef 59       	subi	r30, 0x9F	; 159
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	01 90       	ld	r0, Z+
	} else if (lcd->nbit == n8BIT_MODE) {
    1f4c:	f0 81       	ld	r31, Z
    1f4e:	e0 2d       	mov	r30, r0
    1f50:	80 81       	ld	r24, Z
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	71 f4       	brne	.+28     	; 0x1f72 <lcd_send_data+0x552>
    1f56:	fe 01       	movw	r30, r28
    1f58:	ef 59       	subi	r30, 0x9F	; 159
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	01 90       	ld	r0, Z+
		DIO_write_port(lcd->dataPort, 0xFF, data);
    1f5e:	f0 81       	ld	r31, Z
    1f60:	e0 2d       	mov	r30, r0
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	fe 01       	movw	r30, r28
    1f66:	ed 59       	subi	r30, 0x9D	; 157
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	6f ef       	ldi	r22, 0xFF	; 255
    1f6c:	40 81       	ld	r20, Z
    1f6e:	0e 94 4b 06 	call	0xc96	; 0xc96 <DIO_write_port>
    1f72:	fe 01       	movw	r30, r28
    1f74:	ef 59       	subi	r30, 0x9F	; 159
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	01 90       	ld	r0, Z+
	} else {
		// todo error
	}
	DIO_set_pin(lcd->controlPort, (lcd->EN));
    1f7a:	f0 81       	ld	r31, Z
    1f7c:	e0 2d       	mov	r30, r0
    1f7e:	81 81       	ldd	r24, Z+1	; 0x01
    1f80:	fe 01       	movw	r30, r28
    1f82:	ef 59       	subi	r30, 0x9F	; 159
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	01 90       	ld	r0, Z+
    1f88:	f0 81       	ld	r31, Z
    1f8a:	e0 2d       	mov	r30, r0
    1f8c:	95 81       	ldd	r25, Z+5	; 0x05
    1f8e:	69 2f       	mov	r22, r25
    1f90:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_set_pin>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e8       	ldi	r26, 0x80	; 128
    1f9a:	bf e3       	ldi	r27, 0x3F	; 63
    1f9c:	8d a7       	std	Y+45, r24	; 0x2d
    1f9e:	9e a7       	std	Y+46, r25	; 0x2e
    1fa0:	af a7       	std	Y+47, r26	; 0x2f
    1fa2:	b8 ab       	std	Y+48, r27	; 0x30
    1fa4:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fa6:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1faa:	98 a9       	ldd	r25, Y+48	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fac:	2b ea       	ldi	r18, 0xAB	; 171
    1fae:	3a ea       	ldi	r19, 0xAA	; 170
    1fb0:	4a ea       	ldi	r20, 0xAA	; 170
    1fb2:	5e e3       	ldi	r21, 0x3E	; 62
    1fb4:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	89 a7       	std	Y+41, r24	; 0x29
    1fbe:	9a a7       	std	Y+42, r25	; 0x2a
    1fc0:	ab a7       	std	Y+43, r26	; 0x2b
    1fc2:	bc a7       	std	Y+44, r27	; 0x2c
    1fc4:	69 a5       	ldd	r22, Y+41	; 0x29
    1fc6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fca:	9c a5       	ldd	r25, Y+44	; 0x2c
	if (__tmp < 1.0)
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	1c f4       	brge	.+6      	; 0x1fe2 <lcd_send_data+0x5c2>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	88 a7       	std	Y+40, r24	; 0x28
    1fe0:	91 c0       	rjmp	.+290    	; 0x2104 <lcd_send_data+0x6e4>
    1fe2:	69 a5       	ldd	r22, Y+41	; 0x29
		__ticks = 1;
    1fe4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fe6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe8:	9c a5       	ldd	r25, Y+44	; 0x2c
	else if (__tmp > 255)
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4f e7       	ldi	r20, 0x7F	; 127
    1ff0:	53 e4       	ldi	r21, 0x43	; 67
    1ff2:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1ff6:	18 16       	cp	r1, r24
    1ff8:	0c f0       	brlt	.+2      	; 0x1ffc <lcd_send_data+0x5dc>
    1ffa:	7b c0       	rjmp	.+246    	; 0x20f2 <lcd_send_data+0x6d2>
    1ffc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ffe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
	{
		_delay_ms(__us / 1000.0);
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a e7       	ldi	r20, 0x7A	; 122
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8c a3       	std	Y+36, r24	; 0x24
    2016:	9d a3       	std	Y+37, r25	; 0x25
    2018:	ae a3       	std	Y+38, r26	; 0x26
    201a:	bf a3       	std	Y+39, r27	; 0x27
    201c:	6c a1       	ldd	r22, Y+36	; 0x24
    201e:	7d a1       	ldd	r23, Y+37	; 0x25
    2020:	8e a1       	ldd	r24, Y+38	; 0x26
    2022:	9f a1       	ldd	r25, Y+39	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a e7       	ldi	r20, 0x7A	; 122
    202a:	53 e4       	ldi	r21, 0x43	; 67
    202c:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	88 a3       	std	Y+32, r24	; 0x20
    2036:	99 a3       	std	Y+33, r25	; 0x21
    2038:	aa a3       	std	Y+34, r26	; 0x22
    203a:	bb a3       	std	Y+35, r27	; 0x23
    203c:	68 a1       	ldd	r22, Y+32	; 0x20
    203e:	79 a1       	ldd	r23, Y+33	; 0x21
    2040:	8a a1       	ldd	r24, Y+34	; 0x22
    2042:	9b a1       	ldd	r25, Y+35	; 0x23
	if (__tmp < 1.0)
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <lcd_send_data+0x63e>
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9f 8f       	std	Y+31, r25	; 0x1f
    205a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <lcd_send_data+0x6bc>
    205e:	68 a1       	ldd	r22, Y+32	; 0x20
    2060:	79 a1       	ldd	r23, Y+33	; 0x21
    2062:	8a a1       	ldd	r24, Y+34	; 0x22
    2064:	9b a1       	ldd	r25, Y+35	; 0x23
	else if (__tmp > 65535)
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <lcd_send_data+0x6a8>
    2076:	6c a1       	ldd	r22, Y+36	; 0x24
    2078:	7d a1       	ldd	r23, Y+37	; 0x25
    207a:	8e a1       	ldd	r24, Y+38	; 0x26
    207c:	9f a1       	ldd	r25, Y+39	; 0x27
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9f 8f       	std	Y+31, r25	; 0x1f
    209c:	8e 8f       	std	Y+30, r24	; 0x1e
    209e:	0f c0       	rjmp	.+30     	; 0x20be <lcd_send_data+0x69e>
    20a0:	89 e1       	ldi	r24, 0x19	; 25
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9d 8f       	std	Y+29, r25	; 0x1d
    20a6:	8c 8f       	std	Y+28, r24	; 0x1c
    20a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <lcd_send_data+0x68c>
    20b0:	9d 8f       	std	Y+29, r25	; 0x1d
    20b2:	8c 8f       	std	Y+28, r24	; 0x1c
    20b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	9f 8f       	std	Y+31, r25	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	8e 8f       	std	Y+30, r24	; 0x1e
    20be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <lcd_send_data+0x680>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	24 c0       	rjmp	.+72     	; 0x2110 <lcd_send_data+0x6f0>
    20c8:	68 a1       	ldd	r22, Y+32	; 0x20
    20ca:	79 a1       	ldd	r23, Y+33	; 0x21
    20cc:	8a a1       	ldd	r24, Y+34	; 0x22
    20ce:	9b a1       	ldd	r25, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9f 8f       	std	Y+31, r25	; 0x1f
    20da:	8e 8f       	std	Y+30, r24	; 0x1e
    20dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20de:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20e0:	9b 8f       	std	Y+27, r25	; 0x1b
    20e2:	8a 8f       	std	Y+26, r24	; 0x1a
    20e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <lcd_send_data+0x6c8>
    20ec:	9b 8f       	std	Y+27, r25	; 0x1b
    20ee:	8a 8f       	std	Y+26, r24	; 0x1a
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <lcd_send_data+0x6f0>
    20f2:	69 a5       	ldd	r22, Y+41	; 0x29
    20f4:	7a a5       	ldd	r23, Y+42	; 0x2a
    20f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f8:	9c a5       	ldd	r25, Y+44	; 0x2c
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20fa:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	88 a7       	std	Y+40, r24	; 0x28
    2104:	88 a5       	ldd	r24, Y+40	; 0x28
    2106:	89 8f       	std	Y+25, r24	; 0x19
    2108:	89 8d       	ldd	r24, Y+25	; 0x19
    210a:	8a 95       	dec	r24
    210c:	f1 f7       	brne	.-4      	; 0x210a <lcd_send_data+0x6ea>
    210e:	89 8f       	std	Y+25, r24	; 0x19
    2110:	fe 01       	movw	r30, r28
    2112:	ef 59       	subi	r30, 0x9F	; 159
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	01 90       	ld	r0, Z+
	_delay_us(1);
	DIO_clear_pin(lcd->controlPort, (lcd->EN));
    2118:	f0 81       	ld	r31, Z
    211a:	e0 2d       	mov	r30, r0
    211c:	81 81       	ldd	r24, Z+1	; 0x01
    211e:	fe 01       	movw	r30, r28
    2120:	ef 59       	subi	r30, 0x9F	; 159
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	01 90       	ld	r0, Z+
    2126:	f0 81       	ld	r31, Z
    2128:	e0 2d       	mov	r30, r0
    212a:	95 81       	ldd	r25, Z+5	; 0x05
    212c:	69 2f       	mov	r22, r25
    212e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <DIO_clear_pin>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a8 ec       	ldi	r26, 0xC8	; 200
    2138:	b2 e4       	ldi	r27, 0x42	; 66
    213a:	8d 8b       	std	Y+21, r24	; 0x15
    213c:	9e 8b       	std	Y+22, r25	; 0x16
    213e:	af 8b       	std	Y+23, r26	; 0x17
    2140:	b8 8f       	std	Y+24, r27	; 0x18
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    214a:	2b ea       	ldi	r18, 0xAB	; 171
    214c:	3a ea       	ldi	r19, 0xAA	; 170
    214e:	4a ea       	ldi	r20, 0xAA	; 170
    2150:	5e e3       	ldi	r21, 0x3E	; 62
    2152:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	89 8b       	std	Y+17, r24	; 0x11
    215c:	9a 8b       	std	Y+18, r25	; 0x12
    215e:	ab 8b       	std	Y+19, r26	; 0x13
    2160:	bc 8b       	std	Y+20, r27	; 0x14
    2162:	69 89       	ldd	r22, Y+17	; 0x11
    2164:	7a 89       	ldd	r23, Y+18	; 0x12
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
	if (__tmp < 1.0)
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	1c f4       	brge	.+6      	; 0x2180 <lcd_send_data+0x760>
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	88 8b       	std	Y+16, r24	; 0x10
    217e:	91 c0       	rjmp	.+290    	; 0x22a2 <lcd_send_data+0x882>
    2180:	69 89       	ldd	r22, Y+17	; 0x11
		__ticks = 1;
    2182:	7a 89       	ldd	r23, Y+18	; 0x12
    2184:	8b 89       	ldd	r24, Y+19	; 0x13
    2186:	9c 89       	ldd	r25, Y+20	; 0x14
	else if (__tmp > 255)
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	53 e4       	ldi	r21, 0x43	; 67
    2190:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	0c f0       	brlt	.+2      	; 0x219a <lcd_send_data+0x77a>
    2198:	7b c0       	rjmp	.+246    	; 0x2290 <lcd_send_data+0x870>
    219a:	6d 89       	ldd	r22, Y+21	; 0x15
    219c:	7e 89       	ldd	r23, Y+22	; 0x16
    219e:	8f 89       	ldd	r24, Y+23	; 0x17
    21a0:	98 8d       	ldd	r25, Y+24	; 0x18
	{
		_delay_ms(__us / 1000.0);
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a e7       	ldi	r20, 0x7A	; 122
    21a8:	54 e4       	ldi	r21, 0x44	; 68
    21aa:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	8c 87       	std	Y+12, r24	; 0x0c
    21b4:	9d 87       	std	Y+13, r25	; 0x0d
    21b6:	ae 87       	std	Y+14, r26	; 0x0e
    21b8:	bf 87       	std	Y+15, r27	; 0x0f
    21ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    21bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    21be:	8e 85       	ldd	r24, Y+14	; 0x0e
    21c0:	9f 85       	ldd	r25, Y+15	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4a e7       	ldi	r20, 0x7A	; 122
    21c8:	53 e4       	ldi	r21, 0x43	; 67
    21ca:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	88 87       	std	Y+8, r24	; 0x08
    21d4:	99 87       	std	Y+9, r25	; 0x09
    21d6:	aa 87       	std	Y+10, r26	; 0x0a
    21d8:	bb 87       	std	Y+11, r27	; 0x0b
    21da:	68 85       	ldd	r22, Y+8	; 0x08
    21dc:	79 85       	ldd	r23, Y+9	; 0x09
    21de:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e0:	9b 85       	ldd	r25, Y+11	; 0x0b
	if (__tmp < 1.0)
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    21ee:	88 23       	and	r24, r24
    21f0:	2c f4       	brge	.+10     	; 0x21fc <lcd_send_data+0x7dc>
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9f 83       	std	Y+7, r25	; 0x07
    21f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
    21fa:	3f c0       	rjmp	.+126    	; 0x227a <lcd_send_data+0x85a>
    21fc:	68 85       	ldd	r22, Y+8	; 0x08
    21fe:	79 85       	ldd	r23, Y+9	; 0x09
    2200:	8a 85       	ldd	r24, Y+10	; 0x0a
    2202:	9b 85       	ldd	r25, Y+11	; 0x0b
	else if (__tmp > 65535)
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	3f ef       	ldi	r19, 0xFF	; 255
    2208:	4f e7       	ldi	r20, 0x7F	; 127
    220a:	57 e4       	ldi	r21, 0x47	; 71
    220c:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    2210:	18 16       	cp	r1, r24
    2212:	4c f5       	brge	.+82     	; 0x2266 <lcd_send_data+0x846>
    2214:	6c 85       	ldd	r22, Y+12	; 0x0c
    2216:	7d 85       	ldd	r23, Y+13	; 0x0d
    2218:	8e 85       	ldd	r24, Y+14	; 0x0e
    221a:	9f 85       	ldd	r25, Y+15	; 0x0f
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e2       	ldi	r20, 0x20	; 32
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	bc 01       	movw	r22, r24
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9f 83       	std	Y+7, r25	; 0x07
    223a:	8e 83       	std	Y+6, r24	; 0x06
    223c:	0f c0       	rjmp	.+30     	; 0x225c <lcd_send_data+0x83c>
    223e:	89 e1       	ldi	r24, 0x19	; 25
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9d 83       	std	Y+5, r25	; 0x05
    2244:	8c 83       	std	Y+4, r24	; 0x04
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	9d 81       	ldd	r25, Y+5	; 0x05
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <lcd_send_data+0x82a>
    224e:	9d 83       	std	Y+5, r25	; 0x05
    2250:	8c 83       	std	Y+4, r24	; 0x04
    2252:	8e 81       	ldd	r24, Y+6	; 0x06
    2254:	9f 81       	ldd	r25, Y+7	; 0x07
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	9f 83       	std	Y+7, r25	; 0x07
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	8e 83       	std	Y+6, r24	; 0x06
    225c:	8e 81       	ldd	r24, Y+6	; 0x06
    225e:	9f 81       	ldd	r25, Y+7	; 0x07
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	69 f7       	brne	.-38     	; 0x223e <lcd_send_data+0x81e>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	24 c0       	rjmp	.+72     	; 0x22ae <lcd_send_data+0x88e>
    2266:	68 85       	ldd	r22, Y+8	; 0x08
    2268:	79 85       	ldd	r23, Y+9	; 0x09
    226a:	8a 85       	ldd	r24, Y+10	; 0x0a
    226c:	9b 85       	ldd	r25, Y+11	; 0x0b
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9f 83       	std	Y+7, r25	; 0x07
    2278:	8e 83       	std	Y+6, r24	; 0x06
    227a:	8e 81       	ldd	r24, Y+6	; 0x06
    227c:	9f 81       	ldd	r25, Y+7	; 0x07
    227e:	9b 83       	std	Y+3, r25	; 0x03
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	9b 81       	ldd	r25, Y+3	; 0x03
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <lcd_send_data+0x866>
    228a:	9b 83       	std	Y+3, r25	; 0x03
    228c:	8a 83       	std	Y+2, r24	; 0x02
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <lcd_send_data+0x88e>
    2290:	69 89       	ldd	r22, Y+17	; 0x11
    2292:	7a 89       	ldd	r23, Y+18	; 0x12
    2294:	8b 89       	ldd	r24, Y+19	; 0x13
    2296:	9c 89       	ldd	r25, Y+20	; 0x14
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2298:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	88 8b       	std	Y+16, r24	; 0x10
    22a2:	88 89       	ldd	r24, Y+16	; 0x10
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	8a 95       	dec	r24
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <lcd_send_data+0x888>
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	cd 59       	subi	r28, 0x9D	; 157
    22b0:	df 4f       	sbci	r29, 0xFF	; 255
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
	_delay_us(100);
}
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <lcd_print>:
//	if (x >= 0&&) todo
	//00-27h , 40h-67h

	lcd_send_command(lcd, firstCharAdr[y - 1] + x - 1);
}
void lcd_print(gcfg_lcd_t * lcd, char * str) {
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <lcd_print+0x6>
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <lcd_print+0x8>
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9b 83       	std	Y+3, r25	; 0x03
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	7d 83       	std	Y+5, r23	; 0x05
    22da:	6c 83       	std	Y+4, r22	; 0x04
    22dc:	10 c0       	rjmp	.+32     	; 0x22fe <lcd_print+0x38>
	u8 i;
	while (str[i] != '\0')
		lcd_send_data(lcd, str[i++]);
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	fc 01       	movw	r30, r24
    22ea:	e2 0f       	add	r30, r18
    22ec:	f3 1f       	adc	r31, r19
    22ee:	20 81       	ld	r18, Z
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	8f 5f       	subi	r24, 0xFF	; 255
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	62 2f       	mov	r22, r18
    22fc:	91 db       	rcall	.-2270   	; 0x1a20 <lcd_send_data>
    22fe:	89 81       	ldd	r24, Y+1	; 0x01

	lcd_send_command(lcd, firstCharAdr[y - 1] + x - 1);
}
void lcd_print(gcfg_lcd_t * lcd, char * str) {
	u8 i;
	while (str[i] != '\0')
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8c 81       	ldd	r24, Y+4	; 0x04
    2306:	9d 81       	ldd	r25, Y+5	; 0x05
    2308:	fc 01       	movw	r30, r24
    230a:	e2 0f       	add	r30, r18
    230c:	f3 1f       	adc	r31, r19
    230e:	80 81       	ld	r24, Z
    2310:	88 23       	and	r24, r24
    2312:	29 f7       	brne	.-54     	; 0x22de <lcd_print+0x18>
    2314:	0f 90       	pop	r0
		lcd_send_data(lcd, str[i++]);
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <__prologue_saves__>:
    2324:	2f 92       	push	r2
    2326:	3f 92       	push	r3
    2328:	4f 92       	push	r4
    232a:	5f 92       	push	r5
    232c:	6f 92       	push	r6
    232e:	7f 92       	push	r7
    2330:	8f 92       	push	r8
    2332:	9f 92       	push	r9
    2334:	af 92       	push	r10
    2336:	bf 92       	push	r11
    2338:	cf 92       	push	r12
    233a:	df 92       	push	r13
    233c:	ef 92       	push	r14
    233e:	ff 92       	push	r15
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	ca 1b       	sub	r28, r26
    234e:	db 0b       	sbc	r29, r27
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	09 94       	ijmp

0000235c <__epilogue_restores__>:
    235c:	2a 88       	ldd	r2, Y+18	; 0x12
    235e:	39 88       	ldd	r3, Y+17	; 0x11
    2360:	48 88       	ldd	r4, Y+16	; 0x10
    2362:	5f 84       	ldd	r5, Y+15	; 0x0f
    2364:	6e 84       	ldd	r6, Y+14	; 0x0e
    2366:	7d 84       	ldd	r7, Y+13	; 0x0d
    2368:	8c 84       	ldd	r8, Y+12	; 0x0c
    236a:	9b 84       	ldd	r9, Y+11	; 0x0b
    236c:	aa 84       	ldd	r10, Y+10	; 0x0a
    236e:	b9 84       	ldd	r11, Y+9	; 0x09
    2370:	c8 84       	ldd	r12, Y+8	; 0x08
    2372:	df 80       	ldd	r13, Y+7	; 0x07
    2374:	ee 80       	ldd	r14, Y+6	; 0x06
    2376:	fd 80       	ldd	r15, Y+5	; 0x05
    2378:	0c 81       	ldd	r16, Y+4	; 0x04
    237a:	1b 81       	ldd	r17, Y+3	; 0x03
    237c:	aa 81       	ldd	r26, Y+2	; 0x02
    237e:	b9 81       	ldd	r27, Y+1	; 0x01
    2380:	ce 0f       	add	r28, r30
    2382:	d1 1d       	adc	r29, r1
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	ed 01       	movw	r28, r26
    2390:	08 95       	ret

00002392 <_exit>:
    2392:	f8 94       	cli

00002394 <__stop_program>:
    2394:	ff cf       	rjmp	.-2      	; 0x2394 <__stop_program>
