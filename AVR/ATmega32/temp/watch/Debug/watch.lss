
watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001280  00001314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080006e  0080006e  00001322  2**0
                  ALLOC
  3 .stab         00001c20  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000174f  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 06 	call	0xc7e	; 0xc7e <main>
      8a:	0c 94 3e 09 	jmp	0x127c	; 0x127c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_10>:
#include "hal_timer.h"
void (*t0_isr)(), (*t1_isr)(), (*t2_isr)();

void TIMER0_COMP_vect() {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	if (t0_isr)
      9a:	80 91 8b 00 	lds	r24, 0x008B
      9e:	90 91 8c 00 	lds	r25, 0x008C
      a2:	00 97       	sbiw	r24, 0x00	; 0
      a4:	29 f0       	breq	.+10     	; 0xb0 <__vector_10+0x1e>
		t0_isr();
      a6:	e0 91 8b 00 	lds	r30, 0x008B
      aa:	f0 91 8c 00 	lds	r31, 0x008C
      ae:	09 95       	icall
}
      b0:	cf 91       	pop	r28
      b2:	df 91       	pop	r29
      b4:	08 95       	ret

000000b6 <__vector_4>:
void TIMER2_COMP_vect() {
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
	if (t2_isr)
      be:	80 91 8d 00 	lds	r24, 0x008D
      c2:	90 91 8e 00 	lds	r25, 0x008E
      c6:	00 97       	sbiw	r24, 0x00	; 0
      c8:	29 f0       	breq	.+10     	; 0xd4 <__vector_4+0x1e>
		t2_isr();
      ca:	e0 91 8d 00 	lds	r30, 0x008D
      ce:	f0 91 8e 00 	lds	r31, 0x008E
      d2:	09 95       	icall
}
      d4:	cf 91       	pop	r28
      d6:	df 91       	pop	r29
      d8:	08 95       	ret

000000da <hal_init_timer>:
s8 hal_init_timer(gcfg_hal_timer_t * obj) {
      da:	df 93       	push	r29
      dc:	cf 93       	push	r28
      de:	00 d0       	rcall	.+0      	; 0xe0 <hal_init_timer+0x6>
      e0:	00 d0       	rcall	.+0      	; 0xe2 <hal_init_timer+0x8>
      e2:	0f 92       	push	r0
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	9b 83       	std	Y+3, r25	; 0x03
      ea:	8a 83       	std	Y+2, r24	; 0x02
	s8 ret_val = E_OK;
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	89 83       	std	Y+1, r24	; 0x01
	if (obj != NULL) {
      f0:	8a 81       	ldd	r24, Y+2	; 0x02
      f2:	9b 81       	ldd	r25, Y+3	; 0x03
      f4:	00 97       	sbiw	r24, 0x00	; 0
      f6:	09 f4       	brne	.+2      	; 0xfa <hal_init_timer+0x20>
      f8:	14 c1       	rjmp	.+552    	; 0x322 <hal_init_timer+0x248>
//		if (obj->freq && obj->ins_timer && obj->timer_fun) {
		switch (obj->ins_timer) {
      fa:	ea 81       	ldd	r30, Y+2	; 0x02
      fc:	fb 81       	ldd	r31, Y+3	; 0x03
      fe:	80 81       	ld	r24, Z
     100:	28 2f       	mov	r18, r24
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	3d 83       	std	Y+5, r19	; 0x05
     106:	2c 83       	std	Y+4, r18	; 0x04
     108:	8c 81       	ldd	r24, Y+4	; 0x04
     10a:	9d 81       	ldd	r25, Y+5	; 0x05
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	91 05       	cpc	r25, r1
     110:	09 f4       	brne	.+2      	; 0x114 <hal_init_timer+0x3a>
     112:	09 c1       	rjmp	.+530    	; 0x326 <hal_init_timer+0x24c>
     114:	2c 81       	ldd	r18, Y+4	; 0x04
     116:	3d 81       	ldd	r19, Y+5	; 0x05
     118:	22 30       	cpi	r18, 0x02	; 2
     11a:	31 05       	cpc	r19, r1
     11c:	09 f4       	brne	.+2      	; 0x120 <hal_init_timer+0x46>
     11e:	80 c0       	rjmp	.+256    	; 0x220 <hal_init_timer+0x146>
     120:	8c 81       	ldd	r24, Y+4	; 0x04
     122:	9d 81       	ldd	r25, Y+5	; 0x05
     124:	00 97       	sbiw	r24, 0x00	; 0
     126:	09 f0       	breq	.+2      	; 0x12a <hal_init_timer+0x50>
     128:	fe c0       	rjmp	.+508    	; 0x326 <hal_init_timer+0x24c>
		case TIMER_0:
			TCCR0 |= ((obj->timer_fun) / 2) << 6;
     12a:	a3 e5       	ldi	r26, 0x53	; 83
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	e3 e5       	ldi	r30, 0x53	; 83
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	28 2f       	mov	r18, r24
     136:	ea 81       	ldd	r30, Y+2	; 0x02
     138:	fb 81       	ldd	r31, Y+3	; 0x03
     13a:	82 81       	ldd	r24, Z+2	; 0x02
     13c:	86 95       	lsr	r24
     13e:	88 2f       	mov	r24, r24
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	00 24       	eor	r0, r0
     144:	96 95       	lsr	r25
     146:	87 95       	ror	r24
     148:	07 94       	ror	r0
     14a:	96 95       	lsr	r25
     14c:	87 95       	ror	r24
     14e:	07 94       	ror	r0
     150:	98 2f       	mov	r25, r24
     152:	80 2d       	mov	r24, r0
     154:	82 2b       	or	r24, r18
     156:	8c 93       	st	X, r24
			TCCR0 |= ((obj->timer_fun) % 2) << 3;
     158:	a3 e5       	ldi	r26, 0x53	; 83
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	e3 e5       	ldi	r30, 0x53	; 83
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	28 2f       	mov	r18, r24
     164:	ea 81       	ldd	r30, Y+2	; 0x02
     166:	fb 81       	ldd	r31, Y+3	; 0x03
     168:	82 81       	ldd	r24, Z+2	; 0x02
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	90 70       	andi	r25, 0x00	; 0
     172:	88 0f       	add	r24, r24
     174:	99 1f       	adc	r25, r25
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	82 2b       	or	r24, r18
     180:	8c 93       	st	X, r24
			TCCR0 |= (obj->freq);
     182:	a3 e5       	ldi	r26, 0x53	; 83
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	e3 e5       	ldi	r30, 0x53	; 83
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	90 81       	ld	r25, Z
     18c:	ea 81       	ldd	r30, Y+2	; 0x02
     18e:	fb 81       	ldd	r31, Y+3	; 0x03
     190:	81 81       	ldd	r24, Z+1	; 0x01
     192:	89 2b       	or	r24, r25
     194:	8c 93       	st	X, r24
			TCCR0 |= (obj->com) << 4;
     196:	a3 e5       	ldi	r26, 0x53	; 83
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e3 e5       	ldi	r30, 0x53	; 83
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	28 2f       	mov	r18, r24
     1a2:	ea 81       	ldd	r30, Y+2	; 0x02
     1a4:	fb 81       	ldd	r31, Y+3	; 0x03
     1a6:	83 81       	ldd	r24, Z+3	; 0x03
     1a8:	88 2f       	mov	r24, r24
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	82 95       	swap	r24
     1ae:	92 95       	swap	r25
     1b0:	90 7f       	andi	r25, 0xF0	; 240
     1b2:	98 27       	eor	r25, r24
     1b4:	80 7f       	andi	r24, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	82 2b       	or	r24, r18
     1ba:	8c 93       	st	X, r24
			TIMSK |= (1 << (obj->interrupt));
     1bc:	a9 e5       	ldi	r26, 0x59	; 89
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	e9 e5       	ldi	r30, 0x59	; 89
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	48 2f       	mov	r20, r24
     1c8:	ea 81       	ldd	r30, Y+2	; 0x02
     1ca:	fb 81       	ldd	r31, Y+3	; 0x03
     1cc:	84 81       	ldd	r24, Z+4	; 0x04
     1ce:	28 2f       	mov	r18, r24
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <hal_init_timer+0x102>
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	2a 95       	dec	r18
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <hal_init_timer+0xfe>
     1e0:	84 2b       	or	r24, r20
     1e2:	8c 93       	st	X, r24
			TIFR |= (1 << (obj->interrupt));
     1e4:	a8 e5       	ldi	r26, 0x58	; 88
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 e5       	ldi	r30, 0x58	; 88
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	48 2f       	mov	r20, r24
     1f0:	ea 81       	ldd	r30, Y+2	; 0x02
     1f2:	fb 81       	ldd	r31, Y+3	; 0x03
     1f4:	84 81       	ldd	r24, Z+4	; 0x04
     1f6:	28 2f       	mov	r18, r24
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 2e       	mov	r0, r18
     200:	02 c0       	rjmp	.+4      	; 0x206 <hal_init_timer+0x12c>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <hal_init_timer+0x128>
     20a:	84 2b       	or	r24, r20
     20c:	8c 93       	st	X, r24
			t0_isr = obj->func;
     20e:	ea 81       	ldd	r30, Y+2	; 0x02
     210:	fb 81       	ldd	r31, Y+3	; 0x03
     212:	85 81       	ldd	r24, Z+5	; 0x05
     214:	96 81       	ldd	r25, Z+6	; 0x06
     216:	90 93 8c 00 	sts	0x008C, r25
     21a:	80 93 8b 00 	sts	0x008B, r24
     21e:	83 c0       	rjmp	.+262    	; 0x326 <hal_init_timer+0x24c>
			break;
		case TIMER_1:

			break;
		case TIMER_2:
			TCCR2 |= ((obj->timer_fun) / 2) << 6;
     220:	a5 e4       	ldi	r26, 0x45	; 69
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e5 e4       	ldi	r30, 0x45	; 69
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	28 2f       	mov	r18, r24
     22c:	ea 81       	ldd	r30, Y+2	; 0x02
     22e:	fb 81       	ldd	r31, Y+3	; 0x03
     230:	82 81       	ldd	r24, Z+2	; 0x02
     232:	86 95       	lsr	r24
     234:	88 2f       	mov	r24, r24
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	00 24       	eor	r0, r0
     23a:	96 95       	lsr	r25
     23c:	87 95       	ror	r24
     23e:	07 94       	ror	r0
     240:	96 95       	lsr	r25
     242:	87 95       	ror	r24
     244:	07 94       	ror	r0
     246:	98 2f       	mov	r25, r24
     248:	80 2d       	mov	r24, r0
     24a:	82 2b       	or	r24, r18
     24c:	8c 93       	st	X, r24
			TCCR2 |= ((obj->timer_fun) % 2) << 3;
     24e:	a5 e4       	ldi	r26, 0x45	; 69
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e5 e4       	ldi	r30, 0x45	; 69
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	28 2f       	mov	r18, r24
     25a:	ea 81       	ldd	r30, Y+2	; 0x02
     25c:	fb 81       	ldd	r31, Y+3	; 0x03
     25e:	82 81       	ldd	r24, Z+2	; 0x02
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	81 70       	andi	r24, 0x01	; 1
     266:	90 70       	andi	r25, 0x00	; 0
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	82 2b       	or	r24, r18
     276:	8c 93       	st	X, r24
			TCCR2 |= (obj->freq);
     278:	a5 e4       	ldi	r26, 0x45	; 69
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	e5 e4       	ldi	r30, 0x45	; 69
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	90 81       	ld	r25, Z
     282:	ea 81       	ldd	r30, Y+2	; 0x02
     284:	fb 81       	ldd	r31, Y+3	; 0x03
     286:	81 81       	ldd	r24, Z+1	; 0x01
     288:	89 2b       	or	r24, r25
     28a:	8c 93       	st	X, r24
			TCCR2 |= (obj->com) << 4;
     28c:	a5 e4       	ldi	r26, 0x45	; 69
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e5 e4       	ldi	r30, 0x45	; 69
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	28 2f       	mov	r18, r24
     298:	ea 81       	ldd	r30, Y+2	; 0x02
     29a:	fb 81       	ldd	r31, Y+3	; 0x03
     29c:	83 81       	ldd	r24, Z+3	; 0x03
     29e:	88 2f       	mov	r24, r24
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	82 95       	swap	r24
     2a4:	92 95       	swap	r25
     2a6:	90 7f       	andi	r25, 0xF0	; 240
     2a8:	98 27       	eor	r25, r24
     2aa:	80 7f       	andi	r24, 0xF0	; 240
     2ac:	98 27       	eor	r25, r24
     2ae:	82 2b       	or	r24, r18
     2b0:	8c 93       	st	X, r24
			TIMSK |= (1 << (obj->interrupt + 6));
     2b2:	a9 e5       	ldi	r26, 0x59	; 89
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	e9 e5       	ldi	r30, 0x59	; 89
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	48 2f       	mov	r20, r24
     2be:	ea 81       	ldd	r30, Y+2	; 0x02
     2c0:	fb 81       	ldd	r31, Y+3	; 0x03
     2c2:	84 81       	ldd	r24, Z+4	; 0x04
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	9c 01       	movw	r18, r24
     2ca:	2a 5f       	subi	r18, 0xFA	; 250
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <hal_init_timer+0x1fe>
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	2a 95       	dec	r18
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <hal_init_timer+0x1fa>
     2dc:	84 2b       	or	r24, r20
     2de:	8c 93       	st	X, r24
			TIFR |= (1 << (obj->interrupt + 6));
     2e0:	a8 e5       	ldi	r26, 0x58	; 88
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e8 e5       	ldi	r30, 0x58	; 88
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	48 2f       	mov	r20, r24
     2ec:	ea 81       	ldd	r30, Y+2	; 0x02
     2ee:	fb 81       	ldd	r31, Y+3	; 0x03
     2f0:	84 81       	ldd	r24, Z+4	; 0x04
     2f2:	88 2f       	mov	r24, r24
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	9c 01       	movw	r18, r24
     2f8:	2a 5f       	subi	r18, 0xFA	; 250
     2fa:	3f 4f       	sbci	r19, 0xFF	; 255
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	02 2e       	mov	r0, r18
     302:	02 c0       	rjmp	.+4      	; 0x308 <hal_init_timer+0x22e>
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	0a 94       	dec	r0
     30a:	e2 f7       	brpl	.-8      	; 0x304 <hal_init_timer+0x22a>
     30c:	84 2b       	or	r24, r20
     30e:	8c 93       	st	X, r24
			t2_isr = obj->func;
     310:	ea 81       	ldd	r30, Y+2	; 0x02
     312:	fb 81       	ldd	r31, Y+3	; 0x03
     314:	85 81       	ldd	r24, Z+5	; 0x05
     316:	96 81       	ldd	r25, Z+6	; 0x06
     318:	90 93 8e 00 	sts	0x008E, r25
     31c:	80 93 8d 00 	sts	0x008D, r24
     320:	02 c0       	rjmp	.+4      	; 0x326 <hal_init_timer+0x24c>

//		} else {
//			ret_val = INVALID_ARG;
//		}
	} else {
		ret_val = INVALID_ARG;
     322:	8d ec       	ldi	r24, 0xCD	; 205
     324:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_val;
     326:	89 81       	ldd	r24, Y+1	; 0x01
}
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	cf 91       	pop	r28
     334:	df 91       	pop	r29
     336:	08 95       	ret

00000338 <hal_read_timer>:

s8 hal_read_timer(gcfg_hal_timer_t * obj, u8 * res) {
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	27 97       	sbiw	r28, 0x07	; 7
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	9b 83       	std	Y+3, r25	; 0x03
     34e:	8a 83       	std	Y+2, r24	; 0x02
     350:	7d 83       	std	Y+5, r23	; 0x05
     352:	6c 83       	std	Y+4, r22	; 0x04
	s8 ret_val = E_OK;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	89 83       	std	Y+1, r24	; 0x01
	if (obj != NULL) {
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	9b 81       	ldd	r25, Y+3	; 0x03
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	19 f1       	breq	.+70     	; 0x3a6 <hal_read_timer+0x6e>
//		if (obj->freq && obj->ins_timer && obj->timer_fun) {
		switch (obj->ins_timer) {
     360:	ea 81       	ldd	r30, Y+2	; 0x02
     362:	fb 81       	ldd	r31, Y+3	; 0x03
     364:	80 81       	ld	r24, Z
     366:	28 2f       	mov	r18, r24
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	3f 83       	std	Y+7, r19	; 0x07
     36c:	2e 83       	std	Y+6, r18	; 0x06
     36e:	8e 81       	ldd	r24, Y+6	; 0x06
     370:	9f 81       	ldd	r25, Y+7	; 0x07
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	91 05       	cpc	r25, r1
     376:	c9 f0       	breq	.+50     	; 0x3aa <hal_read_timer+0x72>
     378:	2e 81       	ldd	r18, Y+6	; 0x06
     37a:	3f 81       	ldd	r19, Y+7	; 0x07
     37c:	22 30       	cpi	r18, 0x02	; 2
     37e:	31 05       	cpc	r19, r1
     380:	59 f0       	breq	.+22     	; 0x398 <hal_read_timer+0x60>
     382:	8e 81       	ldd	r24, Y+6	; 0x06
     384:	9f 81       	ldd	r25, Y+7	; 0x07
     386:	00 97       	sbiw	r24, 0x00	; 0
     388:	81 f4       	brne	.+32     	; 0x3aa <hal_read_timer+0x72>
		case TIMER_0:
			*res = TCNT0;
     38a:	e2 e5       	ldi	r30, 0x52	; 82
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	ec 81       	ldd	r30, Y+4	; 0x04
     392:	fd 81       	ldd	r31, Y+5	; 0x05
     394:	80 83       	st	Z, r24
     396:	09 c0       	rjmp	.+18     	; 0x3aa <hal_read_timer+0x72>
			break;
		case TIMER_1:

			break;
		case TIMER_2:
			*res = TCNT2;
     398:	e4 e4       	ldi	r30, 0x44	; 68
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	ec 81       	ldd	r30, Y+4	; 0x04
     3a0:	fd 81       	ldd	r31, Y+5	; 0x05
     3a2:	80 83       	st	Z, r24
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <hal_read_timer+0x72>
		}
//		} else {
//			ret_val = INVALID_ARG;
//		}
	} else {
		ret_val = INVALID_ARG;
     3a6:	8d ec       	ldi	r24, 0xCD	; 205
     3a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_val;
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ac:	27 96       	adiw	r28, 0x07	; 7
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	cf 91       	pop	r28
     3ba:	df 91       	pop	r29
     3bc:	08 95       	ret

000003be <hal_update_timer>:

s8 hal_update_timer(gcfg_hal_timer_t * obj, u8 value) {
     3be:	df 93       	push	r29
     3c0:	cf 93       	push	r28
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <hal_update_timer+0x6>
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <hal_update_timer+0x8>
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <hal_update_timer+0xa>
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	9b 83       	std	Y+3, r25	; 0x03
     3ce:	8a 83       	std	Y+2, r24	; 0x02
     3d0:	6c 83       	std	Y+4, r22	; 0x04
	s8 ret_val = E_OK;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	89 83       	std	Y+1, r24	; 0x01
	if (obj != NULL) {
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	9b 81       	ldd	r25, Y+3	; 0x03
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	f9 f0       	breq	.+62     	; 0x41c <hal_update_timer+0x5e>
//		if (obj->freq && obj->ins_timer && obj->timer_fun) {
		switch (obj->ins_timer) {
     3de:	ea 81       	ldd	r30, Y+2	; 0x02
     3e0:	fb 81       	ldd	r31, Y+3	; 0x03
     3e2:	80 81       	ld	r24, Z
     3e4:	28 2f       	mov	r18, r24
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	3e 83       	std	Y+6, r19	; 0x06
     3ea:	2d 83       	std	Y+5, r18	; 0x05
     3ec:	8d 81       	ldd	r24, Y+5	; 0x05
     3ee:	9e 81       	ldd	r25, Y+6	; 0x06
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	91 05       	cpc	r25, r1
     3f4:	a9 f0       	breq	.+42     	; 0x420 <hal_update_timer+0x62>
     3f6:	2d 81       	ldd	r18, Y+5	; 0x05
     3f8:	3e 81       	ldd	r19, Y+6	; 0x06
     3fa:	22 30       	cpi	r18, 0x02	; 2
     3fc:	31 05       	cpc	r19, r1
     3fe:	49 f0       	breq	.+18     	; 0x412 <hal_update_timer+0x54>
     400:	8d 81       	ldd	r24, Y+5	; 0x05
     402:	9e 81       	ldd	r25, Y+6	; 0x06
     404:	00 97       	sbiw	r24, 0x00	; 0
     406:	61 f4       	brne	.+24     	; 0x420 <hal_update_timer+0x62>
		case TIMER_0:
			TCNT0 = value;
     408:	e2 e5       	ldi	r30, 0x52	; 82
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	8c 81       	ldd	r24, Y+4	; 0x04
     40e:	80 83       	st	Z, r24
     410:	07 c0       	rjmp	.+14     	; 0x420 <hal_update_timer+0x62>
			break;
		case TIMER_1:

			break;
		case TIMER_2:
			TCNT2 = value;
     412:	e4 e4       	ldi	r30, 0x44	; 68
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	8c 81       	ldd	r24, Y+4	; 0x04
     418:	80 83       	st	Z, r24
     41a:	02 c0       	rjmp	.+4      	; 0x420 <hal_update_timer+0x62>
		}
//		} else {
//			ret_val = INVALID_ARG;
//		}
	} else {
		ret_val = INVALID_ARG;
     41c:	8d ec       	ldi	r24, 0xCD	; 205
     41e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_val;
     420:	89 81       	ldd	r24, Y+1	; 0x01
}
     422:	26 96       	adiw	r28, 0x06	; 6
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	08 95       	ret

00000434 <hal_is_timer_finish>:

s8 hal_is_timer_finish(gcfg_hal_timer_t * obj, bool_t * res) {
     434:	df 93       	push	r29
     436:	cf 93       	push	r28
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	29 97       	sbiw	r28, 0x09	; 9
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	9b 83       	std	Y+3, r25	; 0x03
     44a:	8a 83       	std	Y+2, r24	; 0x02
     44c:	7d 83       	std	Y+5, r23	; 0x05
     44e:	6c 83       	std	Y+4, r22	; 0x04
	s8 ret_val = E_OK;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	89 83       	std	Y+1, r24	; 0x01
	if (obj != NULL) {
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	00 97       	sbiw	r24, 0x00	; 0
     45a:	09 f4       	brne	.+2      	; 0x45e <hal_is_timer_finish+0x2a>
     45c:	95 c0       	rjmp	.+298    	; 0x588 <hal_is_timer_finish+0x154>
//		if (obj->freq && obj->ins_timer && obj->timer_fun) {
		switch (obj->ins_timer) {
     45e:	ea 81       	ldd	r30, Y+2	; 0x02
     460:	fb 81       	ldd	r31, Y+3	; 0x03
     462:	80 81       	ld	r24, Z
     464:	28 2f       	mov	r18, r24
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	39 87       	std	Y+9, r19	; 0x09
     46a:	28 87       	std	Y+8, r18	; 0x08
     46c:	88 85       	ldd	r24, Y+8	; 0x08
     46e:	99 85       	ldd	r25, Y+9	; 0x09
     470:	81 30       	cpi	r24, 0x01	; 1
     472:	91 05       	cpc	r25, r1
     474:	09 f4       	brne	.+2      	; 0x478 <hal_is_timer_finish+0x44>
     476:	8a c0       	rjmp	.+276    	; 0x58c <hal_is_timer_finish+0x158>
     478:	28 85       	ldd	r18, Y+8	; 0x08
     47a:	39 85       	ldd	r19, Y+9	; 0x09
     47c:	22 30       	cpi	r18, 0x02	; 2
     47e:	31 05       	cpc	r19, r1
     480:	09 f4       	brne	.+2      	; 0x484 <hal_is_timer_finish+0x50>
     482:	41 c0       	rjmp	.+130    	; 0x506 <hal_is_timer_finish+0xd2>
     484:	88 85       	ldd	r24, Y+8	; 0x08
     486:	99 85       	ldd	r25, Y+9	; 0x09
     488:	00 97       	sbiw	r24, 0x00	; 0
     48a:	09 f0       	breq	.+2      	; 0x48e <hal_is_timer_finish+0x5a>
     48c:	7f c0       	rjmp	.+254    	; 0x58c <hal_is_timer_finish+0x158>
		case TIMER_0:
			*res = (TIFR & ~(1 << (obj->interrupt))) > 0;
     48e:	e8 e5       	ldi	r30, 0x58	; 88
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	48 2f       	mov	r20, r24
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	ea 81       	ldd	r30, Y+2	; 0x02
     49a:	fb 81       	ldd	r31, Y+3	; 0x03
     49c:	84 81       	ldd	r24, Z+4	; 0x04
     49e:	28 2f       	mov	r18, r24
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	02 2e       	mov	r0, r18
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <hal_is_timer_finish+0x7a>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	0a 94       	dec	r0
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <hal_is_timer_finish+0x76>
     4b2:	80 95       	com	r24
     4b4:	90 95       	com	r25
     4b6:	84 23       	and	r24, r20
     4b8:	95 23       	and	r25, r21
     4ba:	1f 82       	std	Y+7, r1	; 0x07
     4bc:	18 16       	cp	r1, r24
     4be:	19 06       	cpc	r1, r25
     4c0:	14 f4       	brge	.+4      	; 0x4c6 <hal_is_timer_finish+0x92>
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	9f 83       	std	Y+7, r25	; 0x07
     4c6:	ec 81       	ldd	r30, Y+4	; 0x04
     4c8:	fd 81       	ldd	r31, Y+5	; 0x05
     4ca:	2f 81       	ldd	r18, Y+7	; 0x07
     4cc:	20 83       	st	Z, r18
			if (*res)
     4ce:	ec 81       	ldd	r30, Y+4	; 0x04
     4d0:	fd 81       	ldd	r31, Y+5	; 0x05
     4d2:	80 81       	ld	r24, Z
     4d4:	88 23       	and	r24, r24
     4d6:	09 f4       	brne	.+2      	; 0x4da <hal_is_timer_finish+0xa6>
     4d8:	59 c0       	rjmp	.+178    	; 0x58c <hal_is_timer_finish+0x158>
				TIFR |= (1 << (obj->interrupt));
     4da:	a8 e5       	ldi	r26, 0x58	; 88
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	e8 e5       	ldi	r30, 0x58	; 88
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	48 2f       	mov	r20, r24
     4e6:	ea 81       	ldd	r30, Y+2	; 0x02
     4e8:	fb 81       	ldd	r31, Y+3	; 0x03
     4ea:	84 81       	ldd	r24, Z+4	; 0x04
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	02 2e       	mov	r0, r18
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <hal_is_timer_finish+0xc8>
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	0a 94       	dec	r0
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <hal_is_timer_finish+0xc4>
     500:	84 2b       	or	r24, r20
     502:	8c 93       	st	X, r24
     504:	43 c0       	rjmp	.+134    	; 0x58c <hal_is_timer_finish+0x158>
			break;
		case TIMER_1:

			break;
		case TIMER_2:
			*res = (TIFR & ~(1 << (obj->interrupt + 6))) > 0;
     506:	e8 e5       	ldi	r30, 0x58	; 88
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	48 2f       	mov	r20, r24
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	ea 81       	ldd	r30, Y+2	; 0x02
     512:	fb 81       	ldd	r31, Y+3	; 0x03
     514:	84 81       	ldd	r24, Z+4	; 0x04
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	9c 01       	movw	r18, r24
     51c:	2a 5f       	subi	r18, 0xFA	; 250
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	02 2e       	mov	r0, r18
     526:	02 c0       	rjmp	.+4      	; 0x52c <hal_is_timer_finish+0xf8>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	0a 94       	dec	r0
     52e:	e2 f7       	brpl	.-8      	; 0x528 <hal_is_timer_finish+0xf4>
     530:	80 95       	com	r24
     532:	90 95       	com	r25
     534:	84 23       	and	r24, r20
     536:	95 23       	and	r25, r21
     538:	1e 82       	std	Y+6, r1	; 0x06
     53a:	18 16       	cp	r1, r24
     53c:	19 06       	cpc	r1, r25
     53e:	14 f4       	brge	.+4      	; 0x544 <hal_is_timer_finish+0x110>
     540:	31 e0       	ldi	r19, 0x01	; 1
     542:	3e 83       	std	Y+6, r19	; 0x06
     544:	ec 81       	ldd	r30, Y+4	; 0x04
     546:	fd 81       	ldd	r31, Y+5	; 0x05
     548:	8e 81       	ldd	r24, Y+6	; 0x06
     54a:	80 83       	st	Z, r24
			if (*res)
     54c:	ec 81       	ldd	r30, Y+4	; 0x04
     54e:	fd 81       	ldd	r31, Y+5	; 0x05
     550:	80 81       	ld	r24, Z
     552:	88 23       	and	r24, r24
     554:	d9 f0       	breq	.+54     	; 0x58c <hal_is_timer_finish+0x158>
				TIFR |= (1 << (obj->interrupt + 6));
     556:	a8 e5       	ldi	r26, 0x58	; 88
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	e8 e5       	ldi	r30, 0x58	; 88
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	48 2f       	mov	r20, r24
     562:	ea 81       	ldd	r30, Y+2	; 0x02
     564:	fb 81       	ldd	r31, Y+3	; 0x03
     566:	84 81       	ldd	r24, Z+4	; 0x04
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9c 01       	movw	r18, r24
     56e:	2a 5f       	subi	r18, 0xFA	; 250
     570:	3f 4f       	sbci	r19, 0xFF	; 255
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	02 2e       	mov	r0, r18
     578:	02 c0       	rjmp	.+4      	; 0x57e <hal_is_timer_finish+0x14a>
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	0a 94       	dec	r0
     580:	e2 f7       	brpl	.-8      	; 0x57a <hal_is_timer_finish+0x146>
     582:	84 2b       	or	r24, r20
     584:	8c 93       	st	X, r24
     586:	02 c0       	rjmp	.+4      	; 0x58c <hal_is_timer_finish+0x158>
		}
//		} else {
//			ret_val = INVALID_ARG;
//		}
	} else {
		ret_val = INVALID_ARG;
     588:	8d ec       	ldi	r24, 0xCD	; 205
     58a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_val;
     58c:	89 81       	ldd	r24, Y+1	; 0x01
}
     58e:	29 96       	adiw	r28, 0x09	; 9
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	cf 91       	pop	r28
     59c:	df 91       	pop	r29
     59e:	08 95       	ret

000005a0 <hal_update_cmp_timer>:

s8 hal_update_cmp_timer(gcfg_hal_timer_t * obj, u8 value) {
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <hal_update_cmp_timer+0x6>
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <hal_update_cmp_timer+0x8>
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <hal_update_cmp_timer+0xa>
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	9b 83       	std	Y+3, r25	; 0x03
     5b0:	8a 83       	std	Y+2, r24	; 0x02
     5b2:	6c 83       	std	Y+4, r22	; 0x04
	s8 ret_val = E_OK;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	89 83       	std	Y+1, r24	; 0x01
	if (obj != NULL) {
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	9b 81       	ldd	r25, Y+3	; 0x03
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	f9 f0       	breq	.+62     	; 0x5fe <hal_update_cmp_timer+0x5e>
//		if (obj->freq && obj->ins_timer && obj->timer_fun) {
		switch (obj->ins_timer) {
     5c0:	ea 81       	ldd	r30, Y+2	; 0x02
     5c2:	fb 81       	ldd	r31, Y+3	; 0x03
     5c4:	80 81       	ld	r24, Z
     5c6:	28 2f       	mov	r18, r24
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	3e 83       	std	Y+6, r19	; 0x06
     5cc:	2d 83       	std	Y+5, r18	; 0x05
     5ce:	8d 81       	ldd	r24, Y+5	; 0x05
     5d0:	9e 81       	ldd	r25, Y+6	; 0x06
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	91 05       	cpc	r25, r1
     5d6:	a9 f0       	breq	.+42     	; 0x602 <hal_update_cmp_timer+0x62>
     5d8:	2d 81       	ldd	r18, Y+5	; 0x05
     5da:	3e 81       	ldd	r19, Y+6	; 0x06
     5dc:	22 30       	cpi	r18, 0x02	; 2
     5de:	31 05       	cpc	r19, r1
     5e0:	49 f0       	breq	.+18     	; 0x5f4 <hal_update_cmp_timer+0x54>
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	9e 81       	ldd	r25, Y+6	; 0x06
     5e6:	00 97       	sbiw	r24, 0x00	; 0
     5e8:	61 f4       	brne	.+24     	; 0x602 <hal_update_cmp_timer+0x62>
		case TIMER_0:
			OCR0 = value;
     5ea:	ec e5       	ldi	r30, 0x5C	; 92
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	8c 81       	ldd	r24, Y+4	; 0x04
     5f0:	80 83       	st	Z, r24
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <hal_update_cmp_timer+0x62>
			break;
		case TIMER_1:

			break;
		case TIMER_2:
			OCR2 = value;
     5f4:	e3 e4       	ldi	r30, 0x43	; 67
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	8c 81       	ldd	r24, Y+4	; 0x04
     5fa:	80 83       	st	Z, r24
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <hal_update_cmp_timer+0x62>
		}
//		} else {
//			ret_val = INVALID_ARG;
//		}
	} else {
		ret_val = INVALID_ARG;
     5fe:	8d ec       	ldi	r24, 0xCD	; 205
     600:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_val;
     602:	89 81       	ldd	r24, Y+1	; 0x01
}
     604:	26 96       	adiw	r28, 0x06	; 6
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <hal_deinit_timer>:

s8 hal_deinit_timer(gcfg_hal_timer_t * obj) {
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	00 d0       	rcall	.+0      	; 0x61c <hal_deinit_timer+0x6>
     61c:	00 d0       	rcall	.+0      	; 0x61e <hal_deinit_timer+0x8>
     61e:	0f 92       	push	r0
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	9b 83       	std	Y+3, r25	; 0x03
     626:	8a 83       	std	Y+2, r24	; 0x02
	s8 ret_val = E_OK;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	89 83       	std	Y+1, r24	; 0x01
	if (obj != NULL) {
     62c:	8a 81       	ldd	r24, Y+2	; 0x02
     62e:	9b 81       	ldd	r25, Y+3	; 0x03
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	09 f4       	brne	.+2      	; 0x636 <hal_deinit_timer+0x20>
     634:	83 c0       	rjmp	.+262    	; 0x73c <hal_deinit_timer+0x126>
//		if (obj->freq && obj->ins_timer && obj->timer_fun) {
		switch (obj->ins_timer) {
     636:	ea 81       	ldd	r30, Y+2	; 0x02
     638:	fb 81       	ldd	r31, Y+3	; 0x03
     63a:	80 81       	ld	r24, Z
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	3d 83       	std	Y+5, r19	; 0x05
     642:	2c 83       	std	Y+4, r18	; 0x04
     644:	8c 81       	ldd	r24, Y+4	; 0x04
     646:	9d 81       	ldd	r25, Y+5	; 0x05
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	91 05       	cpc	r25, r1
     64c:	09 f4       	brne	.+2      	; 0x650 <hal_deinit_timer+0x3a>
     64e:	6d c0       	rjmp	.+218    	; 0x72a <hal_deinit_timer+0x114>
     650:	2c 81       	ldd	r18, Y+4	; 0x04
     652:	3d 81       	ldd	r19, Y+5	; 0x05
     654:	22 30       	cpi	r18, 0x02	; 2
     656:	31 05       	cpc	r19, r1
     658:	a1 f1       	breq	.+104    	; 0x6c2 <hal_deinit_timer+0xac>
     65a:	8c 81       	ldd	r24, Y+4	; 0x04
     65c:	9d 81       	ldd	r25, Y+5	; 0x05
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	09 f0       	breq	.+2      	; 0x664 <hal_deinit_timer+0x4e>
     662:	63 c0       	rjmp	.+198    	; 0x72a <hal_deinit_timer+0x114>
		case TIMER_0:
			TCCR0 = 0;
     664:	e3 e5       	ldi	r30, 0x53	; 83
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	10 82       	st	Z, r1
			TIMSK &= ~(1 << (obj->interrupt));
     66a:	a9 e5       	ldi	r26, 0x59	; 89
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	e9 e5       	ldi	r30, 0x59	; 89
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	48 2f       	mov	r20, r24
     676:	ea 81       	ldd	r30, Y+2	; 0x02
     678:	fb 81       	ldd	r31, Y+3	; 0x03
     67a:	84 81       	ldd	r24, Z+4	; 0x04
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	02 c0       	rjmp	.+4      	; 0x68a <hal_deinit_timer+0x74>
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	2a 95       	dec	r18
     68c:	e2 f7       	brpl	.-8      	; 0x686 <hal_deinit_timer+0x70>
     68e:	80 95       	com	r24
     690:	84 23       	and	r24, r20
     692:	8c 93       	st	X, r24
			TIFR &= ~(1 << (obj->interrupt));
     694:	a8 e5       	ldi	r26, 0x58	; 88
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	e8 e5       	ldi	r30, 0x58	; 88
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	48 2f       	mov	r20, r24
     6a0:	ea 81       	ldd	r30, Y+2	; 0x02
     6a2:	fb 81       	ldd	r31, Y+3	; 0x03
     6a4:	84 81       	ldd	r24, Z+4	; 0x04
     6a6:	28 2f       	mov	r18, r24
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	02 2e       	mov	r0, r18
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <hal_deinit_timer+0xa0>
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	0a 94       	dec	r0
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <hal_deinit_timer+0x9c>
     6ba:	80 95       	com	r24
     6bc:	84 23       	and	r24, r20
     6be:	8c 93       	st	X, r24
     6c0:	34 c0       	rjmp	.+104    	; 0x72a <hal_deinit_timer+0x114>
			break;
		case TIMER_1:

			break;
		case TIMER_2:
			TCCR2 = 0;
     6c2:	e5 e4       	ldi	r30, 0x45	; 69
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	10 82       	st	Z, r1
			TIMSK &= ~(1 << (obj->interrupt + 6));
     6c8:	a9 e5       	ldi	r26, 0x59	; 89
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e9 e5       	ldi	r30, 0x59	; 89
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	48 2f       	mov	r20, r24
     6d4:	ea 81       	ldd	r30, Y+2	; 0x02
     6d6:	fb 81       	ldd	r31, Y+3	; 0x03
     6d8:	84 81       	ldd	r24, Z+4	; 0x04
     6da:	88 2f       	mov	r24, r24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	9c 01       	movw	r18, r24
     6e0:	2a 5f       	subi	r18, 0xFA	; 250
     6e2:	3f 4f       	sbci	r19, 0xFF	; 255
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <hal_deinit_timer+0xd8>
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	2a 95       	dec	r18
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <hal_deinit_timer+0xd4>
     6f2:	80 95       	com	r24
     6f4:	84 23       	and	r24, r20
     6f6:	8c 93       	st	X, r24
			TIFR &= ~(1 << (obj->interrupt + 6));
     6f8:	a8 e5       	ldi	r26, 0x58	; 88
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	e8 e5       	ldi	r30, 0x58	; 88
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	48 2f       	mov	r20, r24
     704:	ea 81       	ldd	r30, Y+2	; 0x02
     706:	fb 81       	ldd	r31, Y+3	; 0x03
     708:	84 81       	ldd	r24, Z+4	; 0x04
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9c 01       	movw	r18, r24
     710:	2a 5f       	subi	r18, 0xFA	; 250
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	02 2e       	mov	r0, r18
     71a:	02 c0       	rjmp	.+4      	; 0x720 <hal_deinit_timer+0x10a>
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	0a 94       	dec	r0
     722:	e2 f7       	brpl	.-8      	; 0x71c <hal_deinit_timer+0x106>
     724:	80 95       	com	r24
     726:	84 23       	and	r24, r20
     728:	8c 93       	st	X, r24
			break;
		}
		t0_isr = 0;
     72a:	10 92 8c 00 	sts	0x008C, r1
     72e:	10 92 8b 00 	sts	0x008B, r1
		t2_isr = 0;
     732:	10 92 8e 00 	sts	0x008E, r1
     736:	10 92 8d 00 	sts	0x008D, r1
     73a:	02 c0       	rjmp	.+4      	; 0x740 <hal_deinit_timer+0x12a>
//		} else {
//			ret_val = INVALID_ARG;
//		}
	} else {
		ret_val = INVALID_ARG;
     73c:	8d ec       	ldi	r24, 0xCD	; 205
     73e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_val;
     740:	89 81       	ldd	r24, Y+1	; 0x01
}
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	cf 91       	pop	r28
     74e:	df 91       	pop	r29
     750:	08 95       	ret

00000752 <TMU_ISR>:
static Timer_OBJ * Timer_Objects[Max_TIMERS_NO];
static u32 timerResolution;
static u8 timerCount;
static gcfg_hal_timer_t timerObj;

void TMU_ISR() {
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	00 d0       	rcall	.+0      	; 0x758 <TMU_ISR+0x6>
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < Max_TIMERS_NO; i++) {
     75c:	1a 82       	std	Y+2, r1	; 0x02
     75e:	19 82       	std	Y+1, r1	; 0x01
     760:	1f c0       	rjmp	.+62     	; 0x7a0 <TMU_ISR+0x4e>
		if (Timer_Objects[i]) {
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	fc 01       	movw	r30, r24
     76c:	e2 59       	subi	r30, 0x92	; 146
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	79 f0       	breq	.+30     	; 0x796 <TMU_ISR+0x44>
			Timer_Objects[i]->remTime--;
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	fc 01       	movw	r30, r24
     782:	e2 59       	subi	r30, 0x92	; 146
     784:	ff 4f       	sbci	r31, 0xFF	; 255
     786:	01 90       	ld	r0, Z+
     788:	f0 81       	ld	r31, Z
     78a:	e0 2d       	mov	r30, r0
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	93 81       	ldd	r25, Z+3	; 0x03
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	93 83       	std	Z+3, r25	; 0x03
     794:	82 83       	std	Z+2, r24	; 0x02
static u32 timerResolution;
static u8 timerCount;
static gcfg_hal_timer_t timerObj;

void TMU_ISR() {
	for (int i = 0; i < Max_TIMERS_NO; i++) {
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	9a 81       	ldd	r25, Y+2	; 0x02
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	83 30       	cpi	r24, 0x03	; 3
     7a6:	91 05       	cpc	r25, r1
     7a8:	e4 f2       	brlt	.-72     	; 0x762 <TMU_ISR+0x10>
		}

	}

//	TIFR |= 1 << 1;
	hal_update_timer(&timerObj, 0);
     7aa:	89 e7       	ldi	r24, 0x79	; 121
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	0e 94 df 01 	call	0x3be	; 0x3be <hal_update_timer>
	hal_update_cmp_timer(&timerObj, 78);
     7b4:	89 e7       	ldi	r24, 0x79	; 121
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	6e e4       	ldi	r22, 0x4E	; 78
     7ba:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <hal_update_cmp_timer>
	sei();
     7be:	78 94       	sei
}
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	cf 91       	pop	r28
     7c6:	df 91       	pop	r29
     7c8:	08 95       	ret

000007ca <TMU_init>:

TMU_Erors TMU_init(u8 hardwareTimerNo, u16 resolution, u8*ID) {
     7ca:	df 93       	push	r29
     7cc:	cf 93       	push	r28
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <TMU_init+0x6>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <TMU_init+0x8>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <TMU_init+0xa>
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	8a 83       	std	Y+2, r24	; 0x02
     7da:	7c 83       	std	Y+4, r23	; 0x04
     7dc:	6b 83       	std	Y+3, r22	; 0x03
     7de:	5e 83       	std	Y+6, r21	; 0x06
     7e0:	4d 83       	std	Y+5, r20	; 0x05
	TMU_Erors ret_error = ALL_IS_WELL;
     7e2:	19 82       	std	Y+1, r1	; 0x01
	timerResolution = resolution;
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	9c 81       	ldd	r25, Y+4	; 0x04
     7e8:	cc 01       	movw	r24, r24
     7ea:	a0 e0       	ldi	r26, 0x00	; 0
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	80 93 74 00 	sts	0x0074, r24
     7f2:	90 93 75 00 	sts	0x0075, r25
     7f6:	a0 93 76 00 	sts	0x0076, r26
     7fa:	b0 93 77 00 	sts	0x0077, r27

	timerObj.com = NORMAL_COM;
     7fe:	10 92 7c 00 	sts	0x007C, r1
	timerObj.freq = PRESCALER_64;
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	80 93 7a 00 	sts	0x007A, r24
	timerObj.func = TMU_ISR;
     808:	89 ea       	ldi	r24, 0xA9	; 169
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	90 93 7f 00 	sts	0x007F, r25
     810:	80 93 7e 00 	sts	0x007E, r24
	timerObj.ins_timer = TIMER_0;
     814:	10 92 79 00 	sts	0x0079, r1
	timerObj.interrupt = ON_COMPARE;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 7d 00 	sts	0x007D, r24
	timerObj.timer_fun = NORMAL_MODE;
     81e:	10 92 7b 00 	sts	0x007B, r1

	hal_init_timer(&timerObj);
     822:	89 e7       	ldi	r24, 0x79	; 121
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 6d 00 	call	0xda	; 0xda <hal_init_timer>
	hal_update_timer(&timerObj, 0);
     82a:	89 e7       	ldi	r24, 0x79	; 121
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	0e 94 df 01 	call	0x3be	; 0x3be <hal_update_timer>
	hal_update_cmp_timer(&timerObj, 78);
     834:	89 e7       	ldi	r24, 0x79	; 121
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	6e e4       	ldi	r22, 0x4E	; 78
     83a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <hal_update_cmp_timer>
//	TCNT0 = 0;
//	OCR0 = 78;
//	TIMSK = 1 << 1;
//	TIFR |= 1<<1;

	sei();
     83e:	78 94       	sei
	return ret_error;
     840:	89 81       	ldd	r24, Y+1	; 0x01
}
     842:	26 96       	adiw	r28, 0x06	; 6
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	08 95       	ret

00000854 <TMU_addTimer>:

TMU_Erors TMU_addTimer(Timer_OBJ *timerObj, u16 timePeriod,
		TIMER_TYPE TimerType, void (*cb)(void * pv)) {
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	2a 97       	sbiw	r28, 0x0a	; 10
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	9d 83       	std	Y+5, r25	; 0x05
     86a:	8c 83       	std	Y+4, r24	; 0x04
     86c:	7f 83       	std	Y+7, r23	; 0x07
     86e:	6e 83       	std	Y+6, r22	; 0x06
     870:	48 87       	std	Y+8, r20	; 0x08
     872:	3a 87       	std	Y+10, r19	; 0x0a
     874:	29 87       	std	Y+9, r18	; 0x09
	cli();
     876:	f8 94       	cli
	TMU_Erors ret_error = ALL_IS_WELL;
     878:	1b 82       	std	Y+3, r1	; 0x03

	if (timerCount < Max_TIMERS_NO) {
     87a:	80 91 78 00 	lds	r24, 0x0078
     87e:	83 30       	cpi	r24, 0x03	; 3
     880:	08 f0       	brcs	.+2      	; 0x884 <__stack+0x25>
     882:	53 c0       	rjmp	.+166    	; 0x92a <__stack+0xcb>
		timerObj->TimerType = TimerType;
     884:	ec 81       	ldd	r30, Y+4	; 0x04
     886:	fd 81       	ldd	r31, Y+5	; 0x05
     888:	88 85       	ldd	r24, Y+8	; 0x08
     88a:	84 83       	std	Z+4, r24	; 0x04
		timerObj->cb = cb;
     88c:	ec 81       	ldd	r30, Y+4	; 0x04
     88e:	fd 81       	ldd	r31, Y+5	; 0x05
     890:	89 85       	ldd	r24, Y+9	; 0x09
     892:	9a 85       	ldd	r25, Y+10	; 0x0a
     894:	96 83       	std	Z+6, r25	; 0x06
     896:	85 83       	std	Z+5, r24	; 0x05
		timerObj->Period = timePeriod / timerResolution;
     898:	8e 81       	ldd	r24, Y+6	; 0x06
     89a:	9f 81       	ldd	r25, Y+7	; 0x07
     89c:	cc 01       	movw	r24, r24
     89e:	a0 e0       	ldi	r26, 0x00	; 0
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	20 91 74 00 	lds	r18, 0x0074
     8a6:	30 91 75 00 	lds	r19, 0x0075
     8aa:	40 91 76 00 	lds	r20, 0x0076
     8ae:	50 91 77 00 	lds	r21, 0x0077
     8b2:	bc 01       	movw	r22, r24
     8b4:	cd 01       	movw	r24, r26
     8b6:	0e 94 08 09 	call	0x1210	; 0x1210 <__udivmodsi4>
     8ba:	da 01       	movw	r26, r20
     8bc:	c9 01       	movw	r24, r18
     8be:	ec 81       	ldd	r30, Y+4	; 0x04
     8c0:	fd 81       	ldd	r31, Y+5	; 0x05
     8c2:	91 83       	std	Z+1, r25	; 0x01
     8c4:	80 83       	st	Z, r24
		timerObj->remTime = timerObj->Period;
     8c6:	ec 81       	ldd	r30, Y+4	; 0x04
     8c8:	fd 81       	ldd	r31, Y+5	; 0x05
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	ec 81       	ldd	r30, Y+4	; 0x04
     8d0:	fd 81       	ldd	r31, Y+5	; 0x05
     8d2:	93 83       	std	Z+3, r25	; 0x03
     8d4:	82 83       	std	Z+2, r24	; 0x02
		timerCount++;
     8d6:	80 91 78 00 	lds	r24, 0x0078
     8da:	8f 5f       	subi	r24, 0xFF	; 255
     8dc:	80 93 78 00 	sts	0x0078, r24

		for (int i = 0; i < Max_TIMERS_NO; i++) {
     8e0:	1a 82       	std	Y+2, r1	; 0x02
     8e2:	19 82       	std	Y+1, r1	; 0x01
     8e4:	1c c0       	rjmp	.+56     	; 0x91e <__stack+0xbf>
			if (!Timer_Objects[i]) {
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	fc 01       	movw	r30, r24
     8f0:	e2 59       	subi	r30, 0x92	; 146
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	61 f4       	brne	.+24     	; 0x914 <__stack+0xb5>
				Timer_Objects[i] = timerObj;
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	fc 01       	movw	r30, r24
     906:	e2 59       	subi	r30, 0x92	; 146
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	8c 81       	ldd	r24, Y+4	; 0x04
     90c:	9d 81       	ldd	r25, Y+5	; 0x05
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24
     912:	0d c0       	rjmp	.+26     	; 0x92e <__stack+0xcf>
		timerObj->cb = cb;
		timerObj->Period = timePeriod / timerResolution;
		timerObj->remTime = timerObj->Period;
		timerCount++;

		for (int i = 0; i < Max_TIMERS_NO; i++) {
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	9a 81       	ldd	r25, Y+2	; 0x02
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	9a 83       	std	Y+2, r25	; 0x02
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	9a 81       	ldd	r25, Y+2	; 0x02
     922:	83 30       	cpi	r24, 0x03	; 3
     924:	91 05       	cpc	r25, r1
     926:	fc f2       	brlt	.-66     	; 0x8e6 <__stack+0x87>
     928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0xcf>
				break;
			}
		}
	} else {
		//error
		ret_error = MAX_TIMERS_REACHED;
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	8b 83       	std	Y+3, r24	; 0x03
	}
	sei();
     92e:	78 94       	sei
	return ret_error;
     930:	8b 81       	ldd	r24, Y+3	; 0x03

}
     932:	2a 96       	adiw	r28, 0x0a	; 10
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <TMU_removeTimer>:
TMU_Erors TMU_removeTimer(Timer_OBJ* timerObj) {
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	27 97       	sbiw	r28, 0x07	; 7
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
     958:	9f 83       	std	Y+7, r25	; 0x07
     95a:	8e 83       	std	Y+6, r24	; 0x06
	TMU_Erors ret_error = ALL_IS_WELL;
     95c:	1d 82       	std	Y+5, r1	; 0x05
	cli();
     95e:	f8 94       	cli
	int found = 0;
     960:	1c 82       	std	Y+4, r1	; 0x04
     962:	1b 82       	std	Y+3, r1	; 0x03
	timerCount--;
     964:	80 91 78 00 	lds	r24, 0x0078
     968:	81 50       	subi	r24, 0x01	; 1
     96a:	80 93 78 00 	sts	0x0078, r24
	for (int i = 0; i < Max_TIMERS_NO; i++) {
     96e:	1a 82       	std	Y+2, r1	; 0x02
     970:	19 82       	std	Y+1, r1	; 0x01
     972:	21 c0       	rjmp	.+66     	; 0x9b6 <TMU_removeTimer+0x72>
		if (Timer_Objects[i] == timerObj) {
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	fc 01       	movw	r30, r24
     97e:	e2 59       	subi	r30, 0x92	; 146
     980:	ff 4f       	sbci	r31, 0xFF	; 255
     982:	20 81       	ld	r18, Z
     984:	31 81       	ldd	r19, Z+1	; 0x01
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	9f 81       	ldd	r25, Y+7	; 0x07
     98a:	28 17       	cp	r18, r24
     98c:	39 07       	cpc	r19, r25
     98e:	71 f4       	brne	.+28     	; 0x9ac <TMU_removeTimer+0x68>
			Timer_Objects[i] = 0;
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	fc 01       	movw	r30, r24
     99a:	e2 59       	subi	r30, 0x92	; 146
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	11 82       	std	Z+1, r1	; 0x01
     9a0:	10 82       	st	Z, r1
			found = 1;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	8b 83       	std	Y+3, r24	; 0x03
     9aa:	0a c0       	rjmp	.+20     	; 0x9c0 <TMU_removeTimer+0x7c>
TMU_Erors TMU_removeTimer(Timer_OBJ* timerObj) {
	TMU_Erors ret_error = ALL_IS_WELL;
	cli();
	int found = 0;
	timerCount--;
	for (int i = 0; i < Max_TIMERS_NO; i++) {
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ba:	83 30       	cpi	r24, 0x03	; 3
     9bc:	91 05       	cpc	r25, r1
     9be:	d4 f2       	brlt	.-76     	; 0x974 <TMU_removeTimer+0x30>
			Timer_Objects[i] = 0;
			found = 1;
			break;
		}
	}
	sei();
     9c0:	78 94       	sei
	if (!found)
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	9c 81       	ldd	r25, Y+4	; 0x04
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	11 f4       	brne	.+4      	; 0x9ce <TMU_removeTimer+0x8a>
		ret_error = Object_NOT_FOUND;
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	8d 83       	std	Y+5, r24	; 0x05

	return ret_error;
     9ce:	8d 81       	ldd	r24, Y+5	; 0x05

}
     9d0:	27 96       	adiw	r28, 0x07	; 7
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	cf 91       	pop	r28
     9de:	df 91       	pop	r29
     9e0:	08 95       	ret

000009e2 <TMU_Dispatch>:
TMU_Erors TMU_Dispatch() {
     9e2:	df 93       	push	r29
     9e4:	cf 93       	push	r28
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <TMU_Dispatch+0x6>
     9e8:	0f 92       	push	r0
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
	TMU_Erors ret_error = ALL_IS_WELL;
     9ee:	1b 82       	std	Y+3, r1	; 0x03
	cli();
     9f0:	f8 94       	cli
	for (int i = 0; i < Max_TIMERS_NO; i++) {
     9f2:	1a 82       	std	Y+2, r1	; 0x02
     9f4:	19 82       	std	Y+1, r1	; 0x01
     9f6:	81 c0       	rjmp	.+258    	; 0xafa <TMU_Dispatch+0x118>
		if (Timer_Objects[i])
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	fc 01       	movw	r30, r24
     a02:	e2 59       	subi	r30, 0x92	; 146
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	09 f4       	brne	.+2      	; 0xa10 <TMU_Dispatch+0x2e>
     a0e:	70 c0       	rjmp	.+224    	; 0xaf0 <TMU_Dispatch+0x10e>
			if ((Timer_Objects[i]->remTime) <= 0) {
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	fc 01       	movw	r30, r24
     a1a:	e2 59       	subi	r30, 0x92	; 146
     a1c:	ff 4f       	sbci	r31, 0xFF	; 255
     a1e:	01 90       	ld	r0, Z+
     a20:	f0 81       	ld	r31, Z
     a22:	e0 2d       	mov	r30, r0
     a24:	82 81       	ldd	r24, Z+2	; 0x02
     a26:	93 81       	ldd	r25, Z+3	; 0x03
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	0c f4       	brge	.+2      	; 0xa30 <TMU_Dispatch+0x4e>
     a2e:	60 c0       	rjmp	.+192    	; 0xaf0 <TMU_Dispatch+0x10e>
				Timer_Objects[i]->cb(0);
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	fc 01       	movw	r30, r24
     a3a:	e2 59       	subi	r30, 0x92	; 146
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	01 90       	ld	r0, Z+
     a40:	f0 81       	ld	r31, Z
     a42:	e0 2d       	mov	r30, r0
     a44:	05 80       	ldd	r0, Z+5	; 0x05
     a46:	f6 81       	ldd	r31, Z+6	; 0x06
     a48:	e0 2d       	mov	r30, r0
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	09 95       	icall
				if (Timer_Objects[i]->TimerType == ONE_SHOT) {
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	fc 01       	movw	r30, r24
     a5a:	e2 59       	subi	r30, 0x92	; 146
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	01 90       	ld	r0, Z+
     a60:	f0 81       	ld	r31, Z
     a62:	e0 2d       	mov	r30, r0
     a64:	84 81       	ldd	r24, Z+4	; 0x04
     a66:	88 23       	and	r24, r24
     a68:	d9 f4       	brne	.+54     	; 0xaa0 <TMU_Dispatch+0xbe>
					timerCount--;
     a6a:	80 91 78 00 	lds	r24, 0x0078
     a6e:	81 50       	subi	r24, 0x01	; 1
     a70:	80 93 78 00 	sts	0x0078, r24
					Timer_Objects[i]->cb = 0;
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	9a 81       	ldd	r25, Y+2	; 0x02
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	fc 01       	movw	r30, r24
     a7e:	e2 59       	subi	r30, 0x92	; 146
     a80:	ff 4f       	sbci	r31, 0xFF	; 255
     a82:	01 90       	ld	r0, Z+
     a84:	f0 81       	ld	r31, Z
     a86:	e0 2d       	mov	r30, r0
     a88:	16 82       	std	Z+6, r1	; 0x06
     a8a:	15 82       	std	Z+5, r1	; 0x05
					Timer_Objects[i] = 0;
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	9a 81       	ldd	r25, Y+2	; 0x02
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	fc 01       	movw	r30, r24
     a96:	e2 59       	subi	r30, 0x92	; 146
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	11 82       	std	Z+1, r1	; 0x01
     a9c:	10 82       	st	Z, r1
     a9e:	28 c0       	rjmp	.+80     	; 0xaf0 <TMU_Dispatch+0x10e>
				} else {
					Timer_Objects[i]->remTime += Timer_Objects[i]->Period;
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	fc 01       	movw	r30, r24
     aaa:	e2 59       	subi	r30, 0x92	; 146
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	a0 81       	ld	r26, Z
     ab0:	b1 81       	ldd	r27, Z+1	; 0x01
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	fc 01       	movw	r30, r24
     abc:	e2 59       	subi	r30, 0x92	; 146
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	01 90       	ld	r0, Z+
     ac2:	f0 81       	ld	r31, Z
     ac4:	e0 2d       	mov	r30, r0
     ac6:	82 81       	ldd	r24, Z+2	; 0x02
     ac8:	93 81       	ldd	r25, Z+3	; 0x03
     aca:	9c 01       	movw	r18, r24
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	fc 01       	movw	r30, r24
     ad6:	e2 59       	subi	r30, 0x92	; 146
     ad8:	ff 4f       	sbci	r31, 0xFF	; 255
     ada:	01 90       	ld	r0, Z+
     adc:	f0 81       	ld	r31, Z
     ade:	e0 2d       	mov	r30, r0
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	82 0f       	add	r24, r18
     ae6:	93 1f       	adc	r25, r19
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	9c 93       	st	X, r25
     aec:	8e 93       	st	-X, r24
     aee:	12 97       	sbiw	r26, 0x02	; 2

}
TMU_Erors TMU_Dispatch() {
	TMU_Erors ret_error = ALL_IS_WELL;
	cli();
	for (int i = 0; i < Max_TIMERS_NO; i++) {
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	9a 83       	std	Y+2, r25	; 0x02
     af8:	89 83       	std	Y+1, r24	; 0x01
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	83 30       	cpi	r24, 0x03	; 3
     b00:	91 05       	cpc	r25, r1
     b02:	0c f4       	brge	.+2      	; 0xb06 <TMU_Dispatch+0x124>
     b04:	79 cf       	rjmp	.-270    	; 0x9f8 <TMU_Dispatch+0x16>
				} else {
					Timer_Objects[i]->remTime += Timer_Objects[i]->Period;
				}
			}
	}
	sei();
     b06:	78 94       	sei
	return ret_error;
     b08:	8b 81       	ldd	r24, Y+3	; 0x03

}
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	cf 91       	pop	r28
     b12:	df 91       	pop	r29
     b14:	08 95       	ret

00000b16 <TMU_deinit>:
TMU_Erors TMU_deinit() {
     b16:	df 93       	push	r29
     b18:	cf 93       	push	r28
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <TMU_deinit+0x6>
     b1c:	0f 92       	push	r0
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
	TMU_Erors ret_error = ALL_IS_WELL;
     b22:	1b 82       	std	Y+3, r1	; 0x03
	cli();
     b24:	f8 94       	cli
	hal_init_timer(&timerObj);
     b26:	89 e7       	ldi	r24, 0x79	; 121
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 6d 00 	call	0xda	; 0xda <hal_init_timer>
//	TCCR0 = 0b00000000;
	for (int i = 0; i < Max_TIMERS_NO; i++) {
     b2e:	1a 82       	std	Y+2, r1	; 0x02
     b30:	19 82       	std	Y+1, r1	; 0x01
     b32:	0e c0       	rjmp	.+28     	; 0xb50 <TMU_deinit+0x3a>
		Timer_Objects[i] = 0;
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	fc 01       	movw	r30, r24
     b3e:	e2 59       	subi	r30, 0x92	; 146
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	11 82       	std	Z+1, r1	; 0x01
     b44:	10 82       	st	Z, r1
TMU_Erors TMU_deinit() {
	TMU_Erors ret_error = ALL_IS_WELL;
	cli();
	hal_init_timer(&timerObj);
//	TCCR0 = 0b00000000;
	for (int i = 0; i < Max_TIMERS_NO; i++) {
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	89 83       	std	Y+1, r24	; 0x01
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	83 30       	cpi	r24, 0x03	; 3
     b56:	91 05       	cpc	r25, r1
     b58:	6c f3       	brlt	.-38     	; 0xb34 <TMU_deinit+0x1e>
		Timer_Objects[i] = 0;
	}
	sei();
     b5a:	78 94       	sei
	return ret_error;
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03

}
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <function1>:
#include "seven_seg.h"

int currSec=1,currMin=10;
u8 secID1,secID10,minID1,minID10;

void function1(void * pv){
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <function1+0x6>
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
	seven_seg_display(secID1,currSec%10);
     b78:	40 91 90 00 	lds	r20, 0x0090
     b7c:	80 91 60 00 	lds	r24, 0x0060
     b80:	90 91 61 00 	lds	r25, 0x0061
     b84:	2a e0       	ldi	r18, 0x0A	; 10
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	b9 01       	movw	r22, r18
     b8a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__divmodhi4>
     b8e:	98 2f       	mov	r25, r24
     b90:	84 2f       	mov	r24, r20
     b92:	69 2f       	mov	r22, r25
     b94:	0e 94 f0 06 	call	0xde0	; 0xde0 <seven_seg_display>
	if(currSec>=59)currMin++,currSec=0;
     b98:	80 91 60 00 	lds	r24, 0x0060
     b9c:	90 91 61 00 	lds	r25, 0x0061
     ba0:	8b 33       	cpi	r24, 0x3B	; 59
     ba2:	91 05       	cpc	r25, r1
     ba4:	6c f0       	brlt	.+26     	; 0xbc0 <function1+0x56>
     ba6:	80 91 62 00 	lds	r24, 0x0062
     baa:	90 91 63 00 	lds	r25, 0x0063
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	90 93 63 00 	sts	0x0063, r25
     bb4:	80 93 62 00 	sts	0x0062, r24
     bb8:	10 92 61 00 	sts	0x0061, r1
     bbc:	10 92 60 00 	sts	0x0060, r1
	
	currSec++;
     bc0:	80 91 60 00 	lds	r24, 0x0060
     bc4:	90 91 61 00 	lds	r25, 0x0061
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	90 93 61 00 	sts	0x0061, r25
     bce:	80 93 60 00 	sts	0x0060, r24
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <function2>:
void function2(void * pv){
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <function2+0x6>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	9a 83       	std	Y+2, r25	; 0x02
     be8:	89 83       	std	Y+1, r24	; 0x01
	
	seven_seg_display(secID10,currSec/10);
     bea:	40 91 91 00 	lds	r20, 0x0091
     bee:	80 91 60 00 	lds	r24, 0x0060
     bf2:	90 91 61 00 	lds	r25, 0x0061
     bf6:	2a e0       	ldi	r18, 0x0A	; 10
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	b9 01       	movw	r22, r18
     bfc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__divmodhi4>
     c00:	cb 01       	movw	r24, r22
     c02:	98 2f       	mov	r25, r24
     c04:	84 2f       	mov	r24, r20
     c06:	69 2f       	mov	r22, r25
     c08:	0e 94 f0 06 	call	0xde0	; 0xde0 <seven_seg_display>
	
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <function3>:
void function3(void * pv){
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <function3+0x6>
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
	seven_seg_display(minID1,currMin%10);
     c24:	40 91 92 00 	lds	r20, 0x0092
     c28:	80 91 62 00 	lds	r24, 0x0062
     c2c:	90 91 63 00 	lds	r25, 0x0063
     c30:	2a e0       	ldi	r18, 0x0A	; 10
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	b9 01       	movw	r22, r18
     c36:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__divmodhi4>
     c3a:	98 2f       	mov	r25, r24
     c3c:	84 2f       	mov	r24, r20
     c3e:	69 2f       	mov	r22, r25
     c40:	0e 94 f0 06 	call	0xde0	; 0xde0 <seven_seg_display>
	seven_seg_display(minID10,currMin++/10);
     c44:	40 91 8f 00 	lds	r20, 0x008F
     c48:	e0 91 62 00 	lds	r30, 0x0062
     c4c:	f0 91 63 00 	lds	r31, 0x0063
     c50:	2a e0       	ldi	r18, 0x0A	; 10
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	cf 01       	movw	r24, r30
     c56:	b9 01       	movw	r22, r18
     c58:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__divmodhi4>
     c5c:	cb 01       	movw	r24, r22
     c5e:	28 2f       	mov	r18, r24
     c60:	cf 01       	movw	r24, r30
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	90 93 63 00 	sts	0x0063, r25
     c68:	80 93 62 00 	sts	0x0062, r24
     c6c:	84 2f       	mov	r24, r20
     c6e:	62 2f       	mov	r22, r18
     c70:	0e 94 f0 06 	call	0xde0	; 0xde0 <seven_seg_display>
	
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <main>:

int main(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	65 97       	sbiw	r28, 0x15	; 21
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
	
	Timer_OBJ obj1,obj2,obj3;
	TMU_init(0,5,0);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	65 e0       	ldi	r22, 0x05	; 5
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <TMU_init>
	seven_seg_init(BASE_C,COMMON_CATHOD,&secID1);
     ca0:	20 e9       	ldi	r18, 0x90	; 144
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	83 e3       	ldi	r24, 0x33	; 51
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	a9 01       	movw	r20, r18
     caa:	0e 94 8a 06 	call	0xd14	; 0xd14 <seven_seg_init>
	seven_seg_init(BASE_D,COMMON_CATHOD,&secID10);
     cae:	21 e9       	ldi	r18, 0x91	; 145
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	80 e3       	ldi	r24, 0x30	; 48
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	a9 01       	movw	r20, r18
     cb8:	0e 94 8a 06 	call	0xd14	; 0xd14 <seven_seg_init>
	
	seven_seg_init(BASE_A,COMMON_CATHOD,&minID1);
     cbc:	22 e9       	ldi	r18, 0x92	; 146
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	89 e3       	ldi	r24, 0x39	; 57
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	a9 01       	movw	r20, r18
     cc6:	0e 94 8a 06 	call	0xd14	; 0xd14 <seven_seg_init>
	seven_seg_init(BASE_B,COMMON_CATHOD,&minID10);
     cca:	2f e8       	ldi	r18, 0x8F	; 143
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	86 e3       	ldi	r24, 0x36	; 54
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	a9 01       	movw	r20, r18
     cd4:	0e 94 8a 06 	call	0xd14	; 0xd14 <seven_seg_init>
	
	TMU_addTimer(&obj1,500,PERIODIC,function1);
     cd8:	25 eb       	ldi	r18, 0xB5	; 181
     cda:	35 e0       	ldi	r19, 0x05	; 5
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	64 ef       	ldi	r22, 0xF4	; 244
     ce2:	71 e0       	ldi	r23, 0x01	; 1
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 2a 04 	call	0x854	; 0x854 <TMU_addTimer>
	TMU_addTimer(&obj2,5000,PERIODIC,function2);
     cea:	ce 01       	movw	r24, r28
     cec:	08 96       	adiw	r24, 0x08	; 8
     cee:	2e ee       	ldi	r18, 0xEE	; 238
     cf0:	35 e0       	ldi	r19, 0x05	; 5
     cf2:	68 e8       	ldi	r22, 0x88	; 136
     cf4:	73 e1       	ldi	r23, 0x13	; 19
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	0e 94 2a 04 	call	0x854	; 0x854 <TMU_addTimer>
	TMU_addTimer(&obj3,10000,PERIODIC,function3);
     cfc:	ce 01       	movw	r24, r28
     cfe:	0f 96       	adiw	r24, 0x0f	; 15
     d00:	2b e0       	ldi	r18, 0x0B	; 11
     d02:	36 e0       	ldi	r19, 0x06	; 6
     d04:	60 e1       	ldi	r22, 0x10	; 16
     d06:	77 e2       	ldi	r23, 0x27	; 39
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	0e 94 2a 04 	call	0x854	; 0x854 <TMU_addTimer>
	
    while(1)
    {
		TMU_Dispatch();
     d0e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <TMU_Dispatch>
     d12:	fd cf       	rjmp	.-6      	; 0xd0e <main+0x90>

00000d14 <seven_seg_init>:
static const u8 pattern[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };

static u8 handler_counter = 0;

bool_t seven_seg_init(enum_port_base_t port_base,
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	00 d0       	rcall	.+0      	; 0xd1a <seven_seg_init+0x6>
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <seven_seg_init+0x8>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <seven_seg_init+0xa>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	8b 83       	std	Y+3, r24	; 0x03
     d24:	6c 83       	std	Y+4, r22	; 0x04
     d26:	5e 83       	std	Y+6, r21	; 0x06
     d28:	4d 83       	std	Y+5, r20	; 0x05
	bool_t b_ret_val = E_TRUE;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	8a 83       	std	Y+2, r24	; 0x02

	u8 idx = 0;
     d2e:	19 82       	std	Y+1, r1	; 0x01
     d30:	0e c0       	rjmp	.+28     	; 0xd4e <seven_seg_init+0x3a>
	for (; idx < MAX_NUMBER_OF_HANDLERS; idx++) {
		if (ga_seven_handlers[idx].enum_base_port == 0)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	fc 01       	movw	r30, r24
     d3e:	ef 57       	subi	r30, 0x7F	; 127
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	80 81       	ld	r24, Z
     d44:	88 23       	and	r24, r24
     d46:	31 f0       	breq	.+12     	; 0xd54 <seven_seg_init+0x40>
bool_t seven_seg_init(enum_port_base_t port_base,
		enum_seven_seg_type_t seven_seg_type, u8 * handler) {
	bool_t b_ret_val = E_TRUE;

	u8 idx = 0;
	for (; idx < MAX_NUMBER_OF_HANDLERS; idx++) {
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	78 f3       	brcs	.-34     	; 0xd32 <seven_seg_init+0x1e>
		if (ga_seven_handlers[idx].enum_base_port == 0)
			break;
	}

	if ((port_base < INVALID_MAX_INDEX) && (port_base > INVALID_MIN_INDEX)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	8a 33       	cpi	r24, 0x3A	; 58
     d58:	c0 f5       	brcc	.+112    	; 0xdca <seven_seg_init+0xb6>
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	80 33       	cpi	r24, 0x30	; 48
     d5e:	a8 f1       	brcs	.+106    	; 0xdca <seven_seg_init+0xb6>
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	89 f1       	breq	.+98     	; 0xdca <seven_seg_init+0xb6>
			&& (handler != NULL)) {
		if (handler_counter < MAX_NUMBER_OF_HANDLERS) {
     d68:	80 91 80 00 	lds	r24, 0x0080
     d6c:	84 30       	cpi	r24, 0x04	; 4
     d6e:	58 f5       	brcc	.+86     	; 0xdc6 <seven_seg_init+0xb2>
			*(volatile u8*) (port_base + 1) |= 0x7f;
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	dc 01       	movw	r26, r24
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	fc 01       	movw	r30, r24
     d84:	80 81       	ld	r24, Z
     d86:	8f 67       	ori	r24, 0x7F	; 127
     d88:	8c 93       	st	X, r24
			ga_seven_handlers[idx].enum_base_port = port_base;
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	fc 01       	movw	r30, r24
     d96:	ef 57       	subi	r30, 0x7F	; 127
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	80 83       	st	Z, r24
			ga_seven_handlers[idx].enum_type = seven_seg_type;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	fc 01       	movw	r30, r24
     daa:	ee 57       	subi	r30, 0x7E	; 126
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	80 83       	st	Z, r24
			*handler = idx;
     db2:	ed 81       	ldd	r30, Y+5	; 0x05
     db4:	fe 81       	ldd	r31, Y+6	; 0x06
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	80 83       	st	Z, r24
			handler_counter++;
     dba:	80 91 80 00 	lds	r24, 0x0080
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	80 93 80 00 	sts	0x0080, r24
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <seven_seg_init+0xb8>
		} else {
			b_ret_val = E_FALSE;
     dc6:	1a 82       	std	Y+2, r1	; 0x02
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <seven_seg_init+0xb8>
		}
	} else {
		b_ret_val = E_FALSE;
     dca:	1a 82       	std	Y+2, r1	; 0x02
	}

	return b_ret_val;
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     dce:	26 96       	adiw	r28, 0x06	; 6
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <seven_seg_display>:

bool_t seven_seg_display(u8 handler, u8 dis_no) {
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <seven_seg_display+0x6>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	6b 83       	std	Y+3, r22	; 0x03
	bool_t b_ret_val = E_TRUE;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	89 83       	std	Y+1, r24	; 0x01
	if ((handler < MAX_NUMBER_OF_HANDLERS) && (dis_no < 10)) {
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	08 f0       	brcs	.+2      	; 0xdfc <seven_seg_display+0x1c>
     dfa:	b2 c0       	rjmp	.+356    	; 0xf60 <seven_seg_display+0x180>
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	8a 30       	cpi	r24, 0x0A	; 10
     e00:	08 f0       	brcs	.+2      	; 0xe04 <seven_seg_display+0x24>
     e02:	ae c0       	rjmp	.+348    	; 0xf60 <seven_seg_display+0x180>
		if (ga_seven_handlers[handler].enum_base_port != 0) {
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	fc 01       	movw	r30, r24
     e10:	ef 57       	subi	r30, 0x7F	; 127
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	80 81       	ld	r24, Z
     e16:	88 23       	and	r24, r24
     e18:	09 f4       	brne	.+2      	; 0xe1c <seven_seg_display+0x3c>
     e1a:	a0 c0       	rjmp	.+320    	; 0xf5c <seven_seg_display+0x17c>
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	fc 01       	movw	r30, r24
     e28:	ee 57       	subi	r30, 0x7E	; 126
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	80 81       	ld	r24, Z
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	09 f0       	breq	.+2      	; 0xe34 <seven_seg_display+0x54>
     e32:	42 c0       	rjmp	.+132    	; 0xeb8 <seven_seg_display+0xd8>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	fc 01       	movw	r30, r24
     e40:	ef 57       	subi	r30, 0x7F	; 127
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 96       	adiw	r24, 0x02	; 2
     e4c:	dc 01       	movw	r26, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	fc 01       	movw	r30, r24
     e5a:	ef 57       	subi	r30, 0x7F	; 127
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	80 81       	ld	r24, Z
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 96       	adiw	r24, 0x02	; 2
     e66:	fc 01       	movw	r30, r24
     e68:	80 81       	ld	r24, Z
     e6a:	80 78       	andi	r24, 0x80	; 128
     e6c:	8c 93       	st	X, r24
				+ 2) &= ~(0x7f);
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	fc 01       	movw	r30, r24
     e7a:	ef 57       	subi	r30, 0x7F	; 127
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	80 81       	ld	r24, Z
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 96       	adiw	r24, 0x02	; 2
     e86:	dc 01       	movw	r26, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	fc 01       	movw	r30, r24
     e94:	ef 57       	subi	r30, 0x7F	; 127
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 81       	ld	r24, Z
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 96       	adiw	r24, 0x02	; 2
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 81       	ld	r18, Z
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	ec 59       	subi	r30, 0x9C	; 156
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	80 81       	ld	r24, Z
     eb2:	82 2b       	or	r24, r18
     eb4:	8c 93       	st	X, r24
     eb6:	55 c0       	rjmp	.+170    	; 0xf62 <seven_seg_display+0x182>
						+ 2) |= pattern[dis_no];
			} else if (ga_seven_handlers[handler].enum_type == COMMON_ANOD) {
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	fc 01       	movw	r30, r24
     ec4:	ee 57       	subi	r30, 0x7E	; 126
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	80 81       	ld	r24, Z
     eca:	88 23       	and	r24, r24
     ecc:	09 f0       	breq	.+2      	; 0xed0 <seven_seg_display+0xf0>
     ece:	44 c0       	rjmp	.+136    	; 0xf58 <seven_seg_display+0x178>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	fc 01       	movw	r30, r24
     edc:	ef 57       	subi	r30, 0x7F	; 127
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	80 81       	ld	r24, Z
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 96       	adiw	r24, 0x02	; 2
     ee8:	dc 01       	movw	r26, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	fc 01       	movw	r30, r24
     ef6:	ef 57       	subi	r30, 0x7F	; 127
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 81       	ld	r24, Z
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 96       	adiw	r24, 0x02	; 2
     f02:	fc 01       	movw	r30, r24
     f04:	80 81       	ld	r24, Z
     f06:	8f 67       	ori	r24, 0x7F	; 127
     f08:	8c 93       	st	X, r24
				+ 2) |= 0x7f;
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	fc 01       	movw	r30, r24
     f16:	ef 57       	subi	r30, 0x7F	; 127
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 81       	ld	r24, Z
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 96       	adiw	r24, 0x02	; 2
     f22:	dc 01       	movw	r26, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	fc 01       	movw	r30, r24
     f30:	ef 57       	subi	r30, 0x7F	; 127
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 96       	adiw	r24, 0x02	; 2
     f3c:	fc 01       	movw	r30, r24
     f3e:	80 81       	ld	r24, Z
     f40:	28 2f       	mov	r18, r24
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	fc 01       	movw	r30, r24
     f4a:	ec 59       	subi	r30, 0x9C	; 156
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 81       	ld	r24, Z
     f50:	80 95       	com	r24
     f52:	82 23       	and	r24, r18
     f54:	8c 93       	st	X, r24
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <seven_seg_display+0x182>
						+ 2) &= ~pattern[dis_no];
			} else {
				/*invalid parameter*/
				b_ret_val = E_FALSE;
     f58:	19 82       	std	Y+1, r1	; 0x01
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <seven_seg_display+0x182>
			}
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
     f5c:	19 82       	std	Y+1, r1	; 0x01
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <seven_seg_display+0x182>
		}
	} else {
		b_ret_val = E_FALSE;
     f60:	19 82       	std	Y+1, r1	; 0x01
	}
	return b_ret_val;
     f62:	89 81       	ldd	r24, Y+1	; 0x01
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <seven_seg_reset>:

bool_t seven_seg_reset(u8 handler) {
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <seven_seg_reset+0x6>
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	8a 83       	std	Y+2, r24	; 0x02
	bool_t b_ret_val = E_TRUE;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	89 83       	std	Y+1, r24	; 0x01
	if ((handler < MAX_NUMBER_OF_HANDLERS)) {
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	84 30       	cpi	r24, 0x04	; 4
     f84:	08 f0       	brcs	.+2      	; 0xf88 <seven_seg_reset+0x18>
     f86:	a3 c0       	rjmp	.+326    	; 0x10ce <seven_seg_reset+0x15e>
		if (ga_seven_handlers[handler].enum_base_port != 0) {
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	fc 01       	movw	r30, r24
     f94:	ef 57       	subi	r30, 0x7F	; 127
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <seven_seg_reset+0x30>
     f9e:	95 c0       	rjmp	.+298    	; 0x10ca <seven_seg_reset+0x15a>
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	fc 01       	movw	r30, r24
     fac:	ee 57       	subi	r30, 0x7E	; 126
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 81       	ld	r24, Z
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	e9 f5       	brne	.+122    	; 0x1030 <seven_seg_reset+0xc0>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	fc 01       	movw	r30, r24
     fc2:	ef 57       	subi	r30, 0x7F	; 127
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 96       	adiw	r24, 0x02	; 2
     fce:	dc 01       	movw	r26, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	fc 01       	movw	r30, r24
     fdc:	ef 57       	subi	r30, 0x7F	; 127
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 96       	adiw	r24, 0x02	; 2
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
     fec:	80 78       	andi	r24, 0x80	; 128
     fee:	8c 93       	st	X, r24
				+ 2) &= ~(0x7f);
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	fc 01       	movw	r30, r24
     ffc:	ef 57       	subi	r30, 0x7F	; 127
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	80 81       	ld	r24, Z
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 96       	adiw	r24, 0x02	; 2
    1008:	dc 01       	movw	r26, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	fc 01       	movw	r30, r24
    1016:	ef 57       	subi	r30, 0x7F	; 127
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 96       	adiw	r24, 0x02	; 2
    1022:	fc 01       	movw	r30, r24
    1024:	90 81       	ld	r25, Z
    1026:	80 91 64 00 	lds	r24, 0x0064
    102a:	89 2b       	or	r24, r25
    102c:	8c 93       	st	X, r24
    102e:	50 c0       	rjmp	.+160    	; 0x10d0 <seven_seg_reset+0x160>
						+ 2) |= pattern[0];
			} else if (ga_seven_handlers[handler].enum_type == COMMON_ANOD) {
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	fc 01       	movw	r30, r24
    103c:	ee 57       	subi	r30, 0x7E	; 126
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	80 81       	ld	r24, Z
    1042:	88 23       	and	r24, r24
    1044:	09 f0       	breq	.+2      	; 0x1048 <seven_seg_reset+0xd8>
    1046:	3f c0       	rjmp	.+126    	; 0x10c6 <seven_seg_reset+0x156>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	fc 01       	movw	r30, r24
    1054:	ef 57       	subi	r30, 0x7F	; 127
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 96       	adiw	r24, 0x02	; 2
    1060:	dc 01       	movw	r26, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	fc 01       	movw	r30, r24
    106e:	ef 57       	subi	r30, 0x7F	; 127
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	80 81       	ld	r24, Z
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 96       	adiw	r24, 0x02	; 2
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	8f 67       	ori	r24, 0x7F	; 127
    1080:	8c 93       	st	X, r24
				+ 2) |= 0x7f;
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	fc 01       	movw	r30, r24
    108e:	ef 57       	subi	r30, 0x7F	; 127
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 81       	ld	r24, Z
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 96       	adiw	r24, 0x02	; 2
    109a:	dc 01       	movw	r26, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	fc 01       	movw	r30, r24
    10a8:	ef 57       	subi	r30, 0x7F	; 127
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 96       	adiw	r24, 0x02	; 2
    10b4:	fc 01       	movw	r30, r24
    10b6:	80 81       	ld	r24, Z
    10b8:	98 2f       	mov	r25, r24
    10ba:	80 91 64 00 	lds	r24, 0x0064
    10be:	80 95       	com	r24
    10c0:	89 23       	and	r24, r25
    10c2:	8c 93       	st	X, r24
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <seven_seg_reset+0x160>
						+ 2) &= ~pattern[0];
			} else {
				/*invalid parameter*/
				b_ret_val = E_FALSE;
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <seven_seg_reset+0x160>
			}
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
    10ca:	19 82       	std	Y+1, r1	; 0x01
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <seven_seg_reset+0x160>
		}
	} else {
		b_ret_val = E_FALSE;
    10ce:	19 82       	std	Y+1, r1	; 0x01
	}
	return b_ret_val;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <seven_seg_deinit>:

bool_t seven_seg_deinit(u8 handler) {
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <seven_seg_deinit+0x6>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	8a 83       	std	Y+2, r24	; 0x02
	bool_t b_ret_val = E_TRUE;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	89 83       	std	Y+1, r24	; 0x01
	if ((handler < MAX_NUMBER_OF_HANDLERS)) {
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <seven_seg_deinit+0x18>
    10f2:	74 c0       	rjmp	.+232    	; 0x11dc <seven_seg_deinit+0x100>
		if (ga_seven_handlers[handler].enum_base_port != 0) {
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	fc 01       	movw	r30, r24
    1100:	ef 57       	subi	r30, 0x7F	; 127
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	88 23       	and	r24, r24
    1108:	09 f4       	brne	.+2      	; 0x110c <seven_seg_deinit+0x30>
    110a:	66 c0       	rjmp	.+204    	; 0x11d8 <seven_seg_deinit+0xfc>
			if (ga_seven_handlers[handler].enum_type == COMMON_CATHOD) {
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	fc 01       	movw	r30, r24
    1118:	ee 57       	subi	r30, 0x7E	; 126
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	39 f5       	brne	.+78     	; 0x1170 <seven_seg_deinit+0x94>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	fc 01       	movw	r30, r24
    112e:	ef 57       	subi	r30, 0x7F	; 127
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	80 81       	ld	r24, Z
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 96       	adiw	r24, 0x02	; 2
    113a:	dc 01       	movw	r26, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	fc 01       	movw	r30, r24
    1148:	ef 57       	subi	r30, 0x7F	; 127
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 81       	ld	r24, Z
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 96       	adiw	r24, 0x02	; 2
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	80 78       	andi	r24, 0x80	; 128
    115a:	8c 93       	st	X, r24
						+ 2) &= ~(0x7f);
				ga_seven_handlers[handler].enum_base_port = 0;
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	fc 01       	movw	r30, r24
    1168:	ef 57       	subi	r30, 0x7F	; 127
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	10 82       	st	Z, r1
    116e:	37 c0       	rjmp	.+110    	; 0x11de <seven_seg_deinit+0x102>
			} else if (ga_seven_handlers[handler].enum_type == COMMON_ANOD) {
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	fc 01       	movw	r30, r24
    117c:	ee 57       	subi	r30, 0x7E	; 126
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	80 81       	ld	r24, Z
    1182:	88 23       	and	r24, r24
    1184:	39 f5       	brne	.+78     	; 0x11d4 <seven_seg_deinit+0xf8>
				*(volatile u8*) (ga_seven_handlers[handler].enum_base_port
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	fc 01       	movw	r30, r24
    1192:	ef 57       	subi	r30, 0x7F	; 127
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	80 81       	ld	r24, Z
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 96       	adiw	r24, 0x02	; 2
    119e:	dc 01       	movw	r26, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	fc 01       	movw	r30, r24
    11ac:	ef 57       	subi	r30, 0x7F	; 127
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 96       	adiw	r24, 0x02	; 2
    11b8:	fc 01       	movw	r30, r24
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 67       	ori	r24, 0x7F	; 127
    11be:	8c 93       	st	X, r24
						+ 2) |= 0x7f;
				ga_seven_handlers[handler].enum_base_port = 0;
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	fc 01       	movw	r30, r24
    11cc:	ef 57       	subi	r30, 0x7F	; 127
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	10 82       	st	Z, r1
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <seven_seg_deinit+0x102>
			} else {
				/*invalid parameter*/
				b_ret_val = E_FALSE;
    11d4:	19 82       	std	Y+1, r1	; 0x01
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <seven_seg_deinit+0x102>
			}
		} else {
			/*module not init*/
			b_ret_val = E_FALSE;
    11d8:	19 82       	std	Y+1, r1	; 0x01
    11da:	01 c0       	rjmp	.+2      	; 0x11de <seven_seg_deinit+0x102>
		}
	} else {
		b_ret_val = E_FALSE;
    11dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return b_ret_val;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <__divmodhi4>:
    11ea:	97 fb       	bst	r25, 7
    11ec:	09 2e       	mov	r0, r25
    11ee:	07 26       	eor	r0, r23
    11f0:	0a d0       	rcall	.+20     	; 0x1206 <__divmodhi4_neg1>
    11f2:	77 fd       	sbrc	r23, 7
    11f4:	04 d0       	rcall	.+8      	; 0x11fe <__divmodhi4_neg2>
    11f6:	2e d0       	rcall	.+92     	; 0x1254 <__udivmodhi4>
    11f8:	06 d0       	rcall	.+12     	; 0x1206 <__divmodhi4_neg1>
    11fa:	00 20       	and	r0, r0
    11fc:	1a f4       	brpl	.+6      	; 0x1204 <__divmodhi4_exit>

000011fe <__divmodhi4_neg2>:
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255

00001204 <__divmodhi4_exit>:
    1204:	08 95       	ret

00001206 <__divmodhi4_neg1>:
    1206:	f6 f7       	brtc	.-4      	; 0x1204 <__divmodhi4_exit>
    1208:	90 95       	com	r25
    120a:	81 95       	neg	r24
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	08 95       	ret

00001210 <__udivmodsi4>:
    1210:	a1 e2       	ldi	r26, 0x21	; 33
    1212:	1a 2e       	mov	r1, r26
    1214:	aa 1b       	sub	r26, r26
    1216:	bb 1b       	sub	r27, r27
    1218:	fd 01       	movw	r30, r26
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <__udivmodsi4_ep>

0000121c <__udivmodsi4_loop>:
    121c:	aa 1f       	adc	r26, r26
    121e:	bb 1f       	adc	r27, r27
    1220:	ee 1f       	adc	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	a2 17       	cp	r26, r18
    1226:	b3 07       	cpc	r27, r19
    1228:	e4 07       	cpc	r30, r20
    122a:	f5 07       	cpc	r31, r21
    122c:	20 f0       	brcs	.+8      	; 0x1236 <__udivmodsi4_ep>
    122e:	a2 1b       	sub	r26, r18
    1230:	b3 0b       	sbc	r27, r19
    1232:	e4 0b       	sbc	r30, r20
    1234:	f5 0b       	sbc	r31, r21

00001236 <__udivmodsi4_ep>:
    1236:	66 1f       	adc	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	1a 94       	dec	r1
    1240:	69 f7       	brne	.-38     	; 0x121c <__udivmodsi4_loop>
    1242:	60 95       	com	r22
    1244:	70 95       	com	r23
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	9b 01       	movw	r18, r22
    124c:	ac 01       	movw	r20, r24
    124e:	bd 01       	movw	r22, r26
    1250:	cf 01       	movw	r24, r30
    1252:	08 95       	ret

00001254 <__udivmodhi4>:
    1254:	aa 1b       	sub	r26, r26
    1256:	bb 1b       	sub	r27, r27
    1258:	51 e1       	ldi	r21, 0x11	; 17
    125a:	07 c0       	rjmp	.+14     	; 0x126a <__udivmodhi4_ep>

0000125c <__udivmodhi4_loop>:
    125c:	aa 1f       	adc	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	a6 17       	cp	r26, r22
    1262:	b7 07       	cpc	r27, r23
    1264:	10 f0       	brcs	.+4      	; 0x126a <__udivmodhi4_ep>
    1266:	a6 1b       	sub	r26, r22
    1268:	b7 0b       	sbc	r27, r23

0000126a <__udivmodhi4_ep>:
    126a:	88 1f       	adc	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	5a 95       	dec	r21
    1270:	a9 f7       	brne	.-22     	; 0x125c <__udivmodhi4_loop>
    1272:	80 95       	com	r24
    1274:	90 95       	com	r25
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	08 95       	ret

0000127c <_exit>:
    127c:	f8 94       	cli

0000127e <__stop_program>:
    127e:	ff cf       	rjmp	.-2      	; 0x127e <__stop_program>
