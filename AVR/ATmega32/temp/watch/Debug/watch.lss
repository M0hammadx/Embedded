
watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000470  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  000004e4  2**0
                  ALLOC
  2 .stab         00001bc0  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000027f2  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00004896  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000049f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00004b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00006bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00008c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	1a c1       	rjmp	.+564    	; 0x246 <__vector_4>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	e5 c0       	rjmp	.+458    	; 0x1f4 <__vector_10>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2b c0       	rjmp	.+86     	; 0x8c <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3a c0       	rjmp	.+116    	; 0xb2 <__vector_15>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	c9 d1       	rcall	.+914    	; 0x41a <main>
  88:	f1 c1       	rjmp	.+994    	; 0x46c <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <__vector_13>:

#include "USART.h"

void (*ISR_USART_RXC)(), (*ISR_USART_TXC)();

void USART_RXC_vect() {
  8c:	df 93       	push	r29
  8e:	cf 93       	push	r28
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	if (ISR_USART_RXC)
  94:	80 91 60 00 	lds	r24, 0x0060
  98:	90 91 61 00 	lds	r25, 0x0061
  9c:	00 97       	sbiw	r24, 0x00	; 0
  9e:	29 f0       	breq	.+10     	; 0xaa <__vector_13+0x1e>
		ISR_USART_RXC();
  a0:	e0 91 60 00 	lds	r30, 0x0060
  a4:	f0 91 61 00 	lds	r31, 0x0061
  a8:	09 95       	icall
	sei();
  aa:	78 94       	sei
}
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <__vector_15>:
void USART_TXC_vect() {
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	if (ISR_USART_TXC)
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	90 91 63 00 	lds	r25, 0x0063
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	29 f0       	breq	.+10     	; 0xd0 <__vector_15+0x1e>
		ISR_USART_TXC();
  c6:	e0 91 62 00 	lds	r30, 0x0062
  ca:	f0 91 63 00 	lds	r31, 0x0063
  ce:	09 95       	icall
	sei();
  d0:	78 94       	sei
}
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <UART_addISR>:
void UART_addISR(UART_NUM_t UART, UART_INTERRUPT_t ISR_type, void (*ISR)()) {
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	00 d0       	rcall	.+0      	; 0xde <UART_addISR+0x6>
  de:	00 d0       	rcall	.+0      	; 0xe0 <UART_addISR+0x8>
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	6a 83       	std	Y+2, r22	; 0x02
  e8:	5c 83       	std	Y+4, r21	; 0x04
  ea:	4b 83       	std	Y+3, r20	; 0x03
	if (ISR_type == USART_RXC) {
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	88 23       	and	r24, r24
  f0:	71 f4       	brne	.+28     	; 0x10e <UART_addISR+0x36>
		ISR_USART_RXC = ISR;
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	9c 81       	ldd	r25, Y+4	; 0x04
  f6:	90 93 61 00 	sts	0x0061, r25
  fa:	80 93 60 00 	sts	0x0060, r24
		UCSRB |= (1 << RXCIE);
  fe:	aa e2       	ldi	r26, 0x2A	; 42
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	ea e2       	ldi	r30, 0x2A	; 42
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8c 93       	st	X, r24
 10c:	10 c0       	rjmp	.+32     	; 0x12e <UART_addISR+0x56>
	} else if (ISR_type == USART_TXC) {
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	69 f4       	brne	.+26     	; 0x12e <UART_addISR+0x56>
		ISR_USART_TXC = ISR;
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	9c 81       	ldd	r25, Y+4	; 0x04
 118:	90 93 63 00 	sts	0x0063, r25
 11c:	80 93 62 00 	sts	0x0062, r24
		UCSRB |= (1 << TXCIE);
 120:	aa e2       	ldi	r26, 0x2A	; 42
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	ea e2       	ldi	r30, 0x2A	; 42
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	8c 93       	st	X, r24
	}
	sei();
 12e:	78 94       	sei
}
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <UART_init>:

void UART_init(UART_NUM_t UART, u16 baudRate) {
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	00 d0       	rcall	.+0      	; 0x144 <UART_init+0x6>
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	89 83       	std	Y+1, r24	; 0x01
 14c:	7b 83       	std	Y+3, r23	; 0x03
 14e:	6a 83       	std	Y+2, r22	; 0x02
	UBRRH = (unsigned char) (baudRate >> 8);
 150:	e0 e4       	ldi	r30, 0x40	; 64
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	9b 81       	ldd	r25, Y+3	; 0x03
 158:	89 2f       	mov	r24, r25
 15a:	99 27       	eor	r25, r25
 15c:	80 83       	st	Z, r24
	UBRRL = (unsigned char) baudRate;
 15e:	e9 e2       	ldi	r30, 0x29	; 41
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	80 83       	st	Z, r24

	UCSRB |= (1 << RXEN) | (1 << TXEN);
 166:	aa e2       	ldi	r26, 0x2A	; 42
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	ea e2       	ldi	r30, 0x2A	; 42
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 61       	ori	r24, 0x18	; 24
 172:	8c 93       	st	X, r24

	UCSRC &= ~(1 << UMSEL);
 174:	a0 e4       	ldi	r26, 0x40	; 64
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	e0 e4       	ldi	r30, 0x40	; 64
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	8f 7b       	andi	r24, 0xBF	; 191
 180:	8c 93       	st	X, r24
	//2stop , odd parity , 8bit data
	UCSRC |= (1 << URSEL) | (3 << UPM0) | (1 << USBS) | (3 << UCSZ0);
 182:	a0 e4       	ldi	r26, 0x40	; 64
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e0 e4       	ldi	r30, 0x40	; 64
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8e 6b       	ori	r24, 0xBE	; 190
 18e:	8c 93       	st	X, r24

}
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	cf 91       	pop	r28
 198:	df 91       	pop	r29
 19a:	08 95       	ret

0000019c <UART_sendByte>:
	while (!(UCSRA & (1 << RXC)))
		;
	return UDR;

}
void UART_sendByte(UART_NUM_t UART, char Chr) { //Blocking
 19c:	df 93       	push	r29
 19e:	cf 93       	push	r28
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <UART_sendByte+0x6>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	6a 83       	std	Y+2, r22	; 0x02
	while (!(UCSRA & (1 << UDRE)))
 1aa:	eb e2       	ldi	r30, 0x2B	; 43
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	80 72       	andi	r24, 0x20	; 32
 1b6:	90 70       	andi	r25, 0x00	; 0
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	b9 f3       	breq	.-18     	; 0x1aa <UART_sendByte+0xe>
		;
	UDR = Chr;
 1bc:	ec e2       	ldi	r30, 0x2C	; 44
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	80 83       	st	Z, r24
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	cf 91       	pop	r28
 1ca:	df 91       	pop	r29
 1cc:	08 95       	ret

000001ce <UART_Flush>:
}
u8 UART_dataReady(UART_NUM_t UART) {
	return (UCSRA & (1 << RXC));
}

void UART_Flush(void) {
 1ce:	df 93       	push	r29
 1d0:	cf 93       	push	r28
 1d2:	0f 92       	push	r0
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <UART_Flush+0x14>
	u8 dummy;
	while (UCSRA & (1 << RXC))
		dummy = UDR;
 1da:	ec e2       	ldi	r30, 0x2C	; 44
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	89 83       	std	Y+1, r24	; 0x01
	return (UCSRA & (1 << RXC));
}

void UART_Flush(void) {
	u8 dummy;
	while (UCSRA & (1 << RXC))
 1e2:	eb e2       	ldi	r30, 0x2B	; 43
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
 1ea:	bc f3       	brlt	.-18     	; 0x1da <UART_Flush+0xc>
		dummy = UDR;
}
 1ec:	0f 90       	pop	r0
 1ee:	cf 91       	pop	r28
 1f0:	df 91       	pop	r29
 1f2:	08 95       	ret

000001f4 <__vector_10>:
//
//	if (t0_isr)
//		t0_isr();
//}

void TIMER0_COMP_vect() {
 1f4:	df 93       	push	r29
 1f6:	cf 93       	push	r28
 1f8:	0f 92       	push	r0
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62

	for (u8 i = 0; i < TIMER0_HANDLERS_MAX_COUNT; i++)
 1fe:	19 82       	std	Y+1, r1	; 0x01
 200:	1b c0       	rjmp	.+54     	; 0x238 <__vector_10+0x44>
		if (t0_isr[i])
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	fc 01       	movw	r30, r24
 20e:	ea 59       	subi	r30, 0x9A	; 154
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	80 81       	ld	r24, Z
 214:	91 81       	ldd	r25, Z+1	; 0x01
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	61 f0       	breq	.+24     	; 0x232 <__vector_10+0x3e>
			t0_isr[i]();
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	88 2f       	mov	r24, r24
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	fc 01       	movw	r30, r24
 226:	ea 59       	subi	r30, 0x9A	; 154
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	01 90       	ld	r0, Z+
 22c:	f0 81       	ld	r31, Z
 22e:	e0 2d       	mov	r30, r0
 230:	09 95       	icall
//		t0_isr();
//}

void TIMER0_COMP_vect() {

	for (u8 i = 0; i < TIMER0_HANDLERS_MAX_COUNT; i++)
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	88 23       	and	r24, r24
 23c:	11 f3       	breq	.-60     	; 0x202 <__vector_10+0xe>
		if (t0_isr[i])
			t0_isr[i]();
}
 23e:	0f 90       	pop	r0
 240:	cf 91       	pop	r28
 242:	df 91       	pop	r29
 244:	08 95       	ret

00000246 <__vector_4>:
void TIMER2_COMP_vect() {
 246:	df 93       	push	r29
 248:	cf 93       	push	r28
 24a:	0f 92       	push	r0
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 0; i < TIMER2_HANDLERS_MAX_COUNT; i++)
 250:	19 82       	std	Y+1, r1	; 0x01
 252:	1b c0       	rjmp	.+54     	; 0x28a <__vector_4+0x44>
		if (t2_isr[i])
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	fc 01       	movw	r30, r24
 260:	e8 59       	subi	r30, 0x98	; 152
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	80 81       	ld	r24, Z
 266:	91 81       	ldd	r25, Z+1	; 0x01
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	61 f0       	breq	.+24     	; 0x284 <__vector_4+0x3e>
			t2_isr[i]();
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	88 2f       	mov	r24, r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	fc 01       	movw	r30, r24
 278:	e8 59       	subi	r30, 0x98	; 152
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	01 90       	ld	r0, Z+
 27e:	f0 81       	ld	r31, Z
 280:	e0 2d       	mov	r30, r0
 282:	09 95       	icall
	for (u8 i = 0; i < TIMER0_HANDLERS_MAX_COUNT; i++)
		if (t0_isr[i])
			t0_isr[i]();
}
void TIMER2_COMP_vect() {
	for (u8 i = 0; i < TIMER2_HANDLERS_MAX_COUNT; i++)
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	88 23       	and	r24, r24
 28e:	11 f3       	breq	.-60     	; 0x254 <__vector_4+0xe>
		if (t2_isr[i])
			t2_isr[i]();
}
 290:	0f 90       	pop	r0
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	08 95       	ret

00000298 <DIO_init_port_output>:
 *      Author: mh-sh
 */

#include "DIO.h"

void DIO_init_port_output(enum_port_base_t port_base, u8 port_mask) {
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	00 d0       	rcall	.+0      	; 0x29e <DIO_init_port_output+0x6>
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 1) |= port_mask;
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	88 2f       	mov	r24, r24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	dc 01       	movw	r26, r24
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	88 2f       	mov	r24, r24
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	fc 01       	movw	r30, r24
 2ba:	90 81       	ld	r25, Z
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	89 2b       	or	r24, r25
 2c0:	8c 93       	st	X, r24
}
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <DIO_init_port_input>:
void DIO_init_port_input(enum_port_base_t port_base, u8 port_mask) {
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <DIO_init_port_input+0x6>
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	89 83       	std	Y+1, r24	; 0x01
 2d8:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*) (port_base + 1) &= ~port_mask;
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	dc 01       	movw	r26, r24
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	fc 01       	movw	r30, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	98 2f       	mov	r25, r24
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	80 95       	com	r24
 2f6:	89 23       	and	r24, r25
 2f8:	8c 93       	st	X, r24
}
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	cf 91       	pop	r28
 300:	df 91       	pop	r29
 302:	08 95       	ret

00000304 <DIO_write_pin>:

void DIO_write_port(enum_port_base_t port_base, u8 port_mask, u8 data) {
	*(volatile u8*) (port_base + 2) &= ~(port_mask);
	*(volatile u8*) (port_base + 2) |= data & (port_mask);
}
void DIO_write_pin(enum_port_base_t port_base, u8 pin_no, bool_t data) {
 304:	df 93       	push	r29
 306:	cf 93       	push	r28
 308:	00 d0       	rcall	.+0      	; 0x30a <DIO_write_pin+0x6>
 30a:	0f 92       	push	r0
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	89 83       	std	Y+1, r24	; 0x01
 312:	6a 83       	std	Y+2, r22	; 0x02
 314:	4b 83       	std	Y+3, r20	; 0x03
	*(volatile u8*) (port_base + 2) &= ~(1 << pin_no);
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 96       	adiw	r24, 0x02	; 2
 31e:	dc 01       	movw	r26, r24
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 96       	adiw	r24, 0x02	; 2
 328:	fc 01       	movw	r30, r24
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_write_pin+0x3a>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	2a 95       	dec	r18
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_write_pin+0x36>
 342:	80 95       	com	r24
 344:	84 23       	and	r24, r20
 346:	8c 93       	st	X, r24
	*(volatile u8*) (port_base + 2) |= data << pin_no;
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	88 2f       	mov	r24, r24
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 96       	adiw	r24, 0x02	; 2
 350:	dc 01       	movw	r26, r24
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	88 2f       	mov	r24, r24
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 96       	adiw	r24, 0x02	; 2
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	88 2f       	mov	r24, r24
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	b9 01       	movw	r22, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_write_pin+0x70>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_write_pin+0x6c>
 378:	cb 01       	movw	r24, r22
 37a:	84 2b       	or	r24, r20
 37c:	8c 93       	st	X, r24
}
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	cf 91       	pop	r28
 386:	df 91       	pop	r29
 388:	08 95       	ret

0000038a <DIO_read_pin>:
}

u8 DIO_read_port(enum_port_base_t port_base, u8 port_mask) {
	return ((*(volatile u8*) (port_base)) & (port_mask));
}
u8 DIO_read_pin(enum_port_base_t port_base, u8 pin_no) {
 38a:	df 93       	push	r29
 38c:	cf 93       	push	r28
 38e:	00 d0       	rcall	.+0      	; 0x390 <DIO_read_pin+0x6>
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	89 83       	std	Y+1, r24	; 0x01
 396:	6a 83       	std	Y+2, r22	; 0x02
	return ((*(volatile u8*) (port_base)) & (1 << pin_no));
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	88 2f       	mov	r24, r24
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 2e       	mov	r0, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_read_pin+0x2c>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_read_pin+0x28>
 3ba:	84 23       	and	r24, r20
}
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	cf 91       	pop	r28
 3c2:	df 91       	pop	r29
 3c4:	08 95       	ret

000003c6 <tx>:
void function3(void * pv) {
	seven_seg_display(minID1, currMin % 10);
	seven_seg_display(minID10, currMin++ / 10);

}
void tx() {
 3c6:	df 93       	push	r29
 3c8:	cf 93       	push	r28
 3ca:	0f 92       	push	r0
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
	DIO_write_pin(BASE_B, 0, !DIO_read_pin(BASE_B, 0));
 3d0:	86 e3       	ldi	r24, 0x36	; 54
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	da df       	rcall	.-76     	; 0x38a <DIO_read_pin>
 3d6:	19 82       	std	Y+1, r1	; 0x01
 3d8:	88 23       	and	r24, r24
 3da:	11 f4       	brne	.+4      	; 0x3e0 <tx+0x1a>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	89 83       	std	Y+1, r24	; 0x01
 3e0:	86 e3       	ldi	r24, 0x36	; 54
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	49 81       	ldd	r20, Y+1	; 0x01
 3e6:	8e df       	rcall	.-228    	; 0x304 <DIO_write_pin>
 3e8:	0f 90       	pop	r0
 3ea:	cf 91       	pop	r28
//	sei();
}
 3ec:	df 91       	pop	r29
 3ee:	08 95       	ret

000003f0 <rx>:
void rx() {
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28
 3f4:	0f 92       	push	r0
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
	DIO_write_pin(BASE_B, 1, !DIO_read_pin(BASE_B, 1));
 3fa:	86 e3       	ldi	r24, 0x36	; 54
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	c5 df       	rcall	.-118    	; 0x38a <DIO_read_pin>
 400:	19 82       	std	Y+1, r1	; 0x01
 402:	88 23       	and	r24, r24
 404:	11 f4       	brne	.+4      	; 0x40a <rx+0x1a>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	86 e3       	ldi	r24, 0x36	; 54
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	49 81       	ldd	r20, Y+1	; 0x01
 410:	79 df       	rcall	.-270    	; 0x304 <DIO_write_pin>
 412:	0f 90       	pop	r0
 414:	cf 91       	pop	r28
//	sei();

}
 416:	df 91       	pop	r29
 418:	08 95       	ret

0000041a <main>:
int main(void) {
 41a:	df 93       	push	r29
 41c:	cf 93       	push	r28
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
	UART_init(UART0, 9600);
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	60 e8       	ldi	r22, 0x80	; 128
 426:	75 e2       	ldi	r23, 0x25	; 37
 428:	8a de       	rcall	.-748    	; 0x13e <UART_init>
 42a:	28 ef       	ldi	r18, 0xF8	; 248

	UART_addISR(UART0, USART_RXC, rx); //working
 42c:	31 e0       	ldi	r19, 0x01	; 1
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	a9 01       	movw	r20, r18
 434:	51 de       	rcall	.-862    	; 0xd8 <UART_addISR>
 436:	23 ee       	ldi	r18, 0xE3	; 227
 438:	31 e0       	ldi	r19, 0x01	; 1
	UART_addISR(UART0, USART_TXC, tx); // not working somehow
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	a9 01       	movw	r20, r18
 440:	4b de       	rcall	.-874    	; 0xd8 <UART_addISR>
 442:	86 e3       	ldi	r24, 0x36	; 54
 444:	63 e0       	ldi	r22, 0x03	; 3
 446:	28 df       	rcall	.-432    	; 0x298 <DIO_init_port_output>

	DIO_init_port_output(BASE_B, 0x3);
 448:	86 e3       	ldi	r24, 0x36	; 54
 44a:	64 e0       	ldi	r22, 0x04	; 4
 44c:	3f df       	rcall	.-386    	; 0x2cc <DIO_init_port_input>
 44e:	eb e2       	ldi	r30, 0x2B	; 43
	DIO_init_port_input(BASE_B, 0x4);
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	88 2f       	mov	r24, r24
 456:	90 e0       	ldi	r25, 0x00	; 0
//	lcd_init(&lcd);
//	lcd_gotoxy(&lcd, 1, 1);
//	lcd_print(&lcd, "xxxx xxxx");
//	lcd_gotoxy(&lcd, 1, 2);
//	lcd_print(&lcd, "yyyy yyyy");
	if (UCSRA & (1 << 6)) {
 458:	80 74       	andi	r24, 0x40	; 64
 45a:	90 70       	andi	r25, 0x00	; 0
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	09 f0       	breq	.+2      	; 0x462 <main+0x48>
 460:	b2 df       	rcall	.-156    	; 0x3c6 <tx>
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	61 e6       	ldi	r22, 0x61	; 97
 466:	9a de       	rcall	.-716    	; 0x19c <UART_sendByte>
 468:	b2 de       	rcall	.-668    	; 0x1ce <UART_Flush>
		tx();
 46a:	fb cf       	rjmp	.-10     	; 0x462 <main+0x48>

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
	}
	while (1) {
	UART_sendByte(UART0, 'a');
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
